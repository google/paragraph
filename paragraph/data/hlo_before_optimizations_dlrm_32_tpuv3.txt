HloModule cluster_7035002757448359829_f15n_1__.3522, input_output_alias={ {0}: (0, {0}, may-alias), {1}: (0, {1}, may-alias), {2}: (0, {2}, may-alias), {3}: (0, {3}, may-alias), {4}: (0, {4}, may-alias), {5}: (0, {5}, may-alias), {6}: (0, {6}, may-alias), {7}: (0, {7}, may-alias), {8}: (0, {8}, may-alias), {9}: (0, {9}, may-alias), {10}: (0, {10}, may-alias), {11}: (0, {11}, may-alias), {12}: (0, {12}, may-alias), {13}: (0, {13}, may-alias), {14}: (0, {14}, may-alias), {15}: (0, {15}, may-alias), {16}: (0, {16}, may-alias), {17}: (0, {17}, may-alias), {18}: (0, {18}, may-alias), {19}: (0, {19}, may-alias), {20}: (0, {20}, may-alias), {21}: (0, {21}, may-alias), {22}: (0, {22}, may-alias), {23}: (0, {23}, may-alias), {24}: (0, {24}, may-alias), {25}: (0, {25}, may-alias), {26}: (0, {26}, may-alias), {27}: (0, {27}, may-alias), {28}: (0, {28}, may-alias), {29}: (0, {29}, may-alias), {30}: (0, {30}, may-alias) }

%sum.36 (x.37: f32[], y.38: f32[]) -> f32[] {
  %x.37 = f32[] parameter(0)
  %y.38 = f32[] parameter(1)
  ROOT %add.39 = f32[] add(f32[] %x.37, f32[] %y.38)
}

%sum.40 (x.41: f32[], y.42: f32[]) -> f32[] {
  %x.41 = f32[] parameter(0)
  %y.42 = f32[] parameter(1)
  ROOT %add.43 = f32[] add(f32[] %x.41, f32[] %y.42)
}

%sum.44 (x.45: f32[], y.46: f32[]) -> f32[] {
  %x.45 = f32[] parameter(0)
  %y.46 = f32[] parameter(1)
  ROOT %add.47 = f32[] add(f32[] %x.45, f32[] %y.46)
}

%sum.48 (x.49: f32[], y.50: f32[]) -> f32[] {
  %x.49 = f32[] parameter(0)
  %y.50 = f32[] parameter(1)
  ROOT %add.51 = f32[] add(f32[] %x.49, f32[] %y.50)
}

%sum.52 (x.53: f32[], y.54: f32[]) -> f32[] {
  %x.53 = f32[] parameter(0)
  %y.54 = f32[] parameter(1)
  ROOT %add.55 = f32[] add(f32[] %x.53, f32[] %y.54)
}

%sum.56 (x.57: f32[], y.58: f32[]) -> f32[] {
  %x.57 = f32[] parameter(0)
  %y.58 = f32[] parameter(1)
  ROOT %add.59 = f32[] add(f32[] %x.57, f32[] %y.58)
}

%sum.60 (x.61: f32[], y.62: f32[]) -> f32[] {
  %x.61 = f32[] parameter(0)
  %y.62 = f32[] parameter(1)
  ROOT %add.63 = f32[] add(f32[] %x.61, f32[] %y.62)
}

%sum.64 (x.65: f32[], y.66: f32[]) -> f32[] {
  %x.65 = f32[] parameter(0)
  %y.66 = f32[] parameter(1)
  ROOT %add.67 = f32[] add(f32[] %x.65, f32[] %y.66)
}

%sum.68 (x.69: f32[], y.70: f32[]) -> f32[] {
  %x.69 = f32[] parameter(0)
  %y.70 = f32[] parameter(1)
  ROOT %add.71 = f32[] add(f32[] %x.69, f32[] %y.70)
}

%sum.72 (x.73: f32[], y.74: f32[]) -> f32[] {
  %x.73 = f32[] parameter(0)
  %y.74 = f32[] parameter(1)
  ROOT %add.75 = f32[] add(f32[] %x.73, f32[] %y.74)
}

%sum.76 (x.77: f32[], y.78: f32[]) -> f32[] {
  %x.77 = f32[] parameter(0)
  %y.78 = f32[] parameter(1)
  ROOT %add.79 = f32[] add(f32[] %x.77, f32[] %y.78)
}

%sum.80 (x.81: f32[], y.82: f32[]) -> f32[] {
  %x.81 = f32[] parameter(0)
  %y.82 = f32[] parameter(1)
  ROOT %add.83 = f32[] add(f32[] %x.81, f32[] %y.82)
}

%sum.84 (x.85: f32[], y.86: f32[]) -> f32[] {
  %x.85 = f32[] parameter(0)
  %y.86 = f32[] parameter(1)
  ROOT %add.87 = f32[] add(f32[] %x.85, f32[] %y.86)
}

%while_binary_crossentropy_Mean-reduction.88 (x.89: f32[], y.90: f32[]) -> f32[] {
  %x.89 = f32[] parameter(0)
  %y.90 = f32[] parameter(1)
  ROOT %add.91 = f32[] add(f32[] %x.89, f32[] %y.90)
}

%while_Mean-reduction.92 (x.93: f32[], y.94: f32[]) -> f32[] {
  %x.93 = f32[] parameter(0)
  %y.94 = f32[] parameter(1)
  ROOT %add.95 = f32[] add(f32[] %x.93, f32[] %y.94)
}

%while_training_gradients_while_binary_crossentropy_weighted_loss_Mul_grad_Sum-reduction.96 (x.97: f32[], y.98: f32[]) -> f32[] {
  %x.97 = f32[] parameter(0)
  %y.98 = f32[] parameter(1)
  ROOT %add.99 = f32[] add(f32[] %x.97, f32[] %y.98)
}

%region_0.100 (Arg_0.101: f32[], Arg_1.102: f32[]) -> f32[] {
  %Arg_0.101 = f32[] parameter(0)
  %Arg_1.102 = f32[] parameter(1)
  ROOT %add.103 = f32[] add(f32[] %Arg_0.101, f32[] %Arg_1.102), metadata={op_name="while/training/gradients/while/top_mlp_layer_4/BiasAdd_grad/BiasAddGrad"}
}

%sum.104 (x.105: f32[], y.106: f32[]) -> f32[] {
  %x.105 = f32[] parameter(0)
  %y.106 = f32[] parameter(1)
  ROOT %add.107 = f32[] add(f32[] %x.105, f32[] %y.106)
}

%region_0.108 (Arg_0.109: f32[], Arg_1.110: f32[]) -> f32[] {
  %Arg_0.109 = f32[] parameter(0)
  %Arg_1.110 = f32[] parameter(1)
  ROOT %add.111 = f32[] add(f32[] %Arg_0.109, f32[] %Arg_1.110), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
}

%sum.112 (x.113: f32[], y.114: f32[]) -> f32[] {
  %x.113 = f32[] parameter(0)
  %y.114 = f32[] parameter(1)
  ROOT %add.115 = f32[] add(f32[] %x.113, f32[] %y.114)
}

%sum.116 (x.117: f32[], y.118: f32[]) -> f32[] {
  %x.117 = f32[] parameter(0)
  %y.118 = f32[] parameter(1)
  ROOT %add.119 = f32[] add(f32[] %x.117, f32[] %y.118)
}

%region_0.120 (Arg_0.121: f32[], Arg_1.122: f32[]) -> f32[] {
  %Arg_0.121 = f32[] parameter(0)
  %Arg_1.122 = f32[] parameter(1)
  ROOT %add.123 = f32[] add(f32[] %Arg_0.121, f32[] %Arg_1.122), metadata={op_name="while/training/gradients/while/top_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
}

%sum.124 (x.125: f32[], y.126: f32[]) -> f32[] {
  %x.125 = f32[] parameter(0)
  %y.126 = f32[] parameter(1)
  ROOT %add.127 = f32[] add(f32[] %x.125, f32[] %y.126)
}

%sum.128 (x.129: f32[], y.130: f32[]) -> f32[] {
  %x.129 = f32[] parameter(0)
  %y.130 = f32[] parameter(1)
  ROOT %add.131 = f32[] add(f32[] %x.129, f32[] %y.130)
}

%region_0.132 (Arg_0.133: f32[], Arg_1.134: f32[]) -> f32[] {
  %Arg_0.133 = f32[] parameter(0)
  %Arg_1.134 = f32[] parameter(1)
  ROOT %add.135 = f32[] add(f32[] %Arg_0.133, f32[] %Arg_1.134), metadata={op_name="while/training/gradients/while/top_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
}

%sum.136 (x.137: f32[], y.138: f32[]) -> f32[] {
  %x.137 = f32[] parameter(0)
  %y.138 = f32[] parameter(1)
  ROOT %add.139 = f32[] add(f32[] %x.137, f32[] %y.138)
}

%sum.140 (x.141: f32[], y.142: f32[]) -> f32[] {
  %x.141 = f32[] parameter(0)
  %y.142 = f32[] parameter(1)
  ROOT %add.143 = f32[] add(f32[] %x.141, f32[] %y.142)
}

%region_0.144 (Arg_0.145: f32[], Arg_1.146: f32[]) -> f32[] {
  %Arg_0.145 = f32[] parameter(0)
  %Arg_1.146 = f32[] parameter(1)
  ROOT %add.147 = f32[] add(f32[] %Arg_0.145, f32[] %Arg_1.146), metadata={op_name="while/training/gradients/while/top_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
}

%sum.148 (x.149: f32[], y.150: f32[]) -> f32[] {
  %x.149 = f32[] parameter(0)
  %y.150 = f32[] parameter(1)
  ROOT %add.151 = f32[] add(f32[] %x.149, f32[] %y.150)
}

%sum.152 (x.153: f32[], y.154: f32[]) -> f32[] {
  %x.153 = f32[] parameter(0)
  %y.154 = f32[] parameter(1)
  ROOT %add.155 = f32[] add(f32[] %x.153, f32[] %y.154)
}

%sum.156 (x.157: f32[], y.158: f32[]) -> f32[] {
  %x.157 = f32[] parameter(0)
  %y.158 = f32[] parameter(1)
  ROOT %add.159 = f32[] add(f32[] %x.157, f32[] %y.158)
}

%region_0.160 (Arg_0.161: f32[], Arg_1.162: f32[]) -> f32[] {
  %Arg_0.161 = f32[] parameter(0)
  %Arg_1.162 = f32[] parameter(1)
  ROOT %add.163 = f32[] add(f32[] %Arg_0.161, f32[] %Arg_1.162), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
}

%region_0.164 (Arg_0.165: f32[], Arg_1.166: f32[]) -> f32[] {
  %Arg_0.165 = f32[] parameter(0)
  %Arg_1.166 = f32[] parameter(1)
  ROOT %add.167 = f32[] add(f32[] %Arg_0.165, f32[] %Arg_1.166), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
}

%region_0.168 (Arg_0.169: f32[], Arg_1.170: f32[]) -> f32[] {
  %Arg_0.169 = f32[] parameter(0)
  %Arg_1.170 = f32[] parameter(1)
  ROOT %add.171 = f32[] add(f32[] %Arg_0.169, f32[] %Arg_1.170), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
}

%sum.172 (x.173: f32[], y.174: f32[]) -> f32[] {
  %x.173 = f32[] parameter(0)
  %y.174 = f32[] parameter(1)
  ROOT %add.175 = f32[] add(f32[] %x.173, f32[] %y.174)
}

%sum.176 (x.177: f32[], y.178: f32[]) -> f32[] {
  %x.177 = f32[] parameter(0)
  %y.178 = f32[] parameter(1)
  ROOT %add.179 = f32[] add(f32[] %x.177, f32[] %y.178)
}

%sum.180 (x.181: f32[], y.182: f32[]) -> f32[] {
  %x.181 = f32[] parameter(0)
  %y.182 = f32[] parameter(1)
  ROOT %add.183 = f32[] add(f32[] %x.181, f32[] %y.182)
}

%sum.184 (x.185: f32[], y.186: f32[]) -> f32[] {
  %x.185 = f32[] parameter(0)
  %y.186 = f32[] parameter(1)
  ROOT %add.187 = f32[] add(f32[] %x.185, f32[] %y.186)
}

%sum.188 (x.189: f32[], y.190: f32[]) -> f32[] {
  %x.189 = f32[] parameter(0)
  %y.190 = f32[] parameter(1)
  ROOT %add.191 = f32[] add(f32[] %x.189, f32[] %y.190)
}

%sum.192 (x.193: f32[], y.194: f32[]) -> f32[] {
  %x.193 = f32[] parameter(0)
  %y.194 = f32[] parameter(1)
  ROOT %add.195 = f32[] add(f32[] %x.193, f32[] %y.194)
}

%scatter-combiner.196 (p0.197: f32[], p1.198: f32[]) -> f32[] {
  %p0.197 = f32[] parameter(0)
  %p1.198 = f32[] parameter(1)
  ROOT %add.199 = f32[] add(f32[] %p0.197, f32[] %p1.198)
}

%sum.200 (x.201: f32[], y.202: f32[]) -> f32[] {
  %x.201 = f32[] parameter(0)
  %y.202 = f32[] parameter(1)
  ROOT %add.203 = f32[] add(f32[] %x.201, f32[] %y.202)
}

%_functionalize_body_10__.204 (arg_tuple.205: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1]) {
  %constant.788 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape"}
  %constant.790 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_1"}
  %constant.792 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_10"}
  %constant.794 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_11"}
  %constant.796 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_12"}
  %constant.798 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_2"}
  %constant.800 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_3"}
  %constant.802 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_4"}
  %constant.804 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_5"}
  %constant.806 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_6"}
  %constant.808 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_7"}
  %constant.810 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_8"}
  %constant.812 = s32[3]{0} constant({128, 1, -1}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_9"}
  %constant.814 = s32[] constant(0), metadata={op_type="Slice" op_name="while/Slice"}
  %broadcast.815 = s32[2]{0} broadcast(s32[] %constant.814), dimensions={}, metadata={op_type="Slice" op_name="while/Slice"}
  %constant.816 = s32[2]{0} constant({128, 1}), metadata={op_type="Slice" op_name="while/Slice"}
  %constant.818 = s32[2]{0} constant({128, 1}), metadata={op_type="Slice" op_name="while/Slice"}
  %constant.819 = s32[] constant(0), metadata={op_type="Slice" op_name="while/Slice_1"}
  %broadcast.820 = s32[2]{0} broadcast(s32[] %constant.819), dimensions={}, metadata={op_type="Slice" op_name="while/Slice_1"}
  %constant.821 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="while/Slice_1"}
  %constant.823 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="while/Slice_1"}
  %constant.824 = s32[] constant(0), metadata={op_type="Slice" op_name="while/Slice_2"}
  %broadcast.825 = s32[2]{0} broadcast(s32[] %constant.824), dimensions={}, metadata={op_type="Slice" op_name="while/Slice_2"}
  %constant.826 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="while/Slice_2"}
  %constant.828 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="while/Slice_2"}
  %constant.829 = s32[128,13]{1,0} constant({...}), metadata={op_type="AddV2" op_name="while/add"}
  %constant.834 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %broadcast.835 = s32[3]{0} broadcast(s32[] %constant.834), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %constant.836 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %constant.837 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %broadcast.838 = s32[3]{0} broadcast(s32[] %constant.837), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %constant.841 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %broadcast.842 = s32[3]{0} broadcast(s32[] %constant.841), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %constant.843 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %constant.844 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %broadcast.845 = s32[3]{0} broadcast(s32[] %constant.844), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %constant.848 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %broadcast.849 = s32[3]{0} broadcast(s32[] %constant.848), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %constant.850 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %constant.851 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %broadcast.852 = s32[3]{0} broadcast(s32[] %constant.851), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %constant.855 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %broadcast.856 = s32[3]{0} broadcast(s32[] %constant.855), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %constant.857 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %constant.858 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %broadcast.859 = s32[3]{0} broadcast(s32[] %constant.858), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %constant.862 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %broadcast.863 = s32[3]{0} broadcast(s32[] %constant.862), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %constant.864 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %constant.865 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %broadcast.866 = s32[3]{0} broadcast(s32[] %constant.865), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %constant.869 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %broadcast.870 = s32[3]{0} broadcast(s32[] %constant.869), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %constant.871 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %constant.872 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %broadcast.873 = s32[3]{0} broadcast(s32[] %constant.872), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %constant.876 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %broadcast.877 = s32[3]{0} broadcast(s32[] %constant.876), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %constant.878 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %constant.879 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %broadcast.880 = s32[3]{0} broadcast(s32[] %constant.879), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %constant.883 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %broadcast.884 = s32[3]{0} broadcast(s32[] %constant.883), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %constant.885 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %constant.886 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %broadcast.887 = s32[3]{0} broadcast(s32[] %constant.886), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %constant.890 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %broadcast.891 = s32[3]{0} broadcast(s32[] %constant.890), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %constant.892 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %constant.893 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %broadcast.894 = s32[3]{0} broadcast(s32[] %constant.893), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %constant.897 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %broadcast.898 = s32[3]{0} broadcast(s32[] %constant.897), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %constant.899 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %constant.900 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %broadcast.901 = s32[3]{0} broadcast(s32[] %constant.900), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %constant.904 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %broadcast.905 = s32[3]{0} broadcast(s32[] %constant.904), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %constant.906 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %constant.907 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %broadcast.908 = s32[3]{0} broadcast(s32[] %constant.907), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %constant.911 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %broadcast.912 = s32[3]{0} broadcast(s32[] %constant.911), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %constant.913 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %constant.914 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %broadcast.915 = s32[3]{0} broadcast(s32[] %constant.914), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %constant.918 = s32[] constant(0), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %broadcast.919 = s32[3]{0} broadcast(s32[] %constant.918), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %constant.920 = s32[3]{0} constant({0, 1, 0}), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %constant.921 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %broadcast.922 = s32[3]{0} broadcast(s32[] %constant.921), dimensions={}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %constant.925 = s32[1]{0} constant({1664}), metadata={op_type="Reshape" op_name="while/training/gradients/while/Gather_grad/Reshape_1"}
  %constant.958 = f32[] constant(38000), sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %constant.961 = pred[] constant(true), sharding={maximal device=0}, metadata={op_type="LogicalAnd" op_name="while/LogicalAnd"}
  %constant.964 = f32[] constant(2000), sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %constant.967 = f32[] constant(38000), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_8"}
  %constant.970 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="Minimum" op_name="while/Minimum_2"}
  %constant.973 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %constant.976 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_5"}
  %constant.979 = f32[] constant(2), sharding={maximal device=0}, metadata={op_type="Pow" op_name="while/pow_2"}
  %constant.982 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %constant.985 = f32[] constant(1e-07), sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %constant.988 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Select" op_name="while/Select_1"}
  %constant.992 = f32[] constant(38000), metadata={op_type="Greater" op_name="while/Greater_1"}
  %constant.996 = f32[] constant(2000), metadata={op_type="Less" op_name="while/Less_2"}
  %constant.1001 = f32[] constant(0), metadata={op_type="Equal" op_name="while/Equal_1"}
  %constant.1005 = f32[] constant(2.8), metadata={op_type="Mul" op_name="while/mul_8"}
  %constant.1008 = f32[] constant(2000), metadata={op_type="Sub" op_name="while/sub_4"}
  %constant.1011 = f32[] constant(0.0014), metadata={op_type="Mul" op_name="while/mul_5"}
  %constant.1014 = f32[] constant(2.8), metadata={op_type="Sub" op_name="while/sub_5"}
  %constant.1019 = f32[] constant(38000), metadata={op_type="Sub" op_name="while/sub_6"}
  %constant.1022 = f32[] constant(40000), metadata={op_type="Minimum" op_name="while/Minimum_1"}
  %constant.1025 = f32[] constant(40000), metadata={op_type="Sub" op_name="while/sub_7"}
  %constant.1028 = f32[] constant(40000), metadata={op_type="RealDiv" op_name="while/truediv_3"}
  %constant.1031 = f32[] constant(2), metadata={op_type="Pow" op_name="while/pow_1"}
  %constant.1034 = f32[] constant(2.8), metadata={op_type="Mul" op_name="while/mul_6"}
  %constant.1037 = f32[] constant(1e-07), metadata={op_type="Maximum" op_name="while/Maximum_1"}
  %constant.1043 = f32[] constant(2000), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_4"}
  %constant.1046 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_10"}
  %constant.1108 = s32[] constant(-1), metadata={op_type="ConcatV2" op_name="while/concat"}
  %constant.1110 = s32[3]{0} constant({128, -1, 128}), metadata={op_type="Reshape" op_name="while/Reshape_13"}
  %constant.1112 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %constant.1116 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/Select"}
  %constant.1117 = f32[] constant(0), metadata={op_type="Select" op_name="while/Select"}
  %broadcast.1118 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1117), dimensions={}, metadata={op_type="Select" op_name="while/Select"}
  %constant.1123 = s32[2]{0} constant({128, 729}), metadata={op_type="Reshape" op_name="while/Reshape_14"}
  %constant.1125 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %constant.1177 = f32[] constant(1), metadata={op_type="Mul" op_name="while/binary_crossentropy/weighted_loss/Mul"}
  %constant.1189 = f32[] constant(1), metadata={op_type="Mul" op_name="while/training/gradients/while/training/mul_grad/Mul_1"}
  %constant.1190 = f32[] constant(1), metadata={op_type="Mul" op_name="while/training/gradients/while/training/mul_grad/Mul_1"}
  %after-all.241 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %infeed.242 = ((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}), token[]) infeed(token[] %after-all.241), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %get-tuple-element.243 = (f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) get-tuple-element(((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}), token[]) %infeed.242), index=0, sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %get-tuple-element.245 = f32[128,13]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.243), index=1, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %slice.822 = f32[128,13]{1,0} slice(f32[128,13]{0,1} %get-tuple-element.245), slice={[0:128], [0:13]}, metadata={op_type="Slice" op_name="while/Slice_1"}
  %arg_tuple.205 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.223 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=17
  %dot.1068 = f32[128,512]{1,0} dot(f32[128,13]{1,0} %slice.822, f32[13,512]{1,0:T(8,128)} %get-tuple-element.223), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_0/MatMul"}
  %transpose.1069 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.1068), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_0/MatMul"}
  %get-tuple-element.222 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=16
  %broadcast.1070 = f32[128,512]{1,0} broadcast(f32[512]{0:T(512)} %get-tuple-element.222), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_0/BiasAdd"}
  %add.1071 = f32[128,512]{1,0} add(f32[128,512]{1,0} %transpose.1069, f32[128,512]{1,0} %broadcast.1070), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_0/BiasAdd"}
  %constant.1072 = f32[] constant(0), metadata={op_type="Relu" op_name="while/bottom_mlp_layer_0/Relu"}
  %broadcast.1073 = f32[128,512]{1,0} broadcast(f32[] %constant.1072), dimensions={}, metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  %maximum.1074 = f32[128,512]{1,0} maximum(f32[128,512]{1,0} %add.1071, f32[128,512]{1,0} %broadcast.1073), metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  %get-tuple-element.225 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=19
  %dot.1075 = f32[128,256]{1,0} dot(f32[128,512]{1,0} %maximum.1074, f32[512,256]{1,0:T(8,128)} %get-tuple-element.225), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_1/MatMul"}
  %transpose.1076 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.1075), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_1/MatMul"}
  %get-tuple-element.224 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=18
  %broadcast.1077 = f32[128,256]{1,0} broadcast(f32[256]{0:T(256)} %get-tuple-element.224), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_1/BiasAdd"}
  %add.1078 = f32[128,256]{1,0} add(f32[128,256]{1,0} %transpose.1076, f32[128,256]{1,0} %broadcast.1077), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_1/BiasAdd"}
  %constant.1079 = f32[] constant(0), metadata={op_type="Relu" op_name="while/bottom_mlp_layer_1/Relu"}
  %broadcast.1080 = f32[128,256]{1,0} broadcast(f32[] %constant.1079), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %maximum.1081 = f32[128,256]{1,0} maximum(f32[128,256]{1,0} %add.1078, f32[128,256]{1,0} %broadcast.1080), metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %get-tuple-element.227 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=21
  %dot.1083 = f32[128,128]{1,0} dot(f32[128,256]{1,0} %maximum.1081, f32[256,128]{1,0:T(8,128)} %get-tuple-element.227), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_2/MatMul"}
  %transpose.1084 = f32[128,128]{1,0} transpose(f32[128,128]{1,0} %dot.1083), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_2/MatMul"}
  %get-tuple-element.226 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=20
  %broadcast.1085 = f32[128,128]{1,0} broadcast(f32[128]{0:T(256)} %get-tuple-element.226), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_2/BiasAdd"}
  %add.1086 = f32[128,128]{1,0} add(f32[128,128]{1,0} %transpose.1084, f32[128,128]{1,0} %broadcast.1085), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_2/BiasAdd"}
  %constant.1087 = f32[] constant(0), metadata={op_type="Relu" op_name="while/bottom_mlp_layer_2/Relu"}
  %broadcast.1088 = f32[128,128]{1,0} broadcast(f32[] %constant.1087), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  %maximum.1089 = f32[128,128]{1,0} maximum(f32[128,128]{1,0} %add.1086, f32[128,128]{1,0} %broadcast.1088), metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  %constant.1119 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/Select"}
  %constant.1120 = f32[] constant(0), metadata={op_type="Select" op_name="while/Select"}
  %broadcast.1121 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1120), dimensions={}, metadata={op_type="Select" op_name="while/Select"}
  %after-all.247 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %infeed.248 = ((f32[816,128]{1,0}, f32[952,128]{1,0}), token[]) infeed(token[] %after-all.247), infeed_config="\n(\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\t\010\200\370\304\004\030\001 \001\"\007\010=\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010!\020\300\361\333\007", sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.249 = (f32[816,128]{1,0}, f32[952,128]{1,0}) get-tuple-element(((f32[816,128]{1,0}, f32[952,128]{1,0}), token[]) %infeed.248), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.316 = f32[816,128]{1,0} get-tuple-element((f32[816,128]{1,0}, f32[952,128]{1,0}) %get-tuple-element.249), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.317 = f32[136,768]{1,0} reshape(f32[816,128]{1,0} %get-tuple-element.316), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.320 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.321 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.320), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.322 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.321), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.323 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.322), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %after-all.238 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %infeed.239 = (((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})), token[]) infeed(token[] %after-all.238), infeed_config="\032_\n\007\010\200\010\030\003 \003\020\001\030\200\270\002\"N\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\"\007\010\r\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\0102\020\300\361\333\007", sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %get-tuple-element.240 = ((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})) get-tuple-element((((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})), token[]) %infeed.239), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %get-tuple-element.250 = (u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})) %get-tuple-element.240), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.251 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.252 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.253 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.254 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.251, f32[128]{0} %get-tuple-element.252, u32[128]{0} %get-tuple-element.253), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.255 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.254), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.325 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.255), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.328 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.325), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.344 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.328), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.343 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.345 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.344, u32[128,128]{1,0} %iota.343), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.341 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.346 = f32[128,128]{1,0} broadcast(f32[] %constant.341), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.342 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.347 = f32[128,128]{1,0} broadcast(f32[] %constant.342), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.348 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.345, f32[128,128]{1,0} %broadcast.346, f32[128,128]{1,0} %broadcast.347), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.349 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.348), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.326 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.325), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.333 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.326), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.332 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.334 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.333, u32[128,8]{1,0} %iota.332), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.330 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.335 = f32[128,8]{1,0} broadcast(f32[] %constant.330), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.331 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.336 = f32[128,8]{1,0} broadcast(f32[] %constant.331), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.337 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.334, f32[128,8]{1,0} %broadcast.335, f32[128,8]{1,0} %broadcast.336), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.324 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.322), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.329 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.324), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.338 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.337, f32[8,128]{1,0} %reshape.329), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.327 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.325), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.339 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.327), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.340 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.338, f32[128,128]{1,0} %broadcast.339), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.350 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.349, f32[128,128]{1,0} %multiply.340), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.351 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.350), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.352 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.323, f32[128,128]{1,0} %reshape.351), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.353 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.352), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.354 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.353), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.355 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.354), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.789 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.355), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape"}
  %slice.839 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.789), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %reshape.840 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.839), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice"}
  %get-tuple-element.318 = f32[952,128]{1,0} get-tuple-element((f32[816,128]{1,0}, f32[952,128]{1,0}) %get-tuple-element.249), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.319 = f32[136,896]{1,0} reshape(f32[952,128]{1,0} %get-tuple-element.318), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.356 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.357 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.356), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.358 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.357), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.359 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.358), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.256 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=3, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.257 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=4, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.258 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=5, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.259 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.256, f32[128]{0} %get-tuple-element.257, u32[128]{0} %get-tuple-element.258), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.260 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.259), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.361 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.260), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.364 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.361), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.380 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.364), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.379 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.381 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.380, u32[128,128]{1,0} %iota.379), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.377 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.382 = f32[128,128]{1,0} broadcast(f32[] %constant.377), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.378 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.383 = f32[128,128]{1,0} broadcast(f32[] %constant.378), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.384 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.381, f32[128,128]{1,0} %broadcast.382, f32[128,128]{1,0} %broadcast.383), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.385 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.384), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.362 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.361), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.369 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.362), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.368 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.370 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.369, u32[128,8]{1,0} %iota.368), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.366 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.371 = f32[128,8]{1,0} broadcast(f32[] %constant.366), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.367 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.372 = f32[128,8]{1,0} broadcast(f32[] %constant.367), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.373 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.370, f32[128,8]{1,0} %broadcast.371, f32[128,8]{1,0} %broadcast.372), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.360 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.358), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.365 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.360), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.374 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.373, f32[8,128]{1,0} %reshape.365), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.363 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.361), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.375 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.363), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.376 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.374, f32[128,128]{1,0} %broadcast.375), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.386 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.385, f32[128,128]{1,0} %multiply.376), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.387 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.386), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.388 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.359, f32[128,128]{1,0} %reshape.387), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.389 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.388), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.390 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.389), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.391 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.390), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.791 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.391), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_1"}
  %slice.846 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.791), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %reshape.847 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.846), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_1"}
  %slice.392 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.393 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.392), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.394 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.393), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.395 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.394), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.261 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=6, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.262 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=7, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.263 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=8, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.264 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.261, f32[128]{0} %get-tuple-element.262, u32[128]{0} %get-tuple-element.263), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.265 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.264), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.397 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.265), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.400 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.397), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.416 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.400), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.415 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.417 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.416, u32[128,128]{1,0} %iota.415), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.413 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.418 = f32[128,128]{1,0} broadcast(f32[] %constant.413), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.414 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.419 = f32[128,128]{1,0} broadcast(f32[] %constant.414), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.420 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.417, f32[128,128]{1,0} %broadcast.418, f32[128,128]{1,0} %broadcast.419), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.421 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.420), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.398 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.397), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.405 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.398), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.404 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.406 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.405, u32[128,8]{1,0} %iota.404), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.402 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.407 = f32[128,8]{1,0} broadcast(f32[] %constant.402), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.403 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.408 = f32[128,8]{1,0} broadcast(f32[] %constant.403), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.409 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.406, f32[128,8]{1,0} %broadcast.407, f32[128,8]{1,0} %broadcast.408), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.396 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.394), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.401 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.396), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.410 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.409, f32[8,128]{1,0} %reshape.401), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.399 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.397), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.411 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.399), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.412 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.410, f32[128,128]{1,0} %broadcast.411), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.422 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.421, f32[128,128]{1,0} %multiply.412), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.423 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.422), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.424 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.395, f32[128,128]{1,0} %reshape.423), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.425 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.424), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.426 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.425), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.427 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.426), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.799 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.427), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_2"}
  %slice.874 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.799), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %reshape.875 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.874), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_2"}
  %slice.428 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.429 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.428), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.430 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.429), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.431 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.430), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.266 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=9, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.267 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=10, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.268 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=11, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.269 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.266, f32[128]{0} %get-tuple-element.267, u32[128]{0} %get-tuple-element.268), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.270 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.269), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.433 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.270), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.436 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.433), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.452 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.436), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.451 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.453 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.452, u32[128,128]{1,0} %iota.451), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.449 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.454 = f32[128,128]{1,0} broadcast(f32[] %constant.449), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.450 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.455 = f32[128,128]{1,0} broadcast(f32[] %constant.450), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.456 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.453, f32[128,128]{1,0} %broadcast.454, f32[128,128]{1,0} %broadcast.455), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.457 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.456), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.434 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.433), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.441 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.434), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.440 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.442 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.441, u32[128,8]{1,0} %iota.440), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.438 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.443 = f32[128,8]{1,0} broadcast(f32[] %constant.438), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.439 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.444 = f32[128,8]{1,0} broadcast(f32[] %constant.439), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.445 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.442, f32[128,8]{1,0} %broadcast.443, f32[128,8]{1,0} %broadcast.444), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.432 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.430), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.437 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.432), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.446 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.445, f32[8,128]{1,0} %reshape.437), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.435 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.433), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.447 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.435), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.448 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.446, f32[128,128]{1,0} %broadcast.447), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.458 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.457, f32[128,128]{1,0} %multiply.448), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.459 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.458), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.460 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.431, f32[128,128]{1,0} %reshape.459), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.461 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.460), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.462 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.461), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.463 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.462), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.801 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.463), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_3"}
  %slice.881 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.801), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %reshape.882 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.881), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_3"}
  %slice.464 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.465 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.464), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.466 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.465), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.467 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.466), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.271 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=12, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.272 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=13, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.273 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=14, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.274 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.271, f32[128]{0} %get-tuple-element.272, u32[128]{0} %get-tuple-element.273), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.275 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.274), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.469 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.275), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.472 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.469), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.488 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.472), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.487 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.489 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.488, u32[128,128]{1,0} %iota.487), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.485 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.490 = f32[128,128]{1,0} broadcast(f32[] %constant.485), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.486 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.491 = f32[128,128]{1,0} broadcast(f32[] %constant.486), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.492 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.489, f32[128,128]{1,0} %broadcast.490, f32[128,128]{1,0} %broadcast.491), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.493 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.492), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.470 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.469), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.477 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.470), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.476 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.478 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.477, u32[128,8]{1,0} %iota.476), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.474 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.479 = f32[128,8]{1,0} broadcast(f32[] %constant.474), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.475 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.480 = f32[128,8]{1,0} broadcast(f32[] %constant.475), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.481 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.478, f32[128,8]{1,0} %broadcast.479, f32[128,8]{1,0} %broadcast.480), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.468 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.466), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.473 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.468), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.482 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.481, f32[8,128]{1,0} %reshape.473), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.471 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.469), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.483 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.471), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.484 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.482, f32[128,128]{1,0} %broadcast.483), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.494 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.493, f32[128,128]{1,0} %multiply.484), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.495 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.494), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.496 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.467, f32[128,128]{1,0} %reshape.495), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.497 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.496), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.498 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.497), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.499 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.498), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.803 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.499), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_4"}
  %slice.888 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.803), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %reshape.889 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.888), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_4"}
  %slice.500 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.501 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.500), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.502 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.501), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.503 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.502), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.276 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=15, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.277 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=16, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.278 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=17, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.279 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.276, f32[128]{0} %get-tuple-element.277, u32[128]{0} %get-tuple-element.278), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.280 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.279), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.505 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.280), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.508 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.505), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.524 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.508), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.523 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.525 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.524, u32[128,128]{1,0} %iota.523), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.521 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.526 = f32[128,128]{1,0} broadcast(f32[] %constant.521), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.522 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.527 = f32[128,128]{1,0} broadcast(f32[] %constant.522), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.528 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.525, f32[128,128]{1,0} %broadcast.526, f32[128,128]{1,0} %broadcast.527), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.529 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.528), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.506 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.505), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.513 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.506), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.512 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.514 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.513, u32[128,8]{1,0} %iota.512), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.510 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.515 = f32[128,8]{1,0} broadcast(f32[] %constant.510), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.511 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.516 = f32[128,8]{1,0} broadcast(f32[] %constant.511), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.517 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.514, f32[128,8]{1,0} %broadcast.515, f32[128,8]{1,0} %broadcast.516), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.504 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.502), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.509 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.504), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.518 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.517, f32[8,128]{1,0} %reshape.509), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.507 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.505), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.519 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.507), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.520 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.518, f32[128,128]{1,0} %broadcast.519), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.530 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.529, f32[128,128]{1,0} %multiply.520), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.531 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.530), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.532 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.503, f32[128,128]{1,0} %reshape.531), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.533 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.532), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.534 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.533), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.535 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.534), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.805 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.535), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_5"}
  %slice.895 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.805), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %reshape.896 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.895), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_5"}
  %slice.536 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.537 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.536), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.538 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.537), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.539 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.538), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.281 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=18, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.282 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=19, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.283 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=20, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.284 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.281, f32[128]{0} %get-tuple-element.282, u32[128]{0} %get-tuple-element.283), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.285 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.284), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.541 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.285), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.544 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.541), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.560 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.544), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.559 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.561 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.560, u32[128,128]{1,0} %iota.559), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.557 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.562 = f32[128,128]{1,0} broadcast(f32[] %constant.557), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.558 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.563 = f32[128,128]{1,0} broadcast(f32[] %constant.558), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.564 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.561, f32[128,128]{1,0} %broadcast.562, f32[128,128]{1,0} %broadcast.563), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.565 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.564), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.542 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.541), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.549 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.542), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.548 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.550 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.549, u32[128,8]{1,0} %iota.548), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.546 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.551 = f32[128,8]{1,0} broadcast(f32[] %constant.546), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.547 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.552 = f32[128,8]{1,0} broadcast(f32[] %constant.547), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.553 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.550, f32[128,8]{1,0} %broadcast.551, f32[128,8]{1,0} %broadcast.552), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.540 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.538), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.545 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.540), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.554 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.553, f32[8,128]{1,0} %reshape.545), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.543 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.541), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.555 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.543), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.556 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.554, f32[128,128]{1,0} %broadcast.555), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.566 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.565, f32[128,128]{1,0} %multiply.556), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.567 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.566), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.568 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.539, f32[128,128]{1,0} %reshape.567), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.569 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.568), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.570 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.569), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.571 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.570), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.807 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.571), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_6"}
  %slice.902 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.807), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %reshape.903 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.902), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_6"}
  %slice.572 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.573 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.572), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.574 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.573), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.575 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.574), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.286 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=21, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.287 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=22, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.288 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=23, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.289 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.286, f32[128]{0} %get-tuple-element.287, u32[128]{0} %get-tuple-element.288), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.290 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.289), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.577 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.290), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.580 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.577), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.596 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.580), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.595 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.597 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.596, u32[128,128]{1,0} %iota.595), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.593 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.598 = f32[128,128]{1,0} broadcast(f32[] %constant.593), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.594 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.599 = f32[128,128]{1,0} broadcast(f32[] %constant.594), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.600 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.597, f32[128,128]{1,0} %broadcast.598, f32[128,128]{1,0} %broadcast.599), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.601 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.600), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.578 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.577), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.585 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.578), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.584 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.586 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.585, u32[128,8]{1,0} %iota.584), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.582 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.587 = f32[128,8]{1,0} broadcast(f32[] %constant.582), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.583 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.588 = f32[128,8]{1,0} broadcast(f32[] %constant.583), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.589 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.586, f32[128,8]{1,0} %broadcast.587, f32[128,8]{1,0} %broadcast.588), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.576 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.574), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.581 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.576), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.590 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.589, f32[8,128]{1,0} %reshape.581), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.579 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.577), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.591 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.579), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.592 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.590, f32[128,128]{1,0} %broadcast.591), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.602 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.601, f32[128,128]{1,0} %multiply.592), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.603 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.602), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.604 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.575, f32[128,128]{1,0} %reshape.603), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.605 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.604), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.606 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.605), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.607 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.606), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.809 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.607), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_7"}
  %slice.909 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.809), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %reshape.910 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.909), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_7"}
  %slice.608 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.609 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.608), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.610 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.609), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.611 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.610), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.291 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=24, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.292 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=25, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.293 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=26, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.294 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.291, f32[128]{0} %get-tuple-element.292, u32[128]{0} %get-tuple-element.293), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.295 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.294), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.613 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.295), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.616 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.613), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.632 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.616), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.631 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.633 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.632, u32[128,128]{1,0} %iota.631), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.629 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.634 = f32[128,128]{1,0} broadcast(f32[] %constant.629), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.630 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.635 = f32[128,128]{1,0} broadcast(f32[] %constant.630), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.636 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.633, f32[128,128]{1,0} %broadcast.634, f32[128,128]{1,0} %broadcast.635), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.637 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.636), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.614 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.613), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.621 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.614), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.620 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.622 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.621, u32[128,8]{1,0} %iota.620), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.618 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.623 = f32[128,8]{1,0} broadcast(f32[] %constant.618), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.619 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.624 = f32[128,8]{1,0} broadcast(f32[] %constant.619), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.625 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.622, f32[128,8]{1,0} %broadcast.623, f32[128,8]{1,0} %broadcast.624), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.612 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.610), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.617 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.612), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.626 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.625, f32[8,128]{1,0} %reshape.617), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.615 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.613), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.627 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.615), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.628 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.626, f32[128,128]{1,0} %broadcast.627), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.638 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.637, f32[128,128]{1,0} %multiply.628), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.639 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.638), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.640 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.611, f32[128,128]{1,0} %reshape.639), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.641 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.640), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.642 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.641), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.643 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.642), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.811 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.643), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_8"}
  %slice.916 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.811), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %reshape.917 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.916), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_8"}
  %slice.644 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.645 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.644), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.646 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.645), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.647 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.646), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.296 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=27, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.297 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=28, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.298 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=29, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.299 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.296, f32[128]{0} %get-tuple-element.297, u32[128]{0} %get-tuple-element.298), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.300 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.299), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.649 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.300), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.652 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.649), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.668 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.652), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.667 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.669 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.668, u32[128,128]{1,0} %iota.667), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.665 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.670 = f32[128,128]{1,0} broadcast(f32[] %constant.665), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.666 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.671 = f32[128,128]{1,0} broadcast(f32[] %constant.666), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.672 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.669, f32[128,128]{1,0} %broadcast.670, f32[128,128]{1,0} %broadcast.671), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.673 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.672), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.650 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.649), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.657 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.650), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.656 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.658 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.657, u32[128,8]{1,0} %iota.656), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.654 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.659 = f32[128,8]{1,0} broadcast(f32[] %constant.654), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.655 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.660 = f32[128,8]{1,0} broadcast(f32[] %constant.655), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.661 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.658, f32[128,8]{1,0} %broadcast.659, f32[128,8]{1,0} %broadcast.660), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.648 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.646), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.653 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.648), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.662 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.661, f32[8,128]{1,0} %reshape.653), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.651 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.649), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.663 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.651), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.664 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.662, f32[128,128]{1,0} %broadcast.663), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.674 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.673, f32[128,128]{1,0} %multiply.664), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.675 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.674), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.676 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.647, f32[128,128]{1,0} %reshape.675), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.677 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.676), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.678 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.677), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.679 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.678), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.813 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.679), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_9"}
  %slice.923 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.813), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %reshape.924 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.923), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_9"}
  %slice.680 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.317), slice={[0:136], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.681 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.680), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.682 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.681), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.683 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.682), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.301 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=30, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.302 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=31, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.303 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=32, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.304 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.301, f32[128]{0} %get-tuple-element.302, u32[128]{0} %get-tuple-element.303), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.305 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.304), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.685 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.305), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.688 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.685), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.704 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.688), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.703 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.705 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.704, u32[128,128]{1,0} %iota.703), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.701 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.706 = f32[128,128]{1,0} broadcast(f32[] %constant.701), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.702 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.707 = f32[128,128]{1,0} broadcast(f32[] %constant.702), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.708 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.705, f32[128,128]{1,0} %broadcast.706, f32[128,128]{1,0} %broadcast.707), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.709 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.708), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.686 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.685), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.693 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.686), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.692 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.694 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.693, u32[128,8]{1,0} %iota.692), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.690 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.695 = f32[128,8]{1,0} broadcast(f32[] %constant.690), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.691 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.696 = f32[128,8]{1,0} broadcast(f32[] %constant.691), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.697 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.694, f32[128,8]{1,0} %broadcast.695, f32[128,8]{1,0} %broadcast.696), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.684 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.682), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.689 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.684), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.698 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.697, f32[8,128]{1,0} %reshape.689), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.687 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.685), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.699 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.687), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.700 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.698, f32[128,128]{1,0} %broadcast.699), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.710 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.709, f32[128,128]{1,0} %multiply.700), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.711 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.710), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.712 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.683, f32[128,128]{1,0} %reshape.711), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.713 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.712), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.714 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.713), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.715 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.714), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.793 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.715), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_10"}
  %slice.853 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.793), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %reshape.854 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.853), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_10"}
  %slice.716 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.717 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.716), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.718 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.717), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.719 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.718), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.306 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=33, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.307 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=34, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.308 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=35, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.309 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.306, f32[128]{0} %get-tuple-element.307, u32[128]{0} %get-tuple-element.308), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.310 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.309), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.721 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.310), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.724 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.721), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.740 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.724), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.739 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.741 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.740, u32[128,128]{1,0} %iota.739), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.737 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.742 = f32[128,128]{1,0} broadcast(f32[] %constant.737), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.738 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.743 = f32[128,128]{1,0} broadcast(f32[] %constant.738), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.744 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.741, f32[128,128]{1,0} %broadcast.742, f32[128,128]{1,0} %broadcast.743), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.745 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.744), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.722 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.721), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.729 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.722), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.728 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.730 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.729, u32[128,8]{1,0} %iota.728), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.726 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.731 = f32[128,8]{1,0} broadcast(f32[] %constant.726), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.727 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.732 = f32[128,8]{1,0} broadcast(f32[] %constant.727), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.733 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.730, f32[128,8]{1,0} %broadcast.731, f32[128,8]{1,0} %broadcast.732), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.720 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.718), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.725 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.720), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.734 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.733, f32[8,128]{1,0} %reshape.725), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.723 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.721), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.735 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.723), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.736 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.734, f32[128,128]{1,0} %broadcast.735), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.746 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.745, f32[128,128]{1,0} %multiply.736), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.747 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.746), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.748 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.719, f32[128,128]{1,0} %reshape.747), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.749 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.748), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.750 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.749), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.751 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.750), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.795 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.751), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_11"}
  %slice.860 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.795), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %reshape.861 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.860), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_11"}
  %slice.752 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.319), slice={[0:136], [768:896]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.753 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.752), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.754 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.753), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.755 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.754), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.311 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=36, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.312 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=37, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.313 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.250), index=38, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.314 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.311, f32[128]{0} %get-tuple-element.312, u32[128]{0} %get-tuple-element.313), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %tuple.315 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.314), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.757 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.315), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.760 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.757), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.776 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.760), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.775 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.777 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.776, u32[128,128]{1,0} %iota.775), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.773 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.778 = f32[128,128]{1,0} broadcast(f32[] %constant.773), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.774 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.779 = f32[128,128]{1,0} broadcast(f32[] %constant.774), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.780 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.777, f32[128,128]{1,0} %broadcast.778, f32[128,128]{1,0} %broadcast.779), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %transpose.781 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.780), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.758 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.757), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.765 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.758), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.764 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.766 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.765, u32[128,8]{1,0} %iota.764), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.762 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.767 = f32[128,8]{1,0} broadcast(f32[] %constant.762), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.763 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.768 = f32[128,8]{1,0} broadcast(f32[] %constant.763), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %select.769 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.766, f32[128,8]{1,0} %broadcast.767, f32[128,8]{1,0} %broadcast.768), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.756 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.754), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.761 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.756), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.770 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.769, f32[8,128]{1,0} %reshape.761), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.759 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.757), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.771 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.759), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %multiply.772 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.770, f32[128,128]{1,0} %broadcast.771), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %dot.782 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.781, f32[128,128]{1,0} %multiply.772), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.783 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.782), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.784 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.755, f32[128,128]{1,0} %reshape.783), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %concatenate.785 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.784), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.786 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.785), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %slice.787 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.786), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.797 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.787), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_12"}
  %slice.867 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.797), slice={[0:128], [0:1], [0:128]}, sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %reshape.868 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.867), sharding={maximal device=0}, metadata={op_type="StridedSlice" op_name="while/strided_slice_12"}
  %concatenate.1109 = f32[128,1792]{1,0} concatenate(f32[128,128]{1,0} %maximum.1089, f32[128,128]{1,0} %reshape.840, f32[128,128]{1,0} %reshape.847, f32[128,128]{1,0} %reshape.875, f32[128,128]{1,0} %reshape.882, /*index=5*/f32[128,128]{1,0} %reshape.889, f32[128,128]{1,0} %reshape.896, f32[128,128]{1,0} %reshape.903, f32[128,128]{1,0} %reshape.910, f32[128,128]{1,0} %reshape.917, /*index=10*/f32[128,128]{1,0} %reshape.924, f32[128,128]{1,0} %reshape.854, f32[128,128]{1,0} %reshape.861, f32[128,128]{1,0} %reshape.868), dimensions={1}, metadata={op_type="ConcatV2" op_name="while/concat"}
  %reshape.1111 = f32[128,14,128]{2,1,0} reshape(f32[128,1792]{1,0} %concatenate.1109), metadata={op_type="Reshape" op_name="while/Reshape_13"}
  %get-tuple-element.208 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=2
  %constant.830 = s32[128,13]{1,0} constant({...}), metadata={op_type="AddV2" op_name="while/add"}
  %get-tuple-element.246 = s32[128,13]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.243), index=2, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %slice.827 = s32[128,13]{1,0} slice(s32[128,13]{0,1} %get-tuple-element.246), slice={[0:128], [0:13]}, metadata={op_type="Slice" op_name="while/Slice_2"}
  %add.831 = s32[128,13]{1,0} add(s32[128,13]{1,0} %constant.830, s32[128,13]{1,0} %slice.827), metadata={op_type="AddV2" op_name="while/add"}
  %gather.1082 = f32[128,13,128]{2,1,0} gather(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.208, s32[128,13]{1,0} %add.831), offset_dims={2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=2, slice_sizes={1,128}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %concatenate.1113 = f32[128,27,128]{2,1,0} concatenate(f32[128,14,128]{2,1,0} %reshape.1111, f32[128,13,128]{2,1,0} %gather.1082), dimensions={1}, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %dot.1114 = f32[128,27,27]{2,1,0} dot(f32[128,27,128]{2,1,0} %concatenate.1113, f32[128,27,128]{2,1,0} %concatenate.1113), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={2}, metadata={op_type="BatchMatMulV2" op_name="while/MatMul"}
  %transpose.1115 = f32[128,27,27]{2,1,0} transpose(f32[128,27,27]{2,1,0} %dot.1114), dimensions={0,1,2}, metadata={op_type="BatchMatMulV2" op_name="while/MatMul"}
  %select.1122 = f32[128,27,27]{2,1,0} select(pred[128,27,27]{2,1,0} %constant.1119, f32[128,27,27]{2,1,0} %broadcast.1121, f32[128,27,27]{2,1,0} %transpose.1115), metadata={op_name="while/Select"}
  %reshape.1124 = f32[128,729]{1,0} reshape(f32[128,27,27]{2,1,0} %select.1122), metadata={op_type="Reshape" op_name="while/Reshape_14"}
  %concatenate.1126 = f32[128,857]{1,0} concatenate(f32[128,128]{1,0} %maximum.1089, f32[128,729]{1,0} %reshape.1124), dimensions={1}, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %get-tuple-element.229 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=23
  %dot.1127 = f32[128,1024]{1,0} dot(f32[128,857]{1,0} %concatenate.1126, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.229), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_0/MatMul"}
  %transpose.1128 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.1127), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_0/MatMul"}
  %get-tuple-element.228 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=22
  %broadcast.1129 = f32[128,1024]{1,0} broadcast(f32[1024]{0:T(1024)} %get-tuple-element.228), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_0/BiasAdd"}
  %add.1130 = f32[128,1024]{1,0} add(f32[128,1024]{1,0} %transpose.1128, f32[128,1024]{1,0} %broadcast.1129), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_0/BiasAdd"}
  %constant.1131 = f32[] constant(0), metadata={op_type="Relu" op_name="while/top_mlp_layer_0/Relu"}
  %broadcast.1132 = f32[128,1024]{1,0} broadcast(f32[] %constant.1131), dimensions={}, metadata={op_name="while/top_mlp_layer_0/Relu"}
  %maximum.1133 = f32[128,1024]{1,0} maximum(f32[128,1024]{1,0} %add.1130, f32[128,1024]{1,0} %broadcast.1132), metadata={op_name="while/top_mlp_layer_0/Relu"}
  %get-tuple-element.231 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=25
  %dot.1134 = f32[128,1024]{1,0} dot(f32[128,1024]{1,0} %maximum.1133, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.231), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_1/MatMul"}
  %transpose.1135 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.1134), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_1/MatMul"}
  %get-tuple-element.230 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=24
  %broadcast.1136 = f32[128,1024]{1,0} broadcast(f32[1024]{0:T(1024)} %get-tuple-element.230), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_1/BiasAdd"}
  %add.1137 = f32[128,1024]{1,0} add(f32[128,1024]{1,0} %transpose.1135, f32[128,1024]{1,0} %broadcast.1136), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_1/BiasAdd"}
  %constant.1138 = f32[] constant(0), metadata={op_type="Relu" op_name="while/top_mlp_layer_1/Relu"}
  %broadcast.1139 = f32[128,1024]{1,0} broadcast(f32[] %constant.1138), dimensions={}, metadata={op_name="while/top_mlp_layer_1/Relu"}
  %maximum.1140 = f32[128,1024]{1,0} maximum(f32[128,1024]{1,0} %add.1137, f32[128,1024]{1,0} %broadcast.1139), metadata={op_name="while/top_mlp_layer_1/Relu"}
  %get-tuple-element.233 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=27
  %dot.1141 = f32[128,512]{1,0} dot(f32[128,1024]{1,0} %maximum.1140, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.233), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_2/MatMul"}
  %transpose.1142 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.1141), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_2/MatMul"}
  %get-tuple-element.232 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=26
  %broadcast.1143 = f32[128,512]{1,0} broadcast(f32[512]{0:T(512)} %get-tuple-element.232), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_2/BiasAdd"}
  %add.1144 = f32[128,512]{1,0} add(f32[128,512]{1,0} %transpose.1142, f32[128,512]{1,0} %broadcast.1143), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_2/BiasAdd"}
  %constant.1145 = f32[] constant(0), metadata={op_type="Relu" op_name="while/top_mlp_layer_2/Relu"}
  %broadcast.1146 = f32[128,512]{1,0} broadcast(f32[] %constant.1145), dimensions={}, metadata={op_name="while/top_mlp_layer_2/Relu"}
  %maximum.1147 = f32[128,512]{1,0} maximum(f32[128,512]{1,0} %add.1144, f32[128,512]{1,0} %broadcast.1146), metadata={op_name="while/top_mlp_layer_2/Relu"}
  %get-tuple-element.235 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=29
  %dot.1148 = f32[128,256]{1,0} dot(f32[128,512]{1,0} %maximum.1147, f32[512,256]{1,0:T(8,128)} %get-tuple-element.235), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_3/MatMul"}
  %transpose.1149 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.1148), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_3/MatMul"}
  %get-tuple-element.234 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=28
  %broadcast.1150 = f32[128,256]{1,0} broadcast(f32[256]{0:T(256)} %get-tuple-element.234), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %add.1151 = f32[128,256]{1,0} add(f32[128,256]{1,0} %transpose.1149, f32[128,256]{1,0} %broadcast.1150), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %constant.1152 = f32[] constant(0), metadata={op_type="Relu" op_name="while/top_mlp_layer_3/Relu"}
  %broadcast.1153 = f32[128,256]{1,0} broadcast(f32[] %constant.1152), dimensions={}, metadata={op_name="while/top_mlp_layer_3/Relu"}
  %maximum.1154 = f32[128,256]{1,0} maximum(f32[128,256]{1,0} %add.1151, f32[128,256]{1,0} %broadcast.1153), metadata={op_name="while/top_mlp_layer_3/Relu"}
  %get-tuple-element.237 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=31
  %dot.1155 = f32[128,1]{1,0} dot(f32[128,256]{1,0} %maximum.1154, f32[256,1]{0,1:T(2,128)} %get-tuple-element.237), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_4/MatMul"}
  %transpose.1156 = f32[128,1]{1,0} transpose(f32[128,1]{1,0} %dot.1155), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/top_mlp_layer_4/MatMul"}
  %get-tuple-element.236 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=30
  %broadcast.1157 = f32[128,1]{1,0} broadcast(f32[1]{0:T(256)} %get-tuple-element.236), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_4/BiasAdd"}
  %add.1158 = f32[128,1]{1,0} add(f32[128,1]{1,0} %transpose.1156, f32[128,1]{1,0} %broadcast.1157), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_4/BiasAdd"}
  %constant.832 = f32[] constant(0), metadata={op_type="Const" op_name="while/binary_crossentropy/logistic_loss/zeros_like"}
  %broadcast.833 = f32[128,1]{1,0} broadcast(f32[] %constant.832), dimensions={}, metadata={op_type="Const" op_name="while/binary_crossentropy/logistic_loss/zeros_like"}
  %compare.1159 = pred[128,1]{1,0} compare(f32[128,1]{1,0} %add.1158, f32[128,1]{1,0} %broadcast.833), direction=GE, metadata={op_type="GreaterEqual" op_name="while/binary_crossentropy/logistic_loss/GreaterEqual"}
  %select.1161 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %add.1158, f32[128,1]{1,0} %broadcast.833), metadata={op_name="while/binary_crossentropy/logistic_loss/Select"}
  %get-tuple-element.244 = f32[128,1]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.243), index=0, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %slice.817 = f32[128,1]{1,0} slice(f32[128,1]{0,1} %get-tuple-element.244), slice={[0:128], [0:1]}, metadata={op_type="Slice" op_name="while/Slice"}
  %multiply.1165 = f32[128,1]{1,0} multiply(f32[128,1]{1,0} %add.1158, f32[128,1]{1,0} %slice.817), metadata={op_type="Mul" op_name="while/binary_crossentropy/logistic_loss/mul"}
  %subtract.1166 = f32[128,1]{1,0} subtract(f32[128,1]{1,0} %select.1161, f32[128,1]{1,0} %multiply.1165), metadata={op_type="Sub" op_name="while/binary_crossentropy/logistic_loss/sub"}
  %negate.1160 = f32[128,1]{1,0} negate(f32[128,1]{1,0} %add.1158), metadata={op_type="Neg" op_name="while/binary_crossentropy/logistic_loss/Neg"}
  %select.1162 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %negate.1160, f32[128,1]{1,0} %add.1158), metadata={op_name="while/binary_crossentropy/logistic_loss/Select_1"}
  %exponential.1163 = f32[128,1]{1,0} exponential(f32[128,1]{1,0} %select.1162), metadata={op_name="while/binary_crossentropy/logistic_loss/Exp"}
  %log-plus-one.1164 = f32[128,1]{1,0} log-plus-one(f32[128,1]{1,0} %exponential.1163), metadata={op_name="while/binary_crossentropy/logistic_loss/Log1p"}
  %add.1167 = f32[128,1]{1,0} add(f32[128,1]{1,0} %subtract.1166, f32[128,1]{1,0} %log-plus-one.1164), metadata={op_type="AddV2" op_name="while/binary_crossentropy/logistic_loss"}
  %convert.1168 = f32[128,1]{1,0} convert(f32[128,1]{1,0} %add.1167), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %constant.1169 = f32[] constant(0), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %convert.1170 = f32[] convert(f32[] %constant.1169), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %reduce.1171 = f32[128]{0} reduce(f32[128,1]{1,0} %convert.1168, f32[] %convert.1170), dimensions={1}, to_apply=%while_binary_crossentropy_Mean-reduction.88, metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %constant.1172 = s32[] constant(1), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %convert.1173 = f32[] convert(s32[] %constant.1172), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %broadcast.1174 = f32[128]{0} broadcast(f32[] %convert.1173), dimensions={}, metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %divide.1175 = f32[128]{0} divide(f32[128]{0} %reduce.1171, f32[128]{0} %broadcast.1174), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %convert.1176 = f32[128]{0} convert(f32[128]{0} %divide.1175), metadata={op_type="Mean" op_name="while/binary_crossentropy/Mean"}
  %constant.1178 = f32[] constant(1), metadata={op_type="Mul" op_name="while/binary_crossentropy/weighted_loss/Mul"}
  %broadcast.1179 = f32[128]{0} broadcast(f32[] %constant.1178), dimensions={}, metadata={op_type="Mul" op_name="while/binary_crossentropy/weighted_loss/Mul"}
  %multiply.1180 = f32[128]{0} multiply(f32[128]{0} %convert.1176, f32[128]{0} %broadcast.1179), metadata={op_type="Mul" op_name="while/binary_crossentropy/weighted_loss/Mul"}
  %convert.1181 = f32[128]{0} convert(f32[128]{0} %multiply.1180), metadata={op_type="Mean" op_name="while/Mean"}
  %constant.1182 = f32[] constant(0), metadata={op_type="Mean" op_name="while/Mean"}
  %convert.1183 = f32[] convert(f32[] %constant.1182), metadata={op_type="Mean" op_name="while/Mean"}
  %reduce.1184 = f32[] reduce(f32[128]{0} %convert.1181, f32[] %convert.1183), dimensions={0}, to_apply=%while_Mean-reduction.92, metadata={op_type="Mean" op_name="while/Mean"}
  %constant.1185 = s32[] constant(128), metadata={op_type="Mean" op_name="while/Mean"}
  %convert.1186 = f32[] convert(s32[] %constant.1185), metadata={op_type="Mean" op_name="while/Mean"}
  %divide.1187 = f32[] divide(f32[] %reduce.1184, f32[] %convert.1186), metadata={op_type="Mean" op_name="while/Mean"}
  %convert.1188 = f32[] convert(f32[] %divide.1187), metadata={op_type="Mean" op_name="while/Mean"}
  %multiply.1191 = f32[] multiply(f32[] %constant.1190, f32[] %convert.1188), metadata={op_type="Mul" op_name="while/training/gradients/while/training/mul_grad/Mul_1"}
  %constant.1192 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %broadcast.1193 = f32[128]{0} broadcast(f32[] %constant.1192), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %constant.1194 = f32[] constant(1), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %constant.1200 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul_1"}
  %broadcast.1201 = f32[128]{0} broadcast(f32[] %constant.1200), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul_1"}
  %constant.1210 = s32[0]{0} constant({}), metadata={op_type="Reshape" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Reshape"}
  %constant.1202 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul_1"}
  %broadcast.1203 = f32[128]{0} broadcast(f32[] %constant.1202), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul_1"}
  %multiply.1204 = f32[128]{0} multiply(f32[128]{0} %convert.1176, f32[128]{0} %broadcast.1203), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul_1"}
  %convert.1205 = f32[128]{0} convert(f32[128]{0} %multiply.1204), metadata={op_type="Sum" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Sum"}
  %constant.1206 = f32[] constant(0), metadata={op_type="Sum" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Sum"}
  %convert.1207 = f32[] convert(f32[] %constant.1206), metadata={op_type="Sum" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Sum"}
  %reduce.1208 = f32[] reduce(f32[128]{0} %convert.1205, f32[] %convert.1207), dimensions={0}, to_apply=%while_training_gradients_while_binary_crossentropy_weighted_loss_Mul_grad_Sum-reduction.96, metadata={op_type="Sum" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Sum"}
  %convert.1209 = f32[] convert(f32[] %reduce.1208), metadata={op_type="Sum" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Sum"}
  %reshape.1211 = f32[] reshape(f32[] %convert.1209), metadata={op_type="Reshape" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Reshape"}
  %constant.1212 = f32[] constant(0.000122070312), metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %broadcast.1213 = f32[128,1]{1,0} broadcast(f32[] %constant.1212), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %constant.1217 = f32[] constant(0.000122070312), metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select_1"}
  %broadcast.1218 = f32[128,1]{1,0} broadcast(f32[] %constant.1217), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select_1"}
  %constant.955 = f32[] constant(0), metadata={op_type="Const" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/zeros_like"}
  %broadcast.956 = f32[128,1]{1,0} broadcast(f32[] %constant.955), dimensions={}, metadata={op_type="Const" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/zeros_like"}
  %constant.1219 = f32[] constant(0.000122070312), metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select_1"}
  %broadcast.1220 = f32[128,1]{1,0} broadcast(f32[] %constant.1219), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select_1"}
  %select.1221 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %broadcast.956, f32[128,1]{1,0} %broadcast.1220), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select_1"}
  %constant.1222 = f32[] constant(-0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %broadcast.1223 = f32[128,1]{1,0} broadcast(f32[] %constant.1222), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %constant.1227 = s32[2]{0} constant({128, 1}), metadata={op_type="Reshape" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/Reshape"}
  %constant.1229 = s32[] constant(1), metadata={op_type="Tile" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/Tile"}
  %broadcast.1230 = s32[2]{0} broadcast(s32[] %constant.1229), dimensions={}, metadata={op_type="Tile" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/Tile"}
  %constant.1231 = f32[] constant(1), metadata={op_type="RealDiv" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/truediv"}
  %constant.1195 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %broadcast.1196 = f32[128]{0} broadcast(f32[] %constant.1195), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %constant.1197 = f32[] constant(1), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %broadcast.1198 = f32[128]{0} broadcast(f32[] %constant.1197), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %multiply.1199 = f32[128]{0} multiply(f32[128]{0} %broadcast.1196, f32[128]{0} %broadcast.1198), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/weighted_loss/Mul_grad/Mul"}
  %reshape.1228 = f32[128,1]{1,0} reshape(f32[128]{0} %multiply.1199), metadata={op_type="Reshape" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/Reshape"}
  %constant.1232 = f32[] constant(1), metadata={op_type="RealDiv" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/truediv"}
  %broadcast.1233 = f32[128,1]{1,0} broadcast(f32[] %constant.1232), dimensions={}, metadata={op_type="RealDiv" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/truediv"}
  %divide.1234 = f32[128,1]{1,0} divide(f32[128,1]{1,0} %reshape.1228, f32[128,1]{1,0} %broadcast.1233), metadata={op_type="RealDiv" op_name="while/training/gradients/while/binary_crossentropy/Mean_grad/truediv"}
  %constant.1235 = f32[] constant(1), metadata={op_type="AddV2" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/add"}
  %constant.1242 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %broadcast.1243 = f32[128,1]{1,0} broadcast(f32[] %constant.1242), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %constant.1251 = f32[] constant(-0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul_1"}
  %broadcast.1252 = f32[128,1]{1,0} broadcast(f32[] %constant.1251), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul_1"}
  %constant.1253 = f32[] constant(-0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul_1"}
  %broadcast.1254 = f32[128,1]{1,0} broadcast(f32[] %constant.1253), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul_1"}
  %multiply.1255 = f32[128,1]{1,0} multiply(f32[128,1]{1,0} %broadcast.1254, f32[128,1]{1,0} %add.1158), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul_1"}
  %constant.1341 = s32[] constant(0), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %broadcast.1342 = s32[2]{0} broadcast(s32[] %constant.1341), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %constant.1343 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %broadcast.1344 = s32[2]{0} broadcast(s32[] %constant.1343), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %constant.1346 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %broadcast.1347 = s32[2]{0} broadcast(s32[] %constant.1346), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %constant.1348 = s32[2]{0} constant({0, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice_1"}
  %constant.1349 = s32[2]{0} constant({128, 729}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice_1"}
  %constant.1351 = s32[2]{0} constant({128, 729}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice_1"}
  %constant.1352 = s32[3]{0} constant({128, 27, 27}), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_14_grad/Reshape"}
  %constant.1354 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %constant.1355 = f32[] constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %broadcast.1356 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1355), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %constant.1357 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %constant.1323 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %broadcast.1324 = f32[128,1024]{1,0} broadcast(f32[] %constant.1323), dimensions={}, metadata={op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %compare.1325 = pred[128,1024]{1,0} compare(f32[128,1024]{1,0} %maximum.1133, f32[128,1024]{1,0} %broadcast.1324), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %constant.1305 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %broadcast.1306 = f32[128,1024]{1,0} broadcast(f32[] %constant.1305), dimensions={}, metadata={op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %compare.1307 = pred[128,1024]{1,0} compare(f32[128,1024]{1,0} %maximum.1140, f32[128,1024]{1,0} %broadcast.1306), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %constant.1287 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %broadcast.1288 = f32[128,512]{1,0} broadcast(f32[] %constant.1287), dimensions={}, metadata={op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %compare.1289 = pred[128,512]{1,0} compare(f32[128,512]{1,0} %maximum.1147, f32[128,512]{1,0} %broadcast.1288), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %constant.1269 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %broadcast.1270 = f32[128,256]{1,0} broadcast(f32[] %constant.1269), dimensions={}, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %compare.1271 = pred[128,256]{1,0} compare(f32[128,256]{1,0} %maximum.1154, f32[128,256]{1,0} %broadcast.1270), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %constant.1214 = f32[] constant(0.000122070312), metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %broadcast.1215 = f32[128,1]{1,0} broadcast(f32[] %constant.1214), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %select.1216 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %broadcast.1215, f32[128,1]{1,0} %broadcast.956), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %constant.1224 = f32[] constant(-0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %broadcast.1225 = f32[128,1]{1,0} broadcast(f32[] %constant.1224), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %multiply.1226 = f32[128,1]{1,0} multiply(f32[128,1]{1,0} %broadcast.1225, f32[128,1]{1,0} %slice.817), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %add.1256 = f32[128,1]{1,0} add(f32[128,1]{1,0} %select.1216, f32[128,1]{1,0} %multiply.1226), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %constant.953 = f32[] constant(0), metadata={op_type="Const" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/zeros_like"}
  %broadcast.954 = f32[128,1]{1,0} broadcast(f32[] %constant.953), dimensions={}, metadata={op_type="Const" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/zeros_like"}
  %constant.1244 = f32[] constant(0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %broadcast.1245 = f32[128,1]{1,0} broadcast(f32[] %constant.1244), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %constant.1239 = f32[] constant(1), metadata={op_type="Reciprocal" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/Reciprocal"}
  %broadcast.1240 = f32[128,1]{1,0} broadcast(f32[] %constant.1239), dimensions={}, metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/Reciprocal"}
  %constant.1236 = f32[] constant(1), metadata={op_type="AddV2" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/add"}
  %broadcast.1237 = f32[128,1]{1,0} broadcast(f32[] %constant.1236), dimensions={}, metadata={op_type="AddV2" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/add"}
  %add.1238 = f32[128,1]{1,0} add(f32[128,1]{1,0} %broadcast.1237, f32[128,1]{1,0} %exponential.1163), metadata={op_type="AddV2" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/add"}
  %divide.1241 = f32[128,1]{1,0} divide(f32[128,1]{1,0} %broadcast.1240, f32[128,1]{1,0} %add.1238), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/Reciprocal"}
  %multiply.1246 = f32[128,1]{1,0} multiply(f32[128,1]{1,0} %broadcast.1245, f32[128,1]{1,0} %divide.1241), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %multiply.1247 = f32[128,1]{1,0} multiply(f32[128,1]{1,0} %multiply.1246, f32[128,1]{1,0} %exponential.1163), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Exp_grad/mul"}
  %select.1249 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %broadcast.954, f32[128,1]{1,0} %multiply.1247), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/Select_1"}
  %add.1257 = f32[128,1]{1,0} add(f32[128,1]{1,0} %add.1256, f32[128,1]{1,0} %select.1249), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %select.1248 = f32[128,1]{1,0} select(pred[128,1]{1,0} %compare.1159, f32[128,1]{1,0} %multiply.1247, f32[128,1]{1,0} %broadcast.954), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/Select"}
  %negate.1250 = f32[128,1]{1,0} negate(f32[128,1]{1,0} %select.1248), metadata={op_type="Neg" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Neg_grad/Neg"}
  %add.1258 = f32[128,1]{1,0} add(f32[128,1]{1,0} %add.1257, f32[128,1]{1,0} %negate.1250), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %dot.1261 = f32[128,256]{1,0} dot(f32[128,1]{1,0} %add.1258, f32[256,1]{0,1:T(2,128)} %get-tuple-element.237), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul"}
  %transpose.1262 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.1261), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul"}
  %select.1272 = f32[128,256]{1,0} select(pred[128,256]{1,0} %compare.1271, f32[128,256]{1,0} %transpose.1262, f32[128,256]{1,0} %broadcast.1270), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %dot.1275 = f32[128,512]{1,0} dot(f32[128,256]{1,0} %select.1272, f32[512,256]{1,0:T(8,128)} %get-tuple-element.235), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul"}
  %transpose.1276 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.1275), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul"}
  %select.1290 = f32[128,512]{1,0} select(pred[128,512]{1,0} %compare.1289, f32[128,512]{1,0} %transpose.1276, f32[128,512]{1,0} %broadcast.1288), metadata={op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %dot.1293 = f32[128,1024]{1,0} dot(f32[128,512]{1,0} %select.1290, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.233), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul"}
  %transpose.1294 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.1293), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul"}
  %select.1308 = f32[128,1024]{1,0} select(pred[128,1024]{1,0} %compare.1307, f32[128,1024]{1,0} %transpose.1294, f32[128,1024]{1,0} %broadcast.1306), metadata={op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %dot.1311 = f32[128,1024]{1,0} dot(f32[128,1024]{1,0} %select.1308, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.231), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul"}
  %transpose.1312 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.1311), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul"}
  %select.1326 = f32[128,1024]{1,0} select(pred[128,1024]{1,0} %compare.1325, f32[128,1024]{1,0} %transpose.1312, f32[128,1024]{1,0} %broadcast.1324), metadata={op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %dot.1329 = f32[128,857]{1,0} dot(f32[128,1024]{1,0} %select.1326, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.229), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul"}
  %transpose.1330 = f32[128,857]{1,0} transpose(f32[128,857]{1,0} %dot.1329), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul"}
  %slice.1350 = f32[128,729]{1,0} slice(f32[128,857]{1,0} %transpose.1330), slice={[0:128], [128:857]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice_1"}
  %reshape.1353 = f32[128,27,27]{2,1,0} reshape(f32[128,729]{1,0} %slice.1350), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_14_grad/Reshape"}
  %constant.1358 = f32[] constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %broadcast.1359 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1358), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select"}
  %select.1360 = f32[128,27,27]{2,1,0} select(pred[128,27,27]{2,1,0} %constant.1357, f32[128,27,27]{2,1,0} %reshape.1353, f32[128,27,27]{2,1,0} %broadcast.1359), metadata={op_name="while/training/gradients/while/Select_grad/Select"}
  %constant.1361 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %constant.1362 = f32[] constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.1363 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1362), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %constant.1377 = s32[] constant(0), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %broadcast.1378 = s32[3]{0} broadcast(s32[] %constant.1377), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %constant.1379 = s32[3]{0} constant({128, 14, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %constant.1381 = s32[3]{0} constant({128, 14, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %constant.1382 = s32[3]{0} constant({0, 14, 0}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice_1"}
  %constant.1383 = s32[3]{0} constant({128, 13, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice_1"}
  %constant.1385 = s32[3]{0} constant({128, 13, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice_1"}
  %constant.1386 = s32[2]{0} constant({128, 1792}), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_13_grad/Reshape"}
  %constant.1388 = s32[] constant(0), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %broadcast.1389 = s32[2]{0} broadcast(s32[] %constant.1388), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %constant.1390 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %broadcast.1391 = s32[2]{0} broadcast(s32[] %constant.1390), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %constant.1393 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %broadcast.1394 = s32[2]{0} broadcast(s32[] %constant.1393), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %constant.1395 = s32[2]{0} constant({0, 128}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %constant.1396 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %broadcast.1397 = s32[2]{0} broadcast(s32[] %constant.1396), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %constant.1399 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %broadcast.1400 = s32[2]{0} broadcast(s32[] %constant.1399), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %constant.1401 = s32[2]{0} constant({0, 1280}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %constant.1402 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %broadcast.1403 = s32[2]{0} broadcast(s32[] %constant.1402), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %constant.1405 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %broadcast.1406 = s32[2]{0} broadcast(s32[] %constant.1405), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %constant.1407 = s32[2]{0} constant({0, 1408}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %constant.1408 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %broadcast.1409 = s32[2]{0} broadcast(s32[] %constant.1408), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %constant.1411 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %broadcast.1412 = s32[2]{0} broadcast(s32[] %constant.1411), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %constant.1413 = s32[2]{0} constant({0, 1536}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %constant.1414 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %broadcast.1415 = s32[2]{0} broadcast(s32[] %constant.1414), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %constant.1417 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %broadcast.1418 = s32[2]{0} broadcast(s32[] %constant.1417), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %constant.1419 = s32[2]{0} constant({0, 1664}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %constant.1420 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %broadcast.1421 = s32[2]{0} broadcast(s32[] %constant.1420), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %constant.1423 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %broadcast.1424 = s32[2]{0} broadcast(s32[] %constant.1423), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %constant.1425 = s32[2]{0} constant({0, 256}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %constant.1426 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %broadcast.1427 = s32[2]{0} broadcast(s32[] %constant.1426), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %constant.1429 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %broadcast.1430 = s32[2]{0} broadcast(s32[] %constant.1429), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %constant.1431 = s32[2]{0} constant({0, 384}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %constant.1432 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %broadcast.1433 = s32[2]{0} broadcast(s32[] %constant.1432), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %constant.1435 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %broadcast.1436 = s32[2]{0} broadcast(s32[] %constant.1435), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %constant.1437 = s32[2]{0} constant({0, 512}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %constant.1438 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %broadcast.1439 = s32[2]{0} broadcast(s32[] %constant.1438), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %constant.1441 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %broadcast.1442 = s32[2]{0} broadcast(s32[] %constant.1441), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %constant.1443 = s32[2]{0} constant({0, 640}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %constant.1444 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %broadcast.1445 = s32[2]{0} broadcast(s32[] %constant.1444), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %constant.1447 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %broadcast.1448 = s32[2]{0} broadcast(s32[] %constant.1447), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %constant.1449 = s32[2]{0} constant({0, 768}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %constant.1450 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %broadcast.1451 = s32[2]{0} broadcast(s32[] %constant.1450), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %constant.1453 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %broadcast.1454 = s32[2]{0} broadcast(s32[] %constant.1453), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %constant.1455 = s32[2]{0} constant({0, 896}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %constant.1456 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %broadcast.1457 = s32[2]{0} broadcast(s32[] %constant.1456), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %constant.1459 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %broadcast.1460 = s32[2]{0} broadcast(s32[] %constant.1459), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %constant.1461 = s32[2]{0} constant({0, 1024}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %constant.1462 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %broadcast.1463 = s32[2]{0} broadcast(s32[] %constant.1462), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %constant.1465 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %broadcast.1466 = s32[2]{0} broadcast(s32[] %constant.1465), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %constant.1467 = s32[2]{0} constant({0, 1152}), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %constant.1468 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %broadcast.1469 = s32[2]{0} broadcast(s32[] %constant.1468), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %constant.1471 = s32[] constant(128), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %broadcast.1472 = s32[2]{0} broadcast(s32[] %constant.1471), dimensions={}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %constant.1494 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %broadcast.1495 = f32[128,512]{1,0} broadcast(f32[] %constant.1494), dimensions={}, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %compare.1496 = pred[128,512]{1,0} compare(f32[128,512]{1,0} %maximum.1074, f32[128,512]{1,0} %broadcast.1495), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %constant.1484 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %broadcast.1485 = f32[128,256]{1,0} broadcast(f32[] %constant.1484), dimensions={}, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %compare.1486 = pred[128,256]{1,0} compare(f32[128,256]{1,0} %maximum.1081, f32[128,256]{1,0} %broadcast.1485), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %constant.1474 = f32[] constant(0), metadata={op_type="ReluGrad" op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %broadcast.1475 = f32[128,128]{1,0} broadcast(f32[] %constant.1474), dimensions={}, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %compare.1476 = pred[128,128]{1,0} compare(f32[128,128]{1,0} %maximum.1089, f32[128,128]{1,0} %broadcast.1475), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %slice.1345 = f32[128,128]{1,0} slice(f32[128,857]{1,0} %transpose.1330), slice={[0:128], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %constant.1364 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %constant.1365 = f32[] constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.1366 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.1365), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %select.1367 = f32[128,27,27]{2,1,0} select(pred[128,27,27]{2,1,0} %constant.1364, f32[128,27,27]{2,1,0} %broadcast.1366, f32[128,27,27]{2,1,0} %reshape.1353), metadata={op_name="while/training/gradients/while/Select_grad/Select_1"}
  %dot.1372 = f32[128,27,128]{2,1,0} dot(f32[128,27,27]{2,1,0} %select.1367, f32[128,27,128]{2,1,0} %concatenate.1113), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={1}, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul"}
  %transpose.1373 = f32[128,27,128]{2,1,0} transpose(f32[128,27,128]{2,1,0} %dot.1372), dimensions={0,1,2}, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul"}
  %dot.1374 = f32[128,27,128]{2,1,0} dot(f32[128,27,27]{2,1,0} %select.1367, f32[128,27,128]{2,1,0} %concatenate.1113), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul_1"}
  %transpose.1375 = f32[128,27,128]{2,1,0} transpose(f32[128,27,128]{2,1,0} %dot.1374), dimensions={0,1,2}, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul_1"}
  %add.1376 = f32[128,27,128]{2,1,0} add(f32[128,27,128]{2,1,0} %transpose.1373, f32[128,27,128]{2,1,0} %transpose.1375), metadata={op_type="AddN" op_name="while/training/gradients/AddN_1"}
  %slice.1380 = f32[128,14,128]{2,1,0} slice(f32[128,27,128]{2,1,0} %add.1376), slice={[0:128], [0:14], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %reshape.1387 = f32[128,1792]{1,0} reshape(f32[128,14,128]{2,1,0} %slice.1380), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_13_grad/Reshape"}
  %slice.1392 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %add.1473 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.1345, f32[128,128]{1,0} %slice.1392), metadata={op_type="AddN" op_name="while/training/gradients/AddN_2"}
  %select.1477 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1476, f32[128,128]{1,0} %add.1473, f32[128,128]{1,0} %broadcast.1475), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %dot.1480 = f32[128,256]{1,0} dot(f32[128,128]{1,0} %select.1477, f32[256,128]{1,0:T(8,128)} %get-tuple-element.227), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul"}
  %transpose.1481 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.1480), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul"}
  %select.1487 = f32[128,256]{1,0} select(pred[128,256]{1,0} %compare.1486, f32[128,256]{1,0} %transpose.1481, f32[128,256]{1,0} %broadcast.1485), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %dot.1490 = f32[128,512]{1,0} dot(f32[128,256]{1,0} %select.1487, f32[512,256]{1,0:T(8,128)} %get-tuple-element.225), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul"}
  %transpose.1491 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.1490), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul"}
  %select.1497 = f32[128,512]{1,0} select(pred[128,512]{1,0} %compare.1496, f32[128,512]{1,0} %transpose.1491, f32[128,512]{1,0} %broadcast.1495), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %dot.1500 = f32[128,13]{1,0} dot(f32[128,512]{1,0} %select.1497, f32[13,512]{1,0:T(8,128)} %get-tuple-element.223), lhs_contracting_dims={1}, rhs_contracting_dims={1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_0/MatMul_grad/MatMul"}
  %transpose.1501 = f32[128,13]{1,0} transpose(f32[128,13]{1,0} %dot.1500), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_0/MatMul_grad/MatMul"}
  %constant.1529 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_15"}
  %constant.1532 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_24"}
  %constant.1535 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_25"}
  %constant.1538 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_26"}
  %constant.1541 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_27"}
  %constant.1544 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_16"}
  %constant.1547 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_17"}
  %constant.1550 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_18"}
  %constant.1553 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_19"}
  %constant.1556 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_20"}
  %constant.1559 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_21"}
  %constant.1562 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_22"}
  %constant.1565 = s32[2]{0} constant({-1, 128}), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_23"}
  %slice.1398 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [128:256]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %reshape.1528 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1398), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims"}
  %reshape.1530 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1528), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_15"}
  %reshape.1633 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1530), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1634 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1635 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1633, f32[] %constant.1634), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1636 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1635), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1567 = (u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})) %get-tuple-element.240), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1568 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1569 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1570 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1571 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1568, f32[128]{0} %get-tuple-element.1569, u32[128]{0} %get-tuple-element.1570), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1572 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1571), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1637 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1572), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1638 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1637), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1656 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1638), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1655 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1657 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1656, u32[128,8]{1,0} %iota.1655), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1653 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1658 = f32[128,8]{1,0} broadcast(f32[] %constant.1653), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1654 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1659 = f32[128,8]{1,0} broadcast(f32[] %constant.1654), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1660 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1657, f32[128,8]{1,0} %broadcast.1658, f32[128,8]{1,0} %broadcast.1659), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1661 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1660), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1640 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1637), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1645 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1640), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1644 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1646 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1645, u32[128,128]{1,0} %iota.1644), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1642 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1647 = f32[128,128]{1,0} broadcast(f32[] %constant.1642), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1643 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1648 = f32[128,128]{1,0} broadcast(f32[] %constant.1643), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1649 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1646, f32[128,128]{1,0} %broadcast.1647, f32[128,128]{1,0} %broadcast.1648), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1641 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1636), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1650 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1649, f32[128,128]{1,0} %reshape.1641), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1639 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1637), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1651 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1639), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1652 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1650, f32[128,128]{1,0} %broadcast.1651), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1662 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1661, f32[128,128]{1,0} %multiply.1652), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1663 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1662), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1664 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1636, f32[8,128]{1,0} %reshape.1663), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1665 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1664), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2062 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2063 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1665, f32[] %constant.2062), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2064 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2063), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1440 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [512:640]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %reshape.1549 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1440), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_3"}
  %reshape.1551 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1549), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_18"}
  %reshape.1732 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1551), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1733 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1734 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1732, f32[] %constant.1733), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1735 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1734), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1583 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=9, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1584 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=10, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1585 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=11, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1586 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1583, f32[128]{0} %get-tuple-element.1584, u32[128]{0} %get-tuple-element.1585), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1587 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1586), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1736 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1587), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1737 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1736), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1755 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1737), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1754 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1756 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1755, u32[128,8]{1,0} %iota.1754), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1752 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1757 = f32[128,8]{1,0} broadcast(f32[] %constant.1752), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1753 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1758 = f32[128,8]{1,0} broadcast(f32[] %constant.1753), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1759 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1756, f32[128,8]{1,0} %broadcast.1757, f32[128,8]{1,0} %broadcast.1758), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1760 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1759), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1739 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1736), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1744 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1739), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1743 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1745 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1744, u32[128,128]{1,0} %iota.1743), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1741 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1746 = f32[128,128]{1,0} broadcast(f32[] %constant.1741), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1742 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1747 = f32[128,128]{1,0} broadcast(f32[] %constant.1742), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1748 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1745, f32[128,128]{1,0} %broadcast.1746, f32[128,128]{1,0} %broadcast.1747), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1740 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1735), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1749 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1748, f32[128,128]{1,0} %reshape.1740), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1738 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1736), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1750 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1738), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1751 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1749, f32[128,128]{1,0} %broadcast.1750), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1761 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1760, f32[128,128]{1,0} %multiply.1751), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1762 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1761), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1763 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1735, f32[8,128]{1,0} %reshape.1762), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1764 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1763), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2065 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2066 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1764, f32[] %constant.2065), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2067 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2066), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1452 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [768:896]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %reshape.1555 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1452), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_5"}
  %reshape.1557 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1555), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_20"}
  %reshape.1798 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1557), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1799 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1800 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1798, f32[] %constant.1799), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1801 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1800), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1593 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=15, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1594 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=16, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1595 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=17, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1596 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1593, f32[128]{0} %get-tuple-element.1594, u32[128]{0} %get-tuple-element.1595), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1597 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1596), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1802 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1597), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1803 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1802), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1821 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1803), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1820 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1822 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1821, u32[128,8]{1,0} %iota.1820), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1818 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1823 = f32[128,8]{1,0} broadcast(f32[] %constant.1818), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1819 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1824 = f32[128,8]{1,0} broadcast(f32[] %constant.1819), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1825 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1822, f32[128,8]{1,0} %broadcast.1823, f32[128,8]{1,0} %broadcast.1824), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1826 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1825), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1805 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1802), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1810 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1805), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1809 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1811 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1810, u32[128,128]{1,0} %iota.1809), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1807 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1812 = f32[128,128]{1,0} broadcast(f32[] %constant.1807), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1808 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1813 = f32[128,128]{1,0} broadcast(f32[] %constant.1808), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1814 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1811, f32[128,128]{1,0} %broadcast.1812, f32[128,128]{1,0} %broadcast.1813), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1806 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1801), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1815 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1814, f32[128,128]{1,0} %reshape.1806), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1804 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1802), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1816 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1804), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1817 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1815, f32[128,128]{1,0} %broadcast.1816), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1827 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1826, f32[128,128]{1,0} %multiply.1817), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1828 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1827), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1829 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1801, f32[8,128]{1,0} %reshape.1828), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1830 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1829), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2068 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2069 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1830, f32[] %constant.2068), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2070 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2069), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1458 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [896:1024]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %reshape.1558 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1458), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_6"}
  %reshape.1560 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1558), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_21"}
  %reshape.1831 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1560), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1832 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1833 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1831, f32[] %constant.1832), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1834 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1833), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1598 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=18, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1599 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=19, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1600 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=20, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1601 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1598, f32[128]{0} %get-tuple-element.1599, u32[128]{0} %get-tuple-element.1600), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1602 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1601), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1835 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1602), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1836 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1835), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1854 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1836), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1853 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1855 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1854, u32[128,8]{1,0} %iota.1853), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1851 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1856 = f32[128,8]{1,0} broadcast(f32[] %constant.1851), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1852 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1857 = f32[128,8]{1,0} broadcast(f32[] %constant.1852), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1858 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1855, f32[128,8]{1,0} %broadcast.1856, f32[128,8]{1,0} %broadcast.1857), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1859 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1858), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1838 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1835), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1843 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1838), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1842 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1844 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1843, u32[128,128]{1,0} %iota.1842), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1840 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1845 = f32[128,128]{1,0} broadcast(f32[] %constant.1840), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1841 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1846 = f32[128,128]{1,0} broadcast(f32[] %constant.1841), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1847 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1844, f32[128,128]{1,0} %broadcast.1845, f32[128,128]{1,0} %broadcast.1846), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1839 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1834), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1848 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1847, f32[128,128]{1,0} %reshape.1839), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1837 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1835), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1849 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1837), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1850 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1848, f32[128,128]{1,0} %broadcast.1849), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1860 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1859, f32[128,128]{1,0} %multiply.1850), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1861 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1860), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1862 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1834, f32[8,128]{1,0} %reshape.1861), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1863 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1862), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2071 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2072 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1863, f32[] %constant.2071), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2073 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2072), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1470 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1152:1280]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %reshape.1564 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1470), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_8"}
  %reshape.1566 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1564), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_23"}
  %reshape.1897 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1566), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1898 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1899 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1897, f32[] %constant.1898), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1900 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1899), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1608 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=24, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1609 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=25, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1610 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=26, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1611 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1608, f32[128]{0} %get-tuple-element.1609, u32[128]{0} %get-tuple-element.1610), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1612 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1611), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1901 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1612), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1902 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1901), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1920 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1902), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1919 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1921 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1920, u32[128,8]{1,0} %iota.1919), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1917 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1922 = f32[128,8]{1,0} broadcast(f32[] %constant.1917), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1918 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1923 = f32[128,8]{1,0} broadcast(f32[] %constant.1918), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1924 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1921, f32[128,8]{1,0} %broadcast.1922, f32[128,8]{1,0} %broadcast.1923), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1925 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1924), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1904 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1901), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1909 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1904), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1908 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1910 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1909, u32[128,128]{1,0} %iota.1908), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1906 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1911 = f32[128,128]{1,0} broadcast(f32[] %constant.1906), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1907 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1912 = f32[128,128]{1,0} broadcast(f32[] %constant.1907), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1913 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1910, f32[128,128]{1,0} %broadcast.1911, f32[128,128]{1,0} %broadcast.1912), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1905 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1900), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1914 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1913, f32[128,128]{1,0} %reshape.1905), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1903 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1901), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1915 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1903), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1916 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1914, f32[128,128]{1,0} %broadcast.1915), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1926 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1925, f32[128,128]{1,0} %multiply.1916), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1927 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1926), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1928 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1900, f32[8,128]{1,0} %reshape.1927), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1929 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1928), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2074 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2075 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1929, f32[] %constant.2074), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2076 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2075), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1410 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1408:1536]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %reshape.1534 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1410), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_10"}
  %reshape.1536 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1534), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_25"}
  %reshape.1963 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1536), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1964 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1965 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1963, f32[] %constant.1964), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1966 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1965), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1618 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=30, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1619 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=31, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1620 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=32, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1621 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1618, f32[128]{0} %get-tuple-element.1619, u32[128]{0} %get-tuple-element.1620), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1622 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1621), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1967 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1622), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1968 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1967), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1986 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1968), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1985 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1987 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1986, u32[128,8]{1,0} %iota.1985), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1983 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1988 = f32[128,8]{1,0} broadcast(f32[] %constant.1983), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1984 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1989 = f32[128,8]{1,0} broadcast(f32[] %constant.1984), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1990 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1987, f32[128,8]{1,0} %broadcast.1988, f32[128,8]{1,0} %broadcast.1989), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1991 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1990), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1970 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1967), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1975 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1970), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1974 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1976 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1975, u32[128,128]{1,0} %iota.1974), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1972 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1977 = f32[128,128]{1,0} broadcast(f32[] %constant.1972), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1973 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1978 = f32[128,128]{1,0} broadcast(f32[] %constant.1973), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1979 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1976, f32[128,128]{1,0} %broadcast.1977, f32[128,128]{1,0} %broadcast.1978), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1971 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1966), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1980 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1979, f32[128,128]{1,0} %reshape.1971), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1969 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1967), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1981 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1969), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1982 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1980, f32[128,128]{1,0} %broadcast.1981), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1992 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1991, f32[128,128]{1,0} %multiply.1982), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1993 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1992), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1994 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1966, f32[8,128]{1,0} %reshape.1993), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1995 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1994), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2077 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2078 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1995, f32[] %constant.2077), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2079 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2078), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2080 = f32[136,768]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2064, f32[136,128]{1,0} %concatenate.2067, f32[136,128]{1,0} %concatenate.2070, f32[136,128]{1,0} %concatenate.2073, f32[136,128]{1,0} %concatenate.2076, /*index=5*/f32[136,128]{1,0} %concatenate.2079), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2103 = f32[816,128]{1,0} reshape(f32[136,768]{1,0} %concatenate.2080), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1428 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [256:384]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %reshape.1543 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1428), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_1"}
  %reshape.1545 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1543), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_16"}
  %reshape.1666 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1545), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1667 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1668 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1666, f32[] %constant.1667), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1669 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1668), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1573 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=3, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1574 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=4, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1575 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=5, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1576 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1573, f32[128]{0} %get-tuple-element.1574, u32[128]{0} %get-tuple-element.1575), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1577 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1576), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1670 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1577), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1671 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1670), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1689 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1671), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1688 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1690 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1689, u32[128,8]{1,0} %iota.1688), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1686 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1691 = f32[128,8]{1,0} broadcast(f32[] %constant.1686), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1687 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1692 = f32[128,8]{1,0} broadcast(f32[] %constant.1687), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1693 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1690, f32[128,8]{1,0} %broadcast.1691, f32[128,8]{1,0} %broadcast.1692), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1694 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1693), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1673 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1670), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1678 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1673), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1677 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1679 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1678, u32[128,128]{1,0} %iota.1677), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1675 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1680 = f32[128,128]{1,0} broadcast(f32[] %constant.1675), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1676 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1681 = f32[128,128]{1,0} broadcast(f32[] %constant.1676), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1682 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1679, f32[128,128]{1,0} %broadcast.1680, f32[128,128]{1,0} %broadcast.1681), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1674 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1669), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1683 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1682, f32[128,128]{1,0} %reshape.1674), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1672 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1670), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1684 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1672), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1685 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1683, f32[128,128]{1,0} %broadcast.1684), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1695 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1694, f32[128,128]{1,0} %multiply.1685), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1696 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1695), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1697 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1669, f32[8,128]{1,0} %reshape.1696), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1698 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1697), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2081 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2082 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1698, f32[] %constant.2081), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2083 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2082), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1434 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [384:512]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %reshape.1546 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1434), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_2"}
  %reshape.1548 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1546), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_17"}
  %reshape.1699 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1548), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1700 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1701 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1699, f32[] %constant.1700), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1702 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1701), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1578 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=6, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1579 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=7, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1580 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=8, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1581 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1578, f32[128]{0} %get-tuple-element.1579, u32[128]{0} %get-tuple-element.1580), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1582 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1581), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1703 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1582), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1704 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1703), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1722 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1704), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1721 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1723 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1722, u32[128,8]{1,0} %iota.1721), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1719 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1724 = f32[128,8]{1,0} broadcast(f32[] %constant.1719), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1720 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1725 = f32[128,8]{1,0} broadcast(f32[] %constant.1720), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1726 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1723, f32[128,8]{1,0} %broadcast.1724, f32[128,8]{1,0} %broadcast.1725), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1727 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1726), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1706 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1703), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1711 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1706), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1710 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1712 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1711, u32[128,128]{1,0} %iota.1710), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1708 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1713 = f32[128,128]{1,0} broadcast(f32[] %constant.1708), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1709 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1714 = f32[128,128]{1,0} broadcast(f32[] %constant.1709), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1715 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1712, f32[128,128]{1,0} %broadcast.1713, f32[128,128]{1,0} %broadcast.1714), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1707 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1702), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1716 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1715, f32[128,128]{1,0} %reshape.1707), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1705 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1703), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1717 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1705), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1718 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1716, f32[128,128]{1,0} %broadcast.1717), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1728 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1727, f32[128,128]{1,0} %multiply.1718), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1729 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1728), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1730 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1702, f32[8,128]{1,0} %reshape.1729), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1731 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1730), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2084 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2085 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1731, f32[] %constant.2084), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2086 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2085), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1446 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [640:768]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %reshape.1552 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1446), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_4"}
  %reshape.1554 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1552), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_19"}
  %reshape.1765 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1554), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1766 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1767 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1765, f32[] %constant.1766), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1768 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1767), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1588 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=12, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1589 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=13, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1590 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=14, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1591 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1588, f32[128]{0} %get-tuple-element.1589, u32[128]{0} %get-tuple-element.1590), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1592 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1591), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1769 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1592), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1770 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1769), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1788 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1770), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1787 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1789 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1788, u32[128,8]{1,0} %iota.1787), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1785 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1790 = f32[128,8]{1,0} broadcast(f32[] %constant.1785), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1786 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1791 = f32[128,8]{1,0} broadcast(f32[] %constant.1786), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1792 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1789, f32[128,8]{1,0} %broadcast.1790, f32[128,8]{1,0} %broadcast.1791), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1793 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1792), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1772 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1769), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1777 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1772), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1776 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1778 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1777, u32[128,128]{1,0} %iota.1776), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1774 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1779 = f32[128,128]{1,0} broadcast(f32[] %constant.1774), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1775 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1780 = f32[128,128]{1,0} broadcast(f32[] %constant.1775), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1781 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1778, f32[128,128]{1,0} %broadcast.1779, f32[128,128]{1,0} %broadcast.1780), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1773 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1768), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1782 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1781, f32[128,128]{1,0} %reshape.1773), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1771 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1769), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1783 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1771), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1784 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1782, f32[128,128]{1,0} %broadcast.1783), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1794 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1793, f32[128,128]{1,0} %multiply.1784), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1795 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1794), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1796 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1768, f32[8,128]{1,0} %reshape.1795), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1797 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1796), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2087 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2088 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1797, f32[] %constant.2087), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2089 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2088), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1464 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1024:1152]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %reshape.1561 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1464), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_7"}
  %reshape.1563 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1561), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_22"}
  %reshape.1864 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1563), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1865 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1866 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1864, f32[] %constant.1865), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1867 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1866), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1603 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=21, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1604 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=22, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1605 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=23, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1606 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1603, f32[128]{0} %get-tuple-element.1604, u32[128]{0} %get-tuple-element.1605), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1607 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1606), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1868 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1607), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1869 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1868), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1887 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1869), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1886 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1888 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1887, u32[128,8]{1,0} %iota.1886), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1884 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1889 = f32[128,8]{1,0} broadcast(f32[] %constant.1884), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1885 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1890 = f32[128,8]{1,0} broadcast(f32[] %constant.1885), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1891 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1888, f32[128,8]{1,0} %broadcast.1889, f32[128,8]{1,0} %broadcast.1890), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1892 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1891), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1871 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1868), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1876 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1871), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1875 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1877 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1876, u32[128,128]{1,0} %iota.1875), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1873 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1878 = f32[128,128]{1,0} broadcast(f32[] %constant.1873), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1874 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1879 = f32[128,128]{1,0} broadcast(f32[] %constant.1874), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1880 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1877, f32[128,128]{1,0} %broadcast.1878, f32[128,128]{1,0} %broadcast.1879), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1872 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1867), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1881 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1880, f32[128,128]{1,0} %reshape.1872), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1870 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1868), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1882 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1870), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1883 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1881, f32[128,128]{1,0} %broadcast.1882), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1893 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1892, f32[128,128]{1,0} %multiply.1883), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1894 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1893), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1895 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1867, f32[8,128]{1,0} %reshape.1894), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1896 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1895), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2090 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2091 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1896, f32[] %constant.2090), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2092 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2091), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1404 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1280:1408]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %reshape.1531 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1404), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_9"}
  %reshape.1533 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1531), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_24"}
  %reshape.1930 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1533), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1931 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1932 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1930, f32[] %constant.1931), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1933 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1932), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1613 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=27, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1614 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=28, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1615 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=29, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1616 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1613, f32[128]{0} %get-tuple-element.1614, u32[128]{0} %get-tuple-element.1615), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1617 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1616), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1934 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1617), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1935 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1934), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1953 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.1935), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1952 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1954 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.1953, u32[128,8]{1,0} %iota.1952), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1950 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1955 = f32[128,8]{1,0} broadcast(f32[] %constant.1950), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1951 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1956 = f32[128,8]{1,0} broadcast(f32[] %constant.1951), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1957 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.1954, f32[128,8]{1,0} %broadcast.1955, f32[128,8]{1,0} %broadcast.1956), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.1958 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.1957), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1937 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1934), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1942 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.1937), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.1941 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.1943 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.1942, u32[128,128]{1,0} %iota.1941), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1939 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1944 = f32[128,128]{1,0} broadcast(f32[] %constant.1939), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1940 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1945 = f32[128,128]{1,0} broadcast(f32[] %constant.1940), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.1946 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.1943, f32[128,128]{1,0} %broadcast.1944, f32[128,128]{1,0} %broadcast.1945), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1938 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1933), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1947 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.1946, f32[128,128]{1,0} %reshape.1938), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1936 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1934), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.1948 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.1936), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.1949 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.1947, f32[128,128]{1,0} %broadcast.1948), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.1959 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.1958, f32[128,128]{1,0} %multiply.1949), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.1960 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.1959), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.1961 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1933, f32[8,128]{1,0} %reshape.1960), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1962 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.1961), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2093 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2094 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.1962, f32[] %constant.2093), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2095 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2094), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1416 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1536:1664]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %reshape.1537 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1416), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_11"}
  %reshape.1539 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1537), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_26"}
  %reshape.1996 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1539), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.1997 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.1998 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.1996, f32[] %constant.1997), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1999 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.1998), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1623 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=33, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1624 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=34, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1625 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=35, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1626 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1623, f32[128]{0} %get-tuple-element.1624, u32[128]{0} %get-tuple-element.1625), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1627 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1626), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2000 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1627), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2001 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2000), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2019 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2001), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.2018 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.2020 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2019, u32[128,8]{1,0} %iota.2018), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2016 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2021 = f32[128,8]{1,0} broadcast(f32[] %constant.2016), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2017 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2022 = f32[128,8]{1,0} broadcast(f32[] %constant.2017), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.2023 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2020, f32[128,8]{1,0} %broadcast.2021, f32[128,8]{1,0} %broadcast.2022), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.2024 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.2023), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2003 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2000), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2008 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2003), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.2007 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.2009 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2008, u32[128,128]{1,0} %iota.2007), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2005 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2010 = f32[128,128]{1,0} broadcast(f32[] %constant.2005), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2006 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2011 = f32[128,128]{1,0} broadcast(f32[] %constant.2006), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.2012 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2009, f32[128,128]{1,0} %broadcast.2010, f32[128,128]{1,0} %broadcast.2011), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2004 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.1999), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.2013 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.2012, f32[128,128]{1,0} %reshape.2004), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2002 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2000), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2014 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2002), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.2015 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2013, f32[128,128]{1,0} %broadcast.2014), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.2025 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.2024, f32[128,128]{1,0} %multiply.2015), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2026 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.2025), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2027 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.1999, f32[8,128]{1,0} %reshape.2026), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.2028 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2027), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2096 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2097 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.2028, f32[] %constant.2096), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2098 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2097), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.1422 = f32[128,128]{1,0} slice(f32[128,1792]{1,0} %reshape.1387), slice={[0:128], [1664:1792]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %reshape.1540 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.1422), sharding={maximal device=0}, metadata={op_type="ExpandDims" op_name="while/ExpandDims_12"}
  %reshape.1542 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %reshape.1540), sharding={maximal device=0}, metadata={op_type="Reshape" op_name="while/Reshape_27"}
  %reshape.2029 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %reshape.1542), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2030 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2031 = f32[128,128]{1,0} pad(f32[128,128]{1,0} %reshape.2029, f32[] %constant.2030), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.2032 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %pad.2031), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1628 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=36, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1629 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=37, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.1630 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.1567), index=38, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1631 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.1628, f32[128]{0} %get-tuple-element.1629, u32[128]{0} %get-tuple-element.1630), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.1632 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.1631), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2033 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.1632), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2034 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2033), index=0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2052 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2034), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.2051 = u32[128,8]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.2053 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2052, u32[128,8]{1,0} %iota.2051), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2049 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2054 = f32[128,8]{1,0} broadcast(f32[] %constant.2049), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2050 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2055 = f32[128,8]{1,0} broadcast(f32[] %constant.2050), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.2056 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2053, f32[128,8]{1,0} %broadcast.2054, f32[128,8]{1,0} %broadcast.2055), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %transpose.2057 = f32[8,128]{0,1} transpose(f32[128,8]{1,0} %select.2056), dimensions={1,0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2036 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2033), index=2, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2041 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2036), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %iota.2040 = u32[128,128]{1,0} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.2042 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2041, u32[128,128]{1,0} %iota.2040), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2038 = f32[] constant(1), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2043 = f32[128,128]{1,0} broadcast(f32[] %constant.2038), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2039 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2044 = f32[128,128]{1,0} broadcast(f32[] %constant.2039), dimensions={}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %select.2045 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2042, f32[128,128]{1,0} %broadcast.2043, f32[128,128]{1,0} %broadcast.2044), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2037 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %slice.2032), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.2046 = f32[128,128]{1,0} dot(f32[128,128]{1,0} %select.2045, f32[128,128]{1,0} %reshape.2037), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.2035 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2033), index=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %broadcast.2047 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2035), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %multiply.2048 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2046, f32[128,128]{1,0} %broadcast.2047), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %dot.2058 = f32[8,128]{1,0} dot(f32[8,128]{0,1} %transpose.2057, f32[128,128]{1,0} %multiply.2048), lhs_contracting_dims={1}, rhs_contracting_dims={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2059 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %dot.2058), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2060 = f32[136,128]{1,0} concatenate(f32[128,128]{1,0} %slice.2032, f32[8,128]{1,0} %reshape.2059), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %slice.2061 = f32[136,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2060), slice={[0:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2099 = f32[] constant(0), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %pad.2100 = f32[136,128]{1,0} pad(f32[136,128]{1,0} %slice.2061, f32[] %constant.2099), padding=0_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2101 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %pad.2100), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.2102 = f32[136,896]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2083, f32[136,128]{1,0} %concatenate.2086, f32[136,128]{1,0} %concatenate.2089, f32[136,128]{1,0} %concatenate.2092, f32[136,128]{1,0} %concatenate.2095, /*index=5*/f32[136,128]{1,0} %concatenate.2098, f32[136,128]{1,0} %concatenate.2101), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.2104 = f32[952,128]{1,0} reshape(f32[136,896]{1,0} %concatenate.2102), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.2105 = (f32[816,128]{1,0}, f32[952,128]{1,0}) tuple(f32[816,128]{1,0} %reshape.2103, f32[952,128]{1,0} %reshape.2104), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %get-tuple-element.207 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=1
  %convert.957 = f32[]{:T(256)} convert(s64[]{:T(256)} %get-tuple-element.207), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.965 = f32[] constant(2000), sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %compare.966 = pred[]{:T(256)} compare(f32[]{:T(256)} %convert.957, f32[] %constant.965), direction=LT, sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %convert.1042 = f32[]{:T(256)} convert(s64[]{:T(256)} %get-tuple-element.207), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_9"}
  %constant.1044 = f32[] constant(2000), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_4"}
  %divide.1045 = f32[]{:T(256)} divide(f32[]{:T(256)} %convert.1042, f32[] %constant.1044), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_4"}
  %constant.1047 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_10"}
  %multiply.1048 = f32[]{:T(256)} multiply(f32[]{:T(256)} %divide.1045, f32[] %constant.1047), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_10"}
  %constant.962 = pred[] constant(true), sharding={maximal device=0}, metadata={op_type="LogicalAnd" op_name="while/LogicalAnd"}
  %constant.959 = f32[] constant(38000), sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %compare.960 = pred[]{:T(256)} compare(f32[]{:T(256)} %convert.957, f32[] %constant.959), direction=GT, sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %and.963 = pred[] and(pred[] %constant.962, pred[]{:T(256)} %compare.960), sharding={maximal device=0}, metadata={op_type="LogicalAnd" op_name="while/LogicalAnd"}
  %constant.986 = f32[] constant(1e-07), sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %constant.983 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %constant.974 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %constant.968 = f32[] constant(38000), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_8"}
  %subtract.969 = f32[]{:T(256)} subtract(f32[]{:T(256)} %convert.957, f32[] %constant.968), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_8"}
  %constant.971 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="Minimum" op_name="while/Minimum_2"}
  %minimum.972 = f32[]{:T(256)} minimum(f32[]{:T(256)} %subtract.969, f32[] %constant.971), sharding={maximal device=0}, metadata={op_type="Minimum" op_name="while/Minimum_2"}
  %subtract.975 = f32[] subtract(f32[] %constant.974, f32[]{:T(256)} %minimum.972), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %constant.977 = f32[] constant(40000), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_5"}
  %divide.978 = f32[] divide(f32[] %subtract.975, f32[] %constant.977), sharding={maximal device=0}, metadata={op_type="RealDiv" op_name="while/truediv_5"}
  %constant.980 = f32[] constant(2), sharding={maximal device=0}, metadata={op_type="Pow" op_name="while/pow_2"}
  %power.981 = f32[] power(f32[] %divide.978, f32[] %constant.980), sharding={maximal device=0}, metadata={op_type="Pow" op_name="while/pow_2"}
  %multiply.984 = f32[] multiply(f32[] %constant.983, f32[] %power.981), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %maximum.987 = f32[] maximum(f32[] %constant.986, f32[] %multiply.984), sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %constant.989 = f32[] constant(2.8), sharding={maximal device=0}, metadata={op_type="Select" op_name="while/Select_1"}
  %select.990 = f32[] select(pred[] %and.963, f32[] %maximum.987, f32[] %constant.989), metadata={op_name="while/Select_1"}
  %select.1049 = f32[]{:T(256)} select(pred[]{:T(256)} %compare.966, f32[]{:T(256)} %multiply.1048, f32[] %select.990), metadata={op_name="while/Select_2"}
  %tuple.2106 = (f32[]{:T(256)}) tuple(f32[]{:T(256)} %select.1049), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.2107 = ((f32[816,128]{1,0}, f32[952,128]{1,0}), (f32[]{:T(256)})) tuple((f32[816,128]{1,0}, f32[952,128]{1,0}) %tuple.2105, (f32[]{:T(256)}) %tuple.2106), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %after-all.2108 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %outfeed.2109 = token[] outfeed(((f32[816,128]{1,0}, f32[952,128]{1,0}), (f32[]{:T(256)})) %tuple.2107, token[] %after-all.2108), outfeed_shape=((f32[816,128]{1,0}, f32[952,128]{1,0}), (f32[]{:T(256)})), outfeed_config="\022\270\001\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\230\001\010\200\370\273\005\020\005\030\200\370\262\006 \200\010(\t0\001:\200\001\n\002\020\005\n\004\010\001\020\004\n\004\010\001\020\001\n\004\010\001\020\002\n\002\010\001\n\004\010\001\020\013\n\002\020\006\n\004\010\001\020\010\n\004\010\001\020\006\n\002\020\010\n\002\020\004\n\004\010\001\020\007\n\002\020\001\n\002\020\t\n\004\010\001\020\003\n\002\020\002\n\004\010\001\020\014\n\002\020\014\n\004\010\001\020\005\n\004\010\001\020\r\n\002\020\007\n\002\020\r\n\002\020\003\n\004\010\001\020\n\n\000\n\004\010\001\020\t@\005\"\007\0100\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\010\034\020\300\361\333\007", sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2110 = s32[2]{0} constant({1664, 128}), metadata={op_type="Reshape" op_name="while/training/gradients/while/Gather_grad/Reshape"}
  %constant.2112 = s32[] constant(19656), metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %constant.2115 = s32[] constant(19656), metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %constant.2116 = s32[] constant(128), metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %constant.2127 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %get-tuple-element.206 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=0, sharding={maximal device=0}
  %constant.2128 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %add.2129 = s32[] add(s32[] %get-tuple-element.206, s32[] %constant.2128), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %tuple.2130 = (s32[]) tuple(s32[] %add.2129), sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2131 = s32[] get-tuple-element((s32[]) %tuple.2130), index=0, sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %constant.2125 = s64[] constant(1), metadata={op_type="AssignAddVariableOp" op_name="while/training/train"}
  %add.2126 = s64[]{:T(256)} add(s64[]{:T(256)} %get-tuple-element.207, s64[] %constant.2125), metadata={op_type="AssignAddVariableOp" op_name="while/training/train"}
  %tuple.2132 = (s64[]{:T(256)}) tuple(s64[]{:T(256)} %add.2126), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2133 = s64[]{:T(256)} get-tuple-element((s64[]{:T(256)}) %tuple.2132), index=0, metadata={op_name="XLA_Retvals"}
  %convert.991 = f32[]{:T(256)} convert(s64[]{:T(256)} %get-tuple-element.207), metadata={op_type="Cast" op_name="while/Cast_5"}
  %constant.997 = f32[] constant(2000), metadata={op_type="Less" op_name="while/Less_2"}
  %compare.998 = pred[]{:T(256)} compare(f32[]{:T(256)} %convert.991, f32[] %constant.997), direction=LT, metadata={op_type="Less" op_name="while/Less_2"}
  %convert.999 = f32[]{:T(256)} convert(pred[]{:T(256)} %compare.998), metadata={op_type="Cast" op_name="while/Cast_6"}
  %constant.1015 = f32[] constant(2.8), metadata={op_type="Sub" op_name="while/sub_5"}
  %constant.1009 = f32[] constant(2000), metadata={op_type="Sub" op_name="while/sub_4"}
  %subtract.1010 = f32[] subtract(f32[] %constant.1009, f32[]{:T(256)} %convert.991), metadata={op_type="Sub" op_name="while/sub_4"}
  %constant.1012 = f32[] constant(0.0014), metadata={op_type="Mul" op_name="while/mul_5"}
  %multiply.1013 = f32[] multiply(f32[] %subtract.1010, f32[] %constant.1012), metadata={op_type="Mul" op_name="while/mul_5"}
  %subtract.1016 = f32[] subtract(f32[] %constant.1015, f32[] %multiply.1013), metadata={op_type="Sub" op_name="while/sub_5"}
  %multiply.1017 = f32[]{:T(256)} multiply(f32[]{:T(256)} %convert.999, f32[] %subtract.1016), metadata={op_type="Mul" op_name="while/mul_7"}
  %constant.993 = f32[] constant(38000), metadata={op_type="Greater" op_name="while/Greater_1"}
  %compare.994 = pred[]{:T(256)} compare(f32[]{:T(256)} %convert.991, f32[] %constant.993), direction=GT, metadata={op_type="Greater" op_name="while/Greater_1"}
  %convert.995 = f32[]{:T(256)} convert(pred[]{:T(256)} %compare.994), metadata={op_type="Cast" op_name="while/Cast_7"}
  %add.1000 = f32[]{:T(256)} add(f32[]{:T(256)} %convert.999, f32[]{:T(256)} %convert.995), metadata={op_type="AddV2" op_name="while/add_4"}
  %constant.1002 = f32[] constant(0), metadata={op_type="Equal" op_name="while/Equal_1"}
  %compare.1003 = pred[]{:T(256)} compare(f32[]{:T(256)} %add.1000, f32[] %constant.1002), direction=EQ, metadata={op_type="Equal" op_name="while/Equal_1"}
  %convert.1004 = f32[]{:T(256)} convert(pred[]{:T(256)} %compare.1003), metadata={op_type="Cast" op_name="while/Cast_8"}
  %constant.1006 = f32[] constant(2.8), metadata={op_type="Mul" op_name="while/mul_8"}
  %multiply.1007 = f32[]{:T(256)} multiply(f32[]{:T(256)} %convert.1004, f32[] %constant.1006), metadata={op_type="Mul" op_name="while/mul_8"}
  %add.1018 = f32[]{:T(256)} add(f32[]{:T(256)} %multiply.1017, f32[]{:T(256)} %multiply.1007), metadata={op_type="AddV2" op_name="while/add_5"}
  %constant.1035 = f32[] constant(2.8), metadata={op_type="Mul" op_name="while/mul_6"}
  %constant.1026 = f32[] constant(40000), metadata={op_type="Sub" op_name="while/sub_7"}
  %constant.1020 = f32[] constant(38000), metadata={op_type="Sub" op_name="while/sub_6"}
  %subtract.1021 = f32[]{:T(256)} subtract(f32[]{:T(256)} %convert.991, f32[] %constant.1020), metadata={op_type="Sub" op_name="while/sub_6"}
  %constant.1023 = f32[] constant(40000), metadata={op_type="Minimum" op_name="while/Minimum_1"}
  %minimum.1024 = f32[]{:T(256)} minimum(f32[]{:T(256)} %subtract.1021, f32[] %constant.1023), metadata={op_type="Minimum" op_name="while/Minimum_1"}
  %subtract.1027 = f32[] subtract(f32[] %constant.1026, f32[]{:T(256)} %minimum.1024), metadata={op_type="Sub" op_name="while/sub_7"}
  %constant.1029 = f32[] constant(40000), metadata={op_type="RealDiv" op_name="while/truediv_3"}
  %divide.1030 = f32[] divide(f32[] %subtract.1027, f32[] %constant.1029), metadata={op_type="RealDiv" op_name="while/truediv_3"}
  %constant.1032 = f32[] constant(2), metadata={op_type="Pow" op_name="while/pow_1"}
  %power.1033 = f32[] power(f32[] %divide.1030, f32[] %constant.1032), metadata={op_type="Pow" op_name="while/pow_1"}
  %multiply.1036 = f32[] multiply(f32[] %constant.1035, f32[] %power.1033), metadata={op_type="Mul" op_name="while/mul_6"}
  %constant.1038 = f32[] constant(1e-07), metadata={op_type="Maximum" op_name="while/Maximum_1"}
  %maximum.1039 = f32[] maximum(f32[] %multiply.1036, f32[] %constant.1038), metadata={op_type="Maximum" op_name="while/Maximum_1"}
  %multiply.1040 = f32[]{:T(256)} multiply(f32[]{:T(256)} %convert.995, f32[] %maximum.1039), metadata={op_type="Mul" op_name="while/mul_9"}
  %add.1041 = f32[]{:T(256)} add(f32[]{:T(256)} %add.1018, f32[]{:T(256)} %multiply.1040), metadata={op_type="AddV2" op_name="while/add_6"}
  %broadcast.2119 = f32[19656,128]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  %constant.2113 = f32[] constant(0), metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %broadcast.2114 = f32[19656,128]{1,0} broadcast(f32[] %constant.2113), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %reshape.926 = s32[1664]{0} reshape(s32[128,13]{1,0} %add.831), metadata={op_type="Reshape" op_name="while/training/gradients/while/Gather_grad/Reshape_1"}
  %slice.1384 = f32[128,13,128]{2,1,0} slice(f32[128,27,128]{2,1,0} %add.1376), slice={[0:128], [14:27], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice_1"}
  %reshape.2111 = f32[1664,128]{1,0} reshape(f32[128,13,128]{2,1,0} %slice.1384), metadata={op_type="Reshape" op_name="while/training/gradients/while/Gather_grad/Reshape"}
  %scatter.2117 = f32[19656,128]{1,0} scatter(f32[19656,128]{1,0} %broadcast.2114, s32[1664]{0} %reshape.926, f32[1664,128]{1,0} %reshape.2111), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.196, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %all-reduce.2118 = f32[19656,128]{1,0} all-reduce(f32[19656,128]{1,0} %scatter.2117), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.200, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_19"}
  %multiply.2120 = f32[19656,128]{1,0} multiply(f32[19656,128]{1,0} %broadcast.2119, f32[19656,128]{1,0} %all-reduce.2118), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  %subtract.2121 = f32[19656,128]{1,0:T(8,128)} subtract(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.208, f32[19656,128]{1,0} %multiply.2120), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  %tuple.2134 = (f32[19656,128]{1,0:T(8,128)}) tuple(f32[19656,128]{1,0:T(8,128)} %subtract.2121), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2135 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}) %tuple.2134), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.209 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=3
  %broadcast.1090 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %constant.951 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum"}
  %all-reduce.952 = f32[1]{0} all-reduce(f32[1]{0} %constant.951), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.84, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum"}
  %multiply.1091 = f32[1]{0} multiply(f32[1]{0} %broadcast.1090, f32[1]{0} %all-reduce.952), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %subtract.1092 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.209, f32[1]{0} %multiply.1091), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %tuple.2136 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1092), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2137 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2136), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.210 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=4
  %broadcast.1093 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl01/ResourceApplyGradientDescent"}
  %constant.933 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_1"}
  %all-reduce.934 = f32[1]{0} all-reduce(f32[1]{0} %constant.933), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.48, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_1"}
  %multiply.1094 = f32[1]{0} multiply(f32[1]{0} %broadcast.1093, f32[1]{0} %all-reduce.934), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl01/ResourceApplyGradientDescent"}
  %subtract.1095 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.210, f32[1]{0} %multiply.1094), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl01/ResourceApplyGradientDescent"}
  %tuple.2138 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1095), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2139 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2138), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.211 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=5
  %broadcast.1096 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl10/ResourceApplyGradientDescent"}
  %constant.927 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_10"}
  %all-reduce.928 = f32[1]{0} all-reduce(f32[1]{0} %constant.927), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.36, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_10"}
  %multiply.1097 = f32[1]{0} multiply(f32[1]{0} %broadcast.1096, f32[1]{0} %all-reduce.928), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl10/ResourceApplyGradientDescent"}
  %subtract.1098 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.211, f32[1]{0} %multiply.1097), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl10/ResourceApplyGradientDescent"}
  %tuple.2140 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1098), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2141 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2140), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.212 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=6
  %broadcast.1099 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl11/ResourceApplyGradientDescent"}
  %constant.929 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_11"}
  %all-reduce.930 = f32[1]{0} all-reduce(f32[1]{0} %constant.929), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.40, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_11"}
  %multiply.1100 = f32[1]{0} multiply(f32[1]{0} %broadcast.1099, f32[1]{0} %all-reduce.930), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl11/ResourceApplyGradientDescent"}
  %subtract.1101 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.212, f32[1]{0} %multiply.1100), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl11/ResourceApplyGradientDescent"}
  %tuple.2142 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1101), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2143 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2142), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.213 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=7
  %broadcast.1102 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl12/ResourceApplyGradientDescent"}
  %constant.931 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_12"}
  %all-reduce.932 = f32[1]{0} all-reduce(f32[1]{0} %constant.931), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.44, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_12"}
  %multiply.1103 = f32[1]{0} multiply(f32[1]{0} %broadcast.1102, f32[1]{0} %all-reduce.932), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl12/ResourceApplyGradientDescent"}
  %subtract.1104 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.213, f32[1]{0} %multiply.1103), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl12/ResourceApplyGradientDescent"}
  %tuple.2144 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1104), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2145 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2144), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.214 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=8
  %broadcast.1105 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl02/ResourceApplyGradientDescent"}
  %constant.935 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_2"}
  %all-reduce.936 = f32[1]{0} all-reduce(f32[1]{0} %constant.935), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.52, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_2"}
  %multiply.1106 = f32[1]{0} multiply(f32[1]{0} %broadcast.1105, f32[1]{0} %all-reduce.936), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl02/ResourceApplyGradientDescent"}
  %subtract.1107 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.214, f32[1]{0} %multiply.1106), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl02/ResourceApplyGradientDescent"}
  %tuple.2146 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1107), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2147 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2146), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.215 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=9
  %broadcast.2122 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl03/ResourceApplyGradientDescent"}
  %constant.937 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_3"}
  %all-reduce.938 = f32[1]{0} all-reduce(f32[1]{0} %constant.937), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.56, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_3"}
  %multiply.2123 = f32[1]{0} multiply(f32[1]{0} %broadcast.2122, f32[1]{0} %all-reduce.938), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl03/ResourceApplyGradientDescent"}
  %subtract.2124 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.215, f32[1]{0} %multiply.2123), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl03/ResourceApplyGradientDescent"}
  %tuple.2148 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.2124), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2149 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2148), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.216 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=10
  %broadcast.1050 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl04/ResourceApplyGradientDescent"}
  %constant.939 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_4"}
  %all-reduce.940 = f32[1]{0} all-reduce(f32[1]{0} %constant.939), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.60, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_4"}
  %multiply.1051 = f32[1]{0} multiply(f32[1]{0} %broadcast.1050, f32[1]{0} %all-reduce.940), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl04/ResourceApplyGradientDescent"}
  %subtract.1052 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.216, f32[1]{0} %multiply.1051), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl04/ResourceApplyGradientDescent"}
  %tuple.2150 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1052), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2151 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2150), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.217 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=11
  %broadcast.1053 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl05/ResourceApplyGradientDescent"}
  %constant.941 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_5"}
  %all-reduce.942 = f32[1]{0} all-reduce(f32[1]{0} %constant.941), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.64, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_5"}
  %multiply.1054 = f32[1]{0} multiply(f32[1]{0} %broadcast.1053, f32[1]{0} %all-reduce.942), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl05/ResourceApplyGradientDescent"}
  %subtract.1055 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.217, f32[1]{0} %multiply.1054), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl05/ResourceApplyGradientDescent"}
  %tuple.2152 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1055), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2153 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2152), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.218 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=12
  %broadcast.1056 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl06/ResourceApplyGradientDescent"}
  %constant.943 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_6"}
  %all-reduce.944 = f32[1]{0} all-reduce(f32[1]{0} %constant.943), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.68, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_6"}
  %multiply.1057 = f32[1]{0} multiply(f32[1]{0} %broadcast.1056, f32[1]{0} %all-reduce.944), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl06/ResourceApplyGradientDescent"}
  %subtract.1058 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.218, f32[1]{0} %multiply.1057), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl06/ResourceApplyGradientDescent"}
  %tuple.2154 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1058), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2155 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2154), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.219 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=13
  %broadcast.1059 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl07/ResourceApplyGradientDescent"}
  %constant.945 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_7"}
  %all-reduce.946 = f32[1]{0} all-reduce(f32[1]{0} %constant.945), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.72, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_7"}
  %multiply.1060 = f32[1]{0} multiply(f32[1]{0} %broadcast.1059, f32[1]{0} %all-reduce.946), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl07/ResourceApplyGradientDescent"}
  %subtract.1061 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.219, f32[1]{0} %multiply.1060), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl07/ResourceApplyGradientDescent"}
  %tuple.2156 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1061), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2157 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2156), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.220 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=14
  %broadcast.1062 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl08/ResourceApplyGradientDescent"}
  %constant.947 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_8"}
  %all-reduce.948 = f32[1]{0} all-reduce(f32[1]{0} %constant.947), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.76, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_8"}
  %multiply.1063 = f32[1]{0} multiply(f32[1]{0} %broadcast.1062, f32[1]{0} %all-reduce.948), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl08/ResourceApplyGradientDescent"}
  %subtract.1064 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.220, f32[1]{0} %multiply.1063), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl08/ResourceApplyGradientDescent"}
  %tuple.2158 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1064), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2159 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2158), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.221 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.205), index=15
  %broadcast.1065 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl09/ResourceApplyGradientDescent"}
  %constant.949 = f32[1]{0} constant({0}), sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_9"}
  %all-reduce.950 = f32[1]{0} all-reduce(f32[1]{0} %constant.949), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.80, sharding={maximal device=0}, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_9"}
  %multiply.1066 = f32[1]{0} multiply(f32[1]{0} %broadcast.1065, f32[1]{0} %all-reduce.950), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl09/ResourceApplyGradientDescent"}
  %subtract.1067 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.221, f32[1]{0} %multiply.1066), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl09/ResourceApplyGradientDescent"}
  %tuple.2160 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1067), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2161 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2160), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1509 = f32[512]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %constant.1498 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/bottom_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %reduce.1499 = f32[512]{0} reduce(f32[128,512]{1,0} %select.1497, f32[] %constant.1498), dimensions={0}, to_apply=%region_0.168, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1508 = f32[512]{0} all-reduce(f32[512]{0} %reduce.1499), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.176, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_14"}
  %multiply.1510 = f32[512]{0} multiply(f32[512]{0} %broadcast.1509, f32[512]{0} %all-reduce.1508), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %subtract.1511 = f32[512]{0:T(512)} subtract(f32[512]{0:T(512)} %get-tuple-element.222, f32[512]{0} %multiply.1510), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %tuple.2162 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %subtract.1511), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2163 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.2162), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1505 = f32[13,512]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %dot.1502 = f32[13,512]{1,0} dot(f32[128,13]{1,0} %slice.822, f32[128,512]{1,0} %select.1497), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_0/MatMul_grad/MatMul_1"}
  %transpose.1503 = f32[13,512]{1,0} transpose(f32[13,512]{1,0} %dot.1502), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_0/MatMul_grad/MatMul_1"}
  %all-reduce.1504 = f32[13,512]{1,0} all-reduce(f32[13,512]{1,0} %transpose.1503), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.172, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_13"}
  %multiply.1506 = f32[13,512]{1,0} multiply(f32[13,512]{1,0} %broadcast.1505, f32[13,512]{1,0} %all-reduce.1504), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %subtract.1507 = f32[13,512]{1,0:T(8,128)} subtract(f32[13,512]{1,0:T(8,128)} %get-tuple-element.223, f32[13,512]{1,0} %multiply.1506), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %tuple.2164 = (f32[13,512]{1,0:T(8,128)}) tuple(f32[13,512]{1,0:T(8,128)} %subtract.1507), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2165 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[13,512]{1,0:T(8,128)}) %tuple.2164), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1517 = f32[256]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %constant.1488 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/bottom_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %reduce.1489 = f32[256]{0} reduce(f32[128,256]{1,0} %select.1487, f32[] %constant.1488), dimensions={0}, to_apply=%region_0.164, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1516 = f32[256]{0} all-reduce(f32[256]{0} %reduce.1489), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.184, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_16"}
  %multiply.1518 = f32[256]{0} multiply(f32[256]{0} %broadcast.1517, f32[256]{0} %all-reduce.1516), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %subtract.1519 = f32[256]{0:T(256)} subtract(f32[256]{0:T(256)} %get-tuple-element.224, f32[256]{0} %multiply.1518), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %tuple.2166 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %subtract.1519), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2167 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.2166), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1513 = f32[512,256]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %dot.1492 = f32[512,256]{1,0} dot(f32[128,512]{1,0} %maximum.1074, f32[128,256]{1,0} %select.1487), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul_1"}
  %transpose.1493 = f32[512,256]{1,0} transpose(f32[512,256]{1,0} %dot.1492), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul_1"}
  %all-reduce.1512 = f32[512,256]{1,0} all-reduce(f32[512,256]{1,0} %transpose.1493), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.180, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_15"}
  %multiply.1514 = f32[512,256]{1,0} multiply(f32[512,256]{1,0} %broadcast.1513, f32[512,256]{1,0} %all-reduce.1512), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %subtract.1515 = f32[512,256]{1,0:T(8,128)} subtract(f32[512,256]{1,0:T(8,128)} %get-tuple-element.225, f32[512,256]{1,0} %multiply.1514), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %tuple.2168 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %subtract.1515), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2169 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.2168), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1525 = f32[128]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %constant.1478 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %reduce.1479 = f32[128]{0} reduce(f32[128,128]{1,0} %select.1477, f32[] %constant.1478), dimensions={0}, to_apply=%region_0.160, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1524 = f32[128]{0} all-reduce(f32[128]{0} %reduce.1479), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.192, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_18"}
  %multiply.1526 = f32[128]{0} multiply(f32[128]{0} %broadcast.1525, f32[128]{0} %all-reduce.1524), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %subtract.1527 = f32[128]{0:T(256)} subtract(f32[128]{0:T(256)} %get-tuple-element.226, f32[128]{0} %multiply.1526), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %tuple.2170 = (f32[128]{0:T(256)}) tuple(f32[128]{0:T(256)} %subtract.1527), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2171 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}) %tuple.2170), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1521 = f32[256,128]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %dot.1482 = f32[256,128]{1,0} dot(f32[128,256]{1,0} %maximum.1081, f32[128,128]{1,0} %select.1477), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul_1"}
  %transpose.1483 = f32[256,128]{1,0} transpose(f32[256,128]{1,0} %dot.1482), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul_1"}
  %all-reduce.1520 = f32[256,128]{1,0} all-reduce(f32[256,128]{1,0} %transpose.1483), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.188, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_17"}
  %multiply.1522 = f32[256,128]{1,0} multiply(f32[256,128]{1,0} %broadcast.1521, f32[256,128]{1,0} %all-reduce.1520), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %subtract.1523 = f32[256,128]{1,0:T(8,128)} subtract(f32[256,128]{1,0:T(8,128)} %get-tuple-element.227, f32[256,128]{1,0} %multiply.1522), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %tuple.2172 = (f32[256,128]{1,0:T(8,128)}) tuple(f32[256,128]{1,0:T(8,128)} %subtract.1523), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2173 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[256,128]{1,0:T(8,128)}) %tuple.2172), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1332 = f32[1024]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %constant.1327 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/top_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %reduce.1328 = f32[1024]{0} reduce(f32[128,1024]{1,0} %select.1326, f32[] %constant.1327), dimensions={0}, to_apply=%region_0.144, metadata={op_name="while/training/gradients/while/top_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1331 = f32[1024]{0} all-reduce(f32[1024]{0} %reduce.1328), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.148, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_21"}
  %multiply.1333 = f32[1024]{0} multiply(f32[1024]{0} %broadcast.1332, f32[1024]{0} %all-reduce.1331), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %subtract.1334 = f32[1024]{0:T(1024)} subtract(f32[1024]{0:T(1024)} %get-tuple-element.228, f32[1024]{0} %multiply.1333), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %tuple.2174 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %subtract.1334), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2175 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.2174), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1369 = f32[857,1024]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %dot.1339 = f32[857,1024]{1,0} dot(f32[128,857]{1,0} %concatenate.1126, f32[128,1024]{1,0} %select.1326), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul_1"}
  %transpose.1340 = f32[857,1024]{1,0} transpose(f32[857,1024]{1,0} %dot.1339), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul_1"}
  %all-reduce.1368 = f32[857,1024]{1,0} all-reduce(f32[857,1024]{1,0} %transpose.1340), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.156, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_20"}
  %multiply.1370 = f32[857,1024]{1,0} multiply(f32[857,1024]{1,0} %broadcast.1369, f32[857,1024]{1,0} %all-reduce.1368), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %subtract.1371 = f32[857,1024]{1,0:T(8,128)} subtract(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.229, f32[857,1024]{1,0} %multiply.1370), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %tuple.2176 = (f32[857,1024]{1,0:T(8,128)}) tuple(f32[857,1024]{1,0:T(8,128)} %subtract.1371), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2177 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[857,1024]{1,0:T(8,128)}) %tuple.2176), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1314 = f32[1024]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %constant.1309 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/top_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %reduce.1310 = f32[1024]{0} reduce(f32[128,1024]{1,0} %select.1308, f32[] %constant.1309), dimensions={0}, to_apply=%region_0.132, metadata={op_name="while/training/gradients/while/top_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1313 = f32[1024]{0} all-reduce(f32[1024]{0} %reduce.1310), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.136, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_23"}
  %multiply.1315 = f32[1024]{0} multiply(f32[1024]{0} %broadcast.1314, f32[1024]{0} %all-reduce.1313), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %subtract.1316 = f32[1024]{0:T(1024)} subtract(f32[1024]{0:T(1024)} %get-tuple-element.230, f32[1024]{0} %multiply.1315), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %tuple.2178 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %subtract.1316), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2179 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.2178), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1336 = f32[1024,1024]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %dot.1321 = f32[1024,1024]{1,0} dot(f32[128,1024]{1,0} %maximum.1133, f32[128,1024]{1,0} %select.1308), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul_1"}
  %transpose.1322 = f32[1024,1024]{1,0} transpose(f32[1024,1024]{1,0} %dot.1321), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul_1"}
  %all-reduce.1335 = f32[1024,1024]{1,0} all-reduce(f32[1024,1024]{1,0} %transpose.1322), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.152, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_22"}
  %multiply.1337 = f32[1024,1024]{1,0} multiply(f32[1024,1024]{1,0} %broadcast.1336, f32[1024,1024]{1,0} %all-reduce.1335), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %subtract.1338 = f32[1024,1024]{1,0:T(8,128)} subtract(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.231, f32[1024,1024]{1,0} %multiply.1337), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %tuple.2180 = (f32[1024,1024]{1,0:T(8,128)}) tuple(f32[1024,1024]{1,0:T(8,128)} %subtract.1338), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2181 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[1024,1024]{1,0:T(8,128)}) %tuple.2180), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1296 = f32[512]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %constant.1291 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/top_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %reduce.1292 = f32[512]{0} reduce(f32[128,512]{1,0} %select.1290, f32[] %constant.1291), dimensions={0}, to_apply=%region_0.120, metadata={op_name="while/training/gradients/while/top_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1295 = f32[512]{0} all-reduce(f32[512]{0} %reduce.1292), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.124, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_25"}
  %multiply.1297 = f32[512]{0} multiply(f32[512]{0} %broadcast.1296, f32[512]{0} %all-reduce.1295), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %subtract.1298 = f32[512]{0:T(512)} subtract(f32[512]{0:T(512)} %get-tuple-element.232, f32[512]{0} %multiply.1297), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %tuple.2182 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %subtract.1298), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2183 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.2182), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1318 = f32[1024,512]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %dot.1303 = f32[1024,512]{1,0} dot(f32[128,1024]{1,0} %maximum.1140, f32[128,512]{1,0} %select.1290), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul_1"}
  %transpose.1304 = f32[1024,512]{1,0} transpose(f32[1024,512]{1,0} %dot.1303), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul_1"}
  %all-reduce.1317 = f32[1024,512]{1,0} all-reduce(f32[1024,512]{1,0} %transpose.1304), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.140, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_24"}
  %multiply.1319 = f32[1024,512]{1,0} multiply(f32[1024,512]{1,0} %broadcast.1318, f32[1024,512]{1,0} %all-reduce.1317), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %subtract.1320 = f32[1024,512]{1,0:T(8,128)} subtract(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.233, f32[1024,512]{1,0} %multiply.1319), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %tuple.2184 = (f32[1024,512]{1,0:T(8,128)}) tuple(f32[1024,512]{1,0:T(8,128)} %subtract.1320), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2185 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[1024,512]{1,0:T(8,128)}) %tuple.2184), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1278 = f32[256]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
  %constant.1273 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
  %reduce.1274 = f32[256]{0} reduce(f32[128,256]{1,0} %select.1272, f32[] %constant.1273), dimensions={0}, to_apply=%region_0.108, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1277 = f32[256]{0} all-reduce(f32[256]{0} %reduce.1274), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.112, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_27"}
  %multiply.1279 = f32[256]{0} multiply(f32[256]{0} %broadcast.1278, f32[256]{0} %all-reduce.1277), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
  %subtract.1280 = f32[256]{0:T(256)} subtract(f32[256]{0:T(256)} %get-tuple-element.234, f32[256]{0} %multiply.1279), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
  %tuple.2186 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %subtract.1280), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2187 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.2186), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1300 = f32[512,256]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
  %dot.1285 = f32[512,256]{1,0} dot(f32[128,512]{1,0} %maximum.1147, f32[128,256]{1,0} %select.1272), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul_1"}
  %transpose.1286 = f32[512,256]{1,0} transpose(f32[512,256]{1,0} %dot.1285), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul_1"}
  %all-reduce.1299 = f32[512,256]{1,0} all-reduce(f32[512,256]{1,0} %transpose.1286), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.128, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_26"}
  %multiply.1301 = f32[512,256]{1,0} multiply(f32[512,256]{1,0} %broadcast.1300, f32[512,256]{1,0} %all-reduce.1299), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
  %subtract.1302 = f32[512,256]{1,0:T(8,128)} subtract(f32[512,256]{1,0:T(8,128)} %get-tuple-element.235, f32[512,256]{1,0} %multiply.1301), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
  %tuple.2188 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %subtract.1302), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2189 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.2188), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1264 = f32[1]{0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/bias/ResourceApplyGradientDescent"}
  %constant.1259 = f32[] constant(0), metadata={op_type="BiasAddGrad" op_name="while/training/gradients/while/top_mlp_layer_4/BiasAdd_grad/BiasAddGrad"}
  %reduce.1260 = f32[1]{0} reduce(f32[128,1]{1,0} %add.1258, f32[] %constant.1259), dimensions={0}, to_apply=%region_0.100, metadata={op_name="while/training/gradients/while/top_mlp_layer_4/BiasAdd_grad/BiasAddGrad"}
  %all-reduce.1263 = f32[1]{0} all-reduce(f32[1]{0} %reduce.1260), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.104, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_29"}
  %multiply.1265 = f32[1]{0} multiply(f32[1]{0} %broadcast.1264, f32[1]{0} %all-reduce.1263), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/bias/ResourceApplyGradientDescent"}
  %subtract.1266 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.236, f32[1]{0} %multiply.1265), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/bias/ResourceApplyGradientDescent"}
  %tuple.2190 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %subtract.1266), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2191 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.2190), index=0, metadata={op_name="XLA_Retvals"}
  %broadcast.1282 = f32[256,1]{1,0} broadcast(f32[]{:T(256)} %add.1041), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  %dot.1267 = f32[256,1]{1,0} dot(f32[128,256]{1,0} %maximum.1154, f32[128,1]{1,0} %add.1258), lhs_contracting_dims={0}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul_1"}
  %transpose.1268 = f32[256,1]{1,0} transpose(f32[256,1]{1,0} %dot.1267), dimensions={0,1}, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul_1"}
  %all-reduce.1281 = f32[256,1]{1,0} all-reduce(f32[256,1]{1,0} %transpose.1268), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.116, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_28"}
  %multiply.1283 = f32[256,1]{1,0} multiply(f32[256,1]{1,0} %broadcast.1282, f32[256,1]{1,0} %all-reduce.1281), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  %subtract.1284 = f32[256,1]{0,1:T(2,128)} subtract(f32[256,1]{0,1:T(2,128)} %get-tuple-element.237, f32[256,1]{1,0} %multiply.1283), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  %tuple.2192 = (f32[256,1]{0,1:T(2,128)}) tuple(f32[256,1]{0,1:T(2,128)} %subtract.1284), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2193 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[256,1]{0,1:T(2,128)}) %tuple.2192), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.2194 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %get-tuple-element.2131, s64[]{:T(256)} %get-tuple-element.2133, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.2135, f32[1]{0:T(256)} %get-tuple-element.2137, f32[1]{0:T(256)} %get-tuple-element.2139, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.2141, f32[1]{0:T(256)} %get-tuple-element.2143, f32[1]{0:T(256)} %get-tuple-element.2145, f32[1]{0:T(256)} %get-tuple-element.2147, f32[1]{0:T(256)} %get-tuple-element.2149, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.2151, f32[1]{0:T(256)} %get-tuple-element.2153, f32[1]{0:T(256)} %get-tuple-element.2155, f32[1]{0:T(256)} %get-tuple-element.2157, f32[1]{0:T(256)} %get-tuple-element.2159, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.2161, f32[512]{0:T(512)} %get-tuple-element.2163, f32[13,512]{1,0:T(8,128)} %get-tuple-element.2165, f32[256]{0:T(256)} %get-tuple-element.2167, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2169, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.2171, f32[256,128]{1,0:T(8,128)} %get-tuple-element.2173, f32[1024]{0:T(1024)} %get-tuple-element.2175, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.2177, f32[1024]{0:T(1024)} %get-tuple-element.2179, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.2181, f32[512]{0:T(512)} %get-tuple-element.2183, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.2185, f32[256]{0:T(256)} %get-tuple-element.2187, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2189, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.2191, f32[256,1]{0,1:T(2,128)} %get-tuple-element.2193), metadata={op_name="XLA_Retvals"}
}

%_functionalize_cond_10__.2195 (arg_tuple.2196: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> (pred[]) {
  %arg_tuple.2196 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.2198 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=1
  %get-tuple-element.2199 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=2
  %get-tuple-element.2200 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=3
  %get-tuple-element.2201 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=4
  %get-tuple-element.2202 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=5
  %get-tuple-element.2203 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=6
  %get-tuple-element.2204 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=7
  %get-tuple-element.2205 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=8
  %get-tuple-element.2206 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=9
  %get-tuple-element.2207 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=10
  %get-tuple-element.2208 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=11
  %get-tuple-element.2209 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=12
  %get-tuple-element.2210 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=13
  %get-tuple-element.2211 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=14
  %get-tuple-element.2212 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=15
  %get-tuple-element.2213 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=16
  %get-tuple-element.2214 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=17
  %get-tuple-element.2215 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=18
  %get-tuple-element.2216 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=19
  %get-tuple-element.2217 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=20
  %get-tuple-element.2218 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=21
  %get-tuple-element.2219 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=22
  %get-tuple-element.2220 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=23
  %get-tuple-element.2221 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=24
  %get-tuple-element.2222 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=25
  %get-tuple-element.2223 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=26
  %get-tuple-element.2224 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=27
  %get-tuple-element.2225 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=28
  %get-tuple-element.2226 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=29
  %get-tuple-element.2227 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=30
  %get-tuple-element.2228 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=31
  %constant.2229 = s32[] constant(3200), metadata={op_type="Less" op_name="while/Less"}
  %get-tuple-element.2197 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.2196), index=0
  %constant.2230 = s32[] constant(3200), metadata={op_type="Less" op_name="while/Less"}
  %compare.2231 = pred[] compare(s32[] %get-tuple-element.2197, s32[] %constant.2230), direction=LT, metadata={op_type="Less" op_name="while/Less"}
  ROOT %tuple.2232 = (pred[]) tuple(pred[] %compare.2231), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.2233 (inputs.2234: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> pred[] {
  %inputs.2234 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0)
  %call.2235 = (pred[]) call((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %inputs.2234), to_apply=%_functionalize_cond_10__.2195
  ROOT %get-tuple-element.2236 = pred[] get-tuple-element((pred[]) %call.2235), index=0
}

%_functionalize_body_9__.2237 (arg_tuple.2238: (s32[], s32[], f32[1363,128,2], s32[], f32[19656,128], /*index=5*/f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=10*/f32[256,128], f32[1024], f32[857,1024], f32[1024], f32[1024,1024], /*index=15*/f32[512], f32[1024,512], f32[256], f32[512,256], f32[1], /*index=20*/f32[256,1])) -> (s32[], s32[], f32[1363,128,2], s32[], f32[19656,128], /*index=5*/f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=10*/f32[256,128], f32[1024], f32[857,1024], f32[1024], f32[1024,1024], /*index=15*/f32[512], f32[1024,512], f32[256], f32[512,256], f32[1], /*index=20*/f32[256,1]) {
  %constant.2816 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape"}
  %constant.2818 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_1"}
  %constant.2820 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_10"}
  %constant.2822 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_11"}
  %constant.2824 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_12"}
  %constant.2826 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_2"}
  %constant.2828 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_3"}
  %constant.2830 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_4"}
  %constant.2832 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_5"}
  %constant.2834 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_6"}
  %constant.2836 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_7"}
  %constant.2838 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_8"}
  %constant.2840 = s32[3]{0} constant({128, 1, -1}), metadata={op_type="Reshape" op_name="Reshape_9"}
  %constant.2842 = s32[] constant(0), metadata={op_type="Slice" op_name="Slice"}
  %broadcast.2843 = s32[2]{0} broadcast(s32[] %constant.2842), dimensions={}, metadata={op_type="Slice" op_name="Slice"}
  %constant.2844 = s32[2]{0} constant({128, 1}), metadata={op_type="Slice" op_name="Slice"}
  %constant.2846 = s32[2]{0} constant({128, 1}), metadata={op_type="Slice" op_name="Slice"}
  %constant.2847 = s32[] constant(0), metadata={op_type="Slice" op_name="Slice_1"}
  %broadcast.2848 = s32[2]{0} broadcast(s32[] %constant.2847), dimensions={}, metadata={op_type="Slice" op_name="Slice_1"}
  %constant.2849 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="Slice_1"}
  %constant.2851 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="Slice_1"}
  %constant.2852 = s32[] constant(0), metadata={op_type="Slice" op_name="Slice_2"}
  %broadcast.2853 = s32[2]{0} broadcast(s32[] %constant.2852), dimensions={}, metadata={op_type="Slice" op_name="Slice_2"}
  %constant.2854 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="Slice_2"}
  %constant.2856 = s32[2]{0} constant({128, 13}), metadata={op_type="Slice" op_name="Slice_2"}
  %constant.2857 = s32[128,13]{1,0} constant({...}), metadata={op_type="AddV2" op_name="add_2"}
  %constant.2860 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_1"}
  %constant.2863 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %constant.2866 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice"}
  %broadcast.2867 = s32[3]{0} broadcast(s32[] %constant.2866), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice"}
  %constant.2868 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice"}
  %constant.2869 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice"}
  %broadcast.2870 = s32[3]{0} broadcast(s32[] %constant.2869), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice"}
  %constant.2873 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %broadcast.2874 = s32[3]{0} broadcast(s32[] %constant.2873), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %constant.2875 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %constant.2876 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %broadcast.2877 = s32[3]{0} broadcast(s32[] %constant.2876), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %constant.2880 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %broadcast.2881 = s32[3]{0} broadcast(s32[] %constant.2880), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %constant.2882 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %constant.2883 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %broadcast.2884 = s32[3]{0} broadcast(s32[] %constant.2883), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %constant.2887 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %broadcast.2888 = s32[3]{0} broadcast(s32[] %constant.2887), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %constant.2889 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %constant.2890 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %broadcast.2891 = s32[3]{0} broadcast(s32[] %constant.2890), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %constant.2894 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %broadcast.2895 = s32[3]{0} broadcast(s32[] %constant.2894), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %constant.2896 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %constant.2897 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %broadcast.2898 = s32[3]{0} broadcast(s32[] %constant.2897), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %constant.2901 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %broadcast.2902 = s32[3]{0} broadcast(s32[] %constant.2901), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %constant.2903 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %constant.2904 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %broadcast.2905 = s32[3]{0} broadcast(s32[] %constant.2904), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %constant.2908 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %broadcast.2909 = s32[3]{0} broadcast(s32[] %constant.2908), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %constant.2910 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %constant.2911 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %broadcast.2912 = s32[3]{0} broadcast(s32[] %constant.2911), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %constant.2915 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %broadcast.2916 = s32[3]{0} broadcast(s32[] %constant.2915), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %constant.2917 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %constant.2918 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %broadcast.2919 = s32[3]{0} broadcast(s32[] %constant.2918), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %constant.2922 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %broadcast.2923 = s32[3]{0} broadcast(s32[] %constant.2922), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %constant.2924 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %constant.2925 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %broadcast.2926 = s32[3]{0} broadcast(s32[] %constant.2925), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %constant.2929 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %broadcast.2930 = s32[3]{0} broadcast(s32[] %constant.2929), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %constant.2931 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %constant.2932 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %broadcast.2933 = s32[3]{0} broadcast(s32[] %constant.2932), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %constant.2936 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %broadcast.2937 = s32[3]{0} broadcast(s32[] %constant.2936), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %constant.2938 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %constant.2939 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %broadcast.2940 = s32[3]{0} broadcast(s32[] %constant.2939), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %constant.2943 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %broadcast.2944 = s32[3]{0} broadcast(s32[] %constant.2943), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %constant.2945 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %constant.2946 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %broadcast.2947 = s32[3]{0} broadcast(s32[] %constant.2946), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %constant.2950 = s32[] constant(0), metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %broadcast.2951 = s32[3]{0} broadcast(s32[] %constant.2950), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %constant.2952 = s32[3]{0} constant({0, 1, 0}), metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %constant.2953 = s32[] constant(1), metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %broadcast.2954 = s32[3]{0} broadcast(s32[] %constant.2953), dimensions={}, metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %constant.2979 = s32[] constant(-1), metadata={op_type="ConcatV2" op_name="concat"}
  %constant.2981 = s32[3]{0} constant({128, -1, 128}), metadata={op_type="Reshape" op_name="Reshape_13"}
  %constant.2983 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="concat_1"}
  %constant.2987 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="Select"}
  %constant.2988 = f32[] constant(0), metadata={op_type="Select" op_name="Select"}
  %broadcast.2989 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.2988), dimensions={}, metadata={op_type="Select" op_name="Select"}
  %constant.2994 = s32[2]{0} constant({128, 729}), metadata={op_type="Reshape" op_name="Reshape_14"}
  %constant.2996 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="concat_2"}
  %constant.3031 = s32[] constant(1), metadata={op_type="ConcatV2" op_name="concat_3"}
  %arg_tuple.2238 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.2239 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=0
  %constant.2861 = s32[] constant(1), metadata={op_type="AddV2" op_name="add_1"}
  %add.2862 = s32[] add(s32[] %get-tuple-element.2239, s32[] %constant.2861), metadata={op_type="AddV2" op_name="add_1"}
  %get-tuple-element.2240 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=1, sharding={maximal device=0}
  %constant.2864 = s32[] constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %add.2865 = s32[] add(s32[] %get-tuple-element.2240, s32[] %constant.2864), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %tuple.3041 = (s32[]) tuple(s32[] %add.2865), sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3042 = s32[] get-tuple-element((s32[]) %tuple.3041), index=0, sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.2241 = f32[1363,128,2]{2,1,0} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=2
  %after-all.2266 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %infeed.2267 = ((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}), token[]) infeed(token[] %after-all.2266), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %get-tuple-element.2268 = (f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) get-tuple-element(((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}), token[]) %infeed.2267), index=0, sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %get-tuple-element.2270 = f32[128,13]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.2268), index=1, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %slice.2850 = f32[128,13]{1,0} slice(f32[128,13]{0,1} %get-tuple-element.2270), slice={[0:128], [0:13]}, metadata={op_type="Slice" op_name="Slice_1"}
  %get-tuple-element.2245 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=6
  %dot.2958 = f32[128,512]{1,0} dot(f32[128,13]{1,0} %slice.2850, f32[13,512]{1,0:T(8,128)} %get-tuple-element.2245), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_0/MatMul"}
  %transpose.2959 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.2958), dimensions={0,1}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_0/MatMul"}
  %get-tuple-element.2244 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=5
  %broadcast.2960 = f32[128,512]{1,0} broadcast(f32[512]{0:T(512)} %get-tuple-element.2244), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_0/BiasAdd"}
  %add.2961 = f32[128,512]{1,0} add(f32[128,512]{1,0} %transpose.2959, f32[128,512]{1,0} %broadcast.2960), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_0/BiasAdd"}
  %constant.2962 = f32[] constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2963 = f32[128,512]{1,0} broadcast(f32[] %constant.2962), dimensions={}, metadata={op_name="bottom_mlp_layer_0/Relu"}
  %maximum.2964 = f32[128,512]{1,0} maximum(f32[128,512]{1,0} %add.2961, f32[128,512]{1,0} %broadcast.2963), metadata={op_name="bottom_mlp_layer_0/Relu"}
  %get-tuple-element.2247 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=8
  %dot.2965 = f32[128,256]{1,0} dot(f32[128,512]{1,0} %maximum.2964, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2247), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_1/MatMul"}
  %transpose.2966 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.2965), dimensions={0,1}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_1/MatMul"}
  %get-tuple-element.2246 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=7
  %broadcast.2967 = f32[128,256]{1,0} broadcast(f32[256]{0:T(256)} %get-tuple-element.2246), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_1/BiasAdd"}
  %add.2968 = f32[128,256]{1,0} add(f32[128,256]{1,0} %transpose.2966, f32[128,256]{1,0} %broadcast.2967), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_1/BiasAdd"}
  %constant.2969 = f32[] constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_1/Relu"}
  %broadcast.2970 = f32[128,256]{1,0} broadcast(f32[] %constant.2969), dimensions={}, metadata={op_name="bottom_mlp_layer_1/Relu"}
  %maximum.2971 = f32[128,256]{1,0} maximum(f32[128,256]{1,0} %add.2968, f32[128,256]{1,0} %broadcast.2970), metadata={op_name="bottom_mlp_layer_1/Relu"}
  %get-tuple-element.2249 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=10
  %dot.2972 = f32[128,128]{1,0} dot(f32[128,256]{1,0} %maximum.2971, f32[256,128]{1,0:T(8,128)} %get-tuple-element.2249), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_2/MatMul"}
  %transpose.2973 = f32[128,128]{1,0} transpose(f32[128,128]{1,0} %dot.2972), dimensions={0,1}, metadata={op_type="MatMul" op_name="bottom_mlp_layer_2/MatMul"}
  %get-tuple-element.2248 = f32[128]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=9
  %broadcast.2974 = f32[128,128]{1,0} broadcast(f32[128]{0:T(256)} %get-tuple-element.2248), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_2/BiasAdd"}
  %add.2975 = f32[128,128]{1,0} add(f32[128,128]{1,0} %transpose.2973, f32[128,128]{1,0} %broadcast.2974), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_2/BiasAdd"}
  %constant.2976 = f32[] constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_2/Relu"}
  %broadcast.2977 = f32[128,128]{1,0} broadcast(f32[] %constant.2976), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  %maximum.2978 = f32[128,128]{1,0} maximum(f32[128,128]{1,0} %add.2975, f32[128,128]{1,0} %broadcast.2977), metadata={op_name="bottom_mlp_layer_2/Relu"}
  %constant.2990 = pred[128,27,27]{2,1,0} constant({...}), metadata={op_type="Select" op_name="Select"}
  %constant.2991 = f32[] constant(0), metadata={op_type="Select" op_name="Select"}
  %broadcast.2992 = f32[128,27,27]{2,1,0} broadcast(f32[] %constant.2991), dimensions={}, metadata={op_type="Select" op_name="Select"}
  %after-all.2275 = token[] after-all(), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %infeed.2276 = ((f32[816,128]{1,0}, f32[952,128]{1,0}), token[]) infeed(token[] %after-all.2275), infeed_config="\n(\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\t\010\200\370\304\004\030\001 \001\"\007\010\"\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010\026\020\300\361\333\007", metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2277 = (f32[816,128]{1,0}, f32[952,128]{1,0}) get-tuple-element(((f32[816,128]{1,0}, f32[952,128]{1,0}), token[]) %infeed.2276), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2344 = f32[816,128]{1,0} get-tuple-element((f32[816,128]{1,0}, f32[952,128]{1,0}) %get-tuple-element.2277), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2345 = f32[136,768]{1,0} reshape(f32[816,128]{1,0} %get-tuple-element.2344), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2348 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2349 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2348), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2350 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2349), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2351 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2350), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %after-all.2272 = token[] after-all(), metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %infeed.2273 = (((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})), token[]) infeed(token[] %after-all.2272), infeed_config="\032_\nn\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\0104\020\300\361\333\007", metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %get-tuple-element.2274 = ((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})) get-tuple-element((((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})), token[]) %infeed.2273), index=0, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %get-tuple-element.2278 = (u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0})) %get-tuple-element.2274), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2279 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2280 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2281 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2282 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2279, f32[128]{0} %get-tuple-element.2280, u32[128]{0} %get-tuple-element.2281), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2283 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2282), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2353 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2283), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2356 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2353), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2372 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2356), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2371 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2373 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2372, u32[128,128]{1,0} %iota.2371), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2369 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2374 = f32[128,128]{1,0} broadcast(f32[] %constant.2369), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2370 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2375 = f32[128,128]{1,0} broadcast(f32[] %constant.2370), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2376 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2373, f32[128,128]{1,0} %broadcast.2374, f32[128,128]{1,0} %broadcast.2375), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2377 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2376), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2354 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2353), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2361 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2354), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2360 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2362 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2361, u32[128,8]{1,0} %iota.2360), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2358 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2363 = f32[128,8]{1,0} broadcast(f32[] %constant.2358), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2359 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2364 = f32[128,8]{1,0} broadcast(f32[] %constant.2359), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2365 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2362, f32[128,8]{1,0} %broadcast.2363, f32[128,8]{1,0} %broadcast.2364), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2352 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2350), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2357 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2352), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2366 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2365, f32[8,128]{1,0} %reshape.2357), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2355 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2353), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2367 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2355), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2368 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2366, f32[128,128]{1,0} %broadcast.2367), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2378 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2377, f32[128,128]{1,0} %multiply.2368), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2379 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2378), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2380 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2351, f32[128,128]{1,0} %reshape.2379), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2381 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2380), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2382 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2381), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2383 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2382), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2817 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2383), metadata={op_type="Reshape" op_name="Reshape"}
  %slice.2871 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2817), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice"}
  %reshape.2872 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2871), metadata={op_type="StridedSlice" op_name="strided_slice"}
  %get-tuple-element.2346 = f32[952,128]{1,0} get-tuple-element((f32[816,128]{1,0}, f32[952,128]{1,0}) %get-tuple-element.2277), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2347 = f32[136,896]{1,0} reshape(f32[952,128]{1,0} %get-tuple-element.2346), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2384 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2385 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2384), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2386 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2385), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2387 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2386), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2284 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=3, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2285 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=4, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2286 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=5, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2287 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2284, f32[128]{0} %get-tuple-element.2285, u32[128]{0} %get-tuple-element.2286), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2288 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2287), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2389 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2288), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2392 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2389), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2408 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2392), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2407 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2409 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2408, u32[128,128]{1,0} %iota.2407), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2405 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2410 = f32[128,128]{1,0} broadcast(f32[] %constant.2405), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2406 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2411 = f32[128,128]{1,0} broadcast(f32[] %constant.2406), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2412 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2409, f32[128,128]{1,0} %broadcast.2410, f32[128,128]{1,0} %broadcast.2411), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2413 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2412), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2390 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2389), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2397 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2390), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2396 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2398 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2397, u32[128,8]{1,0} %iota.2396), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2394 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2399 = f32[128,8]{1,0} broadcast(f32[] %constant.2394), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2395 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2400 = f32[128,8]{1,0} broadcast(f32[] %constant.2395), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2401 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2398, f32[128,8]{1,0} %broadcast.2399, f32[128,8]{1,0} %broadcast.2400), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2388 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2386), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2393 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2388), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2402 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2401, f32[8,128]{1,0} %reshape.2393), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2391 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2389), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2403 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2391), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2404 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2402, f32[128,128]{1,0} %broadcast.2403), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2414 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2413, f32[128,128]{1,0} %multiply.2404), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2415 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2414), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2416 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2387, f32[128,128]{1,0} %reshape.2415), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2417 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2416), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2418 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2417), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2419 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2418), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2819 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2419), metadata={op_type="Reshape" op_name="Reshape_1"}
  %slice.2878 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2819), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %reshape.2879 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2878), metadata={op_type="StridedSlice" op_name="strided_slice_1"}
  %slice.2420 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2421 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2420), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2422 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2421), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2423 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2422), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2289 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=6, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2290 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=7, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2291 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=8, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2292 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2289, f32[128]{0} %get-tuple-element.2290, u32[128]{0} %get-tuple-element.2291), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2293 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2292), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2425 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2293), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2428 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2425), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2444 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2428), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2443 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2445 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2444, u32[128,128]{1,0} %iota.2443), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2441 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2446 = f32[128,128]{1,0} broadcast(f32[] %constant.2441), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2442 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2447 = f32[128,128]{1,0} broadcast(f32[] %constant.2442), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2448 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2445, f32[128,128]{1,0} %broadcast.2446, f32[128,128]{1,0} %broadcast.2447), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2449 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2448), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2426 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2425), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2433 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2426), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2432 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2434 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2433, u32[128,8]{1,0} %iota.2432), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2430 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2435 = f32[128,8]{1,0} broadcast(f32[] %constant.2430), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2431 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2436 = f32[128,8]{1,0} broadcast(f32[] %constant.2431), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2437 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2434, f32[128,8]{1,0} %broadcast.2435, f32[128,8]{1,0} %broadcast.2436), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2424 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2422), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2429 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2424), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2438 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2437, f32[8,128]{1,0} %reshape.2429), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2427 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2425), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2439 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2427), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2440 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2438, f32[128,128]{1,0} %broadcast.2439), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2450 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2449, f32[128,128]{1,0} %multiply.2440), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2451 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2450), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2452 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2423, f32[128,128]{1,0} %reshape.2451), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2453 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2452), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2454 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2453), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2455 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2454), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2827 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2455), metadata={op_type="Reshape" op_name="Reshape_2"}
  %slice.2906 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2827), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %reshape.2907 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2906), metadata={op_type="StridedSlice" op_name="strided_slice_2"}
  %slice.2456 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2457 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2456), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2458 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2457), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2459 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2458), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2294 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=9, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2295 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=10, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2296 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=11, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2297 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2294, f32[128]{0} %get-tuple-element.2295, u32[128]{0} %get-tuple-element.2296), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2298 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2297), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2461 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2298), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2464 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2461), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2480 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2464), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2479 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2481 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2480, u32[128,128]{1,0} %iota.2479), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2477 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2482 = f32[128,128]{1,0} broadcast(f32[] %constant.2477), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2478 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2483 = f32[128,128]{1,0} broadcast(f32[] %constant.2478), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2484 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2481, f32[128,128]{1,0} %broadcast.2482, f32[128,128]{1,0} %broadcast.2483), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2485 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2484), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2462 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2461), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2469 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2462), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2468 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2470 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2469, u32[128,8]{1,0} %iota.2468), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2466 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2471 = f32[128,8]{1,0} broadcast(f32[] %constant.2466), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2467 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2472 = f32[128,8]{1,0} broadcast(f32[] %constant.2467), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2473 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2470, f32[128,8]{1,0} %broadcast.2471, f32[128,8]{1,0} %broadcast.2472), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2460 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2458), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2465 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2460), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2474 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2473, f32[8,128]{1,0} %reshape.2465), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2463 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2461), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2475 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2463), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2476 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2474, f32[128,128]{1,0} %broadcast.2475), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2486 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2485, f32[128,128]{1,0} %multiply.2476), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2487 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2486), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2488 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2459, f32[128,128]{1,0} %reshape.2487), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2489 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2488), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2490 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2489), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2491 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2490), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2829 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2491), metadata={op_type="Reshape" op_name="Reshape_3"}
  %slice.2913 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2829), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %reshape.2914 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2913), metadata={op_type="StridedSlice" op_name="strided_slice_3"}
  %slice.2492 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2493 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2492), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2494 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2493), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2495 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2494), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2299 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=12, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2300 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=13, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2301 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=14, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2302 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2299, f32[128]{0} %get-tuple-element.2300, u32[128]{0} %get-tuple-element.2301), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2303 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2302), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2497 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2303), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2500 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2497), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2516 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2500), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2515 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2517 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2516, u32[128,128]{1,0} %iota.2515), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2513 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2518 = f32[128,128]{1,0} broadcast(f32[] %constant.2513), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2514 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2519 = f32[128,128]{1,0} broadcast(f32[] %constant.2514), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2520 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2517, f32[128,128]{1,0} %broadcast.2518, f32[128,128]{1,0} %broadcast.2519), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2521 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2520), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2498 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2497), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2505 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2498), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2504 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2506 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2505, u32[128,8]{1,0} %iota.2504), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2502 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2507 = f32[128,8]{1,0} broadcast(f32[] %constant.2502), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2503 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2508 = f32[128,8]{1,0} broadcast(f32[] %constant.2503), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2509 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2506, f32[128,8]{1,0} %broadcast.2507, f32[128,8]{1,0} %broadcast.2508), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2496 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2494), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2501 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2496), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2510 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2509, f32[8,128]{1,0} %reshape.2501), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2499 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2497), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2511 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2499), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2512 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2510, f32[128,128]{1,0} %broadcast.2511), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2522 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2521, f32[128,128]{1,0} %multiply.2512), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2523 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2522), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2524 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2495, f32[128,128]{1,0} %reshape.2523), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2525 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2524), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2526 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2525), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2527 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2526), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2831 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2527), metadata={op_type="Reshape" op_name="Reshape_4"}
  %slice.2920 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2831), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %reshape.2921 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2920), metadata={op_type="StridedSlice" op_name="strided_slice_4"}
  %slice.2528 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2529 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2528), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2530 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2529), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2531 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2530), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2304 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=15, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2305 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=16, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2306 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=17, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2307 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2304, f32[128]{0} %get-tuple-element.2305, u32[128]{0} %get-tuple-element.2306), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2308 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2307), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2533 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2308), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2536 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2533), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2552 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2536), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2551 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2553 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2552, u32[128,128]{1,0} %iota.2551), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2549 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2554 = f32[128,128]{1,0} broadcast(f32[] %constant.2549), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2550 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2555 = f32[128,128]{1,0} broadcast(f32[] %constant.2550), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2556 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2553, f32[128,128]{1,0} %broadcast.2554, f32[128,128]{1,0} %broadcast.2555), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2557 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2556), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2534 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2533), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2541 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2534), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2540 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2542 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2541, u32[128,8]{1,0} %iota.2540), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2538 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2543 = f32[128,8]{1,0} broadcast(f32[] %constant.2538), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2539 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2544 = f32[128,8]{1,0} broadcast(f32[] %constant.2539), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2545 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2542, f32[128,8]{1,0} %broadcast.2543, f32[128,8]{1,0} %broadcast.2544), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2532 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2530), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2537 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2532), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2546 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2545, f32[8,128]{1,0} %reshape.2537), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2535 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2533), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2547 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2535), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2548 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2546, f32[128,128]{1,0} %broadcast.2547), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2558 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2557, f32[128,128]{1,0} %multiply.2548), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2559 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2558), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2560 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2531, f32[128,128]{1,0} %reshape.2559), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2561 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2560), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2562 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2561), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2563 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2562), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2833 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2563), metadata={op_type="Reshape" op_name="Reshape_5"}
  %slice.2927 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2833), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %reshape.2928 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2927), metadata={op_type="StridedSlice" op_name="strided_slice_5"}
  %slice.2564 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2565 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2564), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2566 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2565), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2567 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2566), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2309 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=18, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2310 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=19, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2311 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=20, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2312 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2309, f32[128]{0} %get-tuple-element.2310, u32[128]{0} %get-tuple-element.2311), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2313 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2312), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2569 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2313), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2572 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2569), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2588 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2572), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2587 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2589 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2588, u32[128,128]{1,0} %iota.2587), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2585 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2590 = f32[128,128]{1,0} broadcast(f32[] %constant.2585), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2586 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2591 = f32[128,128]{1,0} broadcast(f32[] %constant.2586), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2592 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2589, f32[128,128]{1,0} %broadcast.2590, f32[128,128]{1,0} %broadcast.2591), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2593 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2592), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2570 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2569), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2577 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2570), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2576 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2578 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2577, u32[128,8]{1,0} %iota.2576), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2574 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2579 = f32[128,8]{1,0} broadcast(f32[] %constant.2574), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2575 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2580 = f32[128,8]{1,0} broadcast(f32[] %constant.2575), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2581 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2578, f32[128,8]{1,0} %broadcast.2579, f32[128,8]{1,0} %broadcast.2580), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2568 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2566), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2573 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2568), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2582 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2581, f32[8,128]{1,0} %reshape.2573), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2571 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2569), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2583 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2571), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2584 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2582, f32[128,128]{1,0} %broadcast.2583), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2594 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2593, f32[128,128]{1,0} %multiply.2584), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2595 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2594), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2596 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2567, f32[128,128]{1,0} %reshape.2595), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2597 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2596), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2598 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2597), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2599 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2598), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2835 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2599), metadata={op_type="Reshape" op_name="Reshape_6"}
  %slice.2934 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2835), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %reshape.2935 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2934), metadata={op_type="StridedSlice" op_name="strided_slice_6"}
  %slice.2600 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2601 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2600), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2602 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2601), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2603 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2602), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2314 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=21, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2315 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=22, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2316 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=23, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2317 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2314, f32[128]{0} %get-tuple-element.2315, u32[128]{0} %get-tuple-element.2316), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2318 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2317), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2605 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2318), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2608 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2605), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2624 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2608), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2623 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2625 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2624, u32[128,128]{1,0} %iota.2623), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2621 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2626 = f32[128,128]{1,0} broadcast(f32[] %constant.2621), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2622 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2627 = f32[128,128]{1,0} broadcast(f32[] %constant.2622), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2628 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2625, f32[128,128]{1,0} %broadcast.2626, f32[128,128]{1,0} %broadcast.2627), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2629 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2628), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2606 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2605), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2613 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2606), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2612 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2614 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2613, u32[128,8]{1,0} %iota.2612), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2610 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2615 = f32[128,8]{1,0} broadcast(f32[] %constant.2610), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2611 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2616 = f32[128,8]{1,0} broadcast(f32[] %constant.2611), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2617 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2614, f32[128,8]{1,0} %broadcast.2615, f32[128,8]{1,0} %broadcast.2616), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2604 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2602), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2609 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2604), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2618 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2617, f32[8,128]{1,0} %reshape.2609), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2607 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2605), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2619 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2607), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2620 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2618, f32[128,128]{1,0} %broadcast.2619), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2630 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2629, f32[128,128]{1,0} %multiply.2620), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2631 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2630), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2632 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2603, f32[128,128]{1,0} %reshape.2631), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2633 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2632), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2634 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2633), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2635 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2634), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2837 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2635), metadata={op_type="Reshape" op_name="Reshape_7"}
  %slice.2941 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2837), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %reshape.2942 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2941), metadata={op_type="StridedSlice" op_name="strided_slice_7"}
  %slice.2636 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2637 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2636), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2638 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2637), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2639 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2638), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2319 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=24, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2320 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=25, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2321 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=26, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2322 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2319, f32[128]{0} %get-tuple-element.2320, u32[128]{0} %get-tuple-element.2321), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2323 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2322), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2641 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2323), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2644 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2641), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2660 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2644), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2659 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2661 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2660, u32[128,128]{1,0} %iota.2659), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2657 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2662 = f32[128,128]{1,0} broadcast(f32[] %constant.2657), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2658 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2663 = f32[128,128]{1,0} broadcast(f32[] %constant.2658), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2664 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2661, f32[128,128]{1,0} %broadcast.2662, f32[128,128]{1,0} %broadcast.2663), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2665 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2664), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2642 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2641), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2649 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2642), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2648 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2650 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2649, u32[128,8]{1,0} %iota.2648), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2646 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2651 = f32[128,8]{1,0} broadcast(f32[] %constant.2646), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2647 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2652 = f32[128,8]{1,0} broadcast(f32[] %constant.2647), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2653 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2650, f32[128,8]{1,0} %broadcast.2651, f32[128,8]{1,0} %broadcast.2652), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2640 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2638), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2645 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2640), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2654 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2653, f32[8,128]{1,0} %reshape.2645), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2643 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2641), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2655 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2643), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2656 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2654, f32[128,128]{1,0} %broadcast.2655), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2666 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2665, f32[128,128]{1,0} %multiply.2656), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2667 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2666), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2668 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2639, f32[128,128]{1,0} %reshape.2667), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2669 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2668), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2670 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2669), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2671 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2670), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2839 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2671), metadata={op_type="Reshape" op_name="Reshape_8"}
  %slice.2948 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2839), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %reshape.2949 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2948), metadata={op_type="StridedSlice" op_name="strided_slice_8"}
  %slice.2672 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2673 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2672), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2674 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2673), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2675 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2674), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2324 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=27, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2325 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=28, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2326 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=29, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2327 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2324, f32[128]{0} %get-tuple-element.2325, u32[128]{0} %get-tuple-element.2326), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2328 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2327), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2677 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2328), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2680 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2677), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2696 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2680), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2695 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2697 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2696, u32[128,128]{1,0} %iota.2695), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2693 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2698 = f32[128,128]{1,0} broadcast(f32[] %constant.2693), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2694 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2699 = f32[128,128]{1,0} broadcast(f32[] %constant.2694), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2700 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2697, f32[128,128]{1,0} %broadcast.2698, f32[128,128]{1,0} %broadcast.2699), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2701 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2700), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2678 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2677), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2685 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2678), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2684 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2686 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2685, u32[128,8]{1,0} %iota.2684), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2682 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2687 = f32[128,8]{1,0} broadcast(f32[] %constant.2682), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2683 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2688 = f32[128,8]{1,0} broadcast(f32[] %constant.2683), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2689 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2686, f32[128,8]{1,0} %broadcast.2687, f32[128,8]{1,0} %broadcast.2688), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2676 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2674), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2681 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2676), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2690 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2689, f32[8,128]{1,0} %reshape.2681), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2679 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2677), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2691 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2679), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2692 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2690, f32[128,128]{1,0} %broadcast.2691), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2702 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2701, f32[128,128]{1,0} %multiply.2692), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2703 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2702), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2704 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2675, f32[128,128]{1,0} %reshape.2703), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2705 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2704), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2706 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2705), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2707 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2706), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2841 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2707), metadata={op_type="Reshape" op_name="Reshape_9"}
  %slice.2955 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2841), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %reshape.2956 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2955), metadata={op_type="StridedSlice" op_name="strided_slice_9"}
  %slice.2708 = f32[136,128]{1,0} slice(f32[136,768]{1,0} %reshape.2345), slice={[0:136], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2709 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2708), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2710 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2709), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2711 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2710), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2329 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=30, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2330 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=31, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2331 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=32, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2332 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2329, f32[128]{0} %get-tuple-element.2330, u32[128]{0} %get-tuple-element.2331), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2333 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2332), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2713 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2333), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2716 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2713), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2732 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2716), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2731 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2733 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2732, u32[128,128]{1,0} %iota.2731), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2729 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2734 = f32[128,128]{1,0} broadcast(f32[] %constant.2729), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2730 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2735 = f32[128,128]{1,0} broadcast(f32[] %constant.2730), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2736 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2733, f32[128,128]{1,0} %broadcast.2734, f32[128,128]{1,0} %broadcast.2735), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2737 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2736), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2714 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2713), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2721 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2714), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2720 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2722 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2721, u32[128,8]{1,0} %iota.2720), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2718 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2723 = f32[128,8]{1,0} broadcast(f32[] %constant.2718), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2719 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2724 = f32[128,8]{1,0} broadcast(f32[] %constant.2719), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2725 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2722, f32[128,8]{1,0} %broadcast.2723, f32[128,8]{1,0} %broadcast.2724), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2712 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2710), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2717 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2712), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2726 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2725, f32[8,128]{1,0} %reshape.2717), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2715 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2713), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2727 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2715), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2728 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2726, f32[128,128]{1,0} %broadcast.2727), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2738 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2737, f32[128,128]{1,0} %multiply.2728), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2739 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2738), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2740 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2711, f32[128,128]{1,0} %reshape.2739), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2741 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2740), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2742 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2741), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2743 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2742), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2821 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2743), metadata={op_type="Reshape" op_name="Reshape_10"}
  %slice.2885 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2821), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %reshape.2886 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2885), metadata={op_type="StridedSlice" op_name="strided_slice_10"}
  %slice.2744 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2745 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2744), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2746 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2745), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2747 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2746), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2334 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=33, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2335 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=34, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2336 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=35, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2337 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2334, f32[128]{0} %get-tuple-element.2335, u32[128]{0} %get-tuple-element.2336), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2338 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2337), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2749 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2338), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2752 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2749), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2768 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2752), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2767 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2769 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2768, u32[128,128]{1,0} %iota.2767), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2765 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2770 = f32[128,128]{1,0} broadcast(f32[] %constant.2765), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2766 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2771 = f32[128,128]{1,0} broadcast(f32[] %constant.2766), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2772 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2769, f32[128,128]{1,0} %broadcast.2770, f32[128,128]{1,0} %broadcast.2771), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2773 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2772), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2750 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2749), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2757 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2750), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2756 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2758 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2757, u32[128,8]{1,0} %iota.2756), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2754 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2759 = f32[128,8]{1,0} broadcast(f32[] %constant.2754), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2755 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2760 = f32[128,8]{1,0} broadcast(f32[] %constant.2755), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2761 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2758, f32[128,8]{1,0} %broadcast.2759, f32[128,8]{1,0} %broadcast.2760), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2748 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2746), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2753 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2748), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2762 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2761, f32[8,128]{1,0} %reshape.2753), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2751 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2749), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2763 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2751), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2764 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2762, f32[128,128]{1,0} %broadcast.2763), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2774 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2773, f32[128,128]{1,0} %multiply.2764), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2775 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2774), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2776 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2747, f32[128,128]{1,0} %reshape.2775), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2777 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2776), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2778 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2777), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2779 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2778), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2823 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2779), metadata={op_type="Reshape" op_name="Reshape_11"}
  %slice.2892 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2823), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %reshape.2893 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2892), metadata={op_type="StridedSlice" op_name="strided_slice_11"}
  %slice.2780 = f32[136,128]{1,0} slice(f32[136,896]{1,0} %reshape.2347), slice={[0:136], [768:896]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2781 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %slice.2780), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2782 = f32[136,128]{1,0} concatenate(f32[136,128]{1,0} %concatenate.2781), dimensions={1}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2783 = f32[128,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2782), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2339 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=36, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2340 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=37, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2341 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=5*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=10*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=15*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=20*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, /*index=25*/f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}, /*index=30*/u32[128]{0}, f32[128]{0}, u32[128]{0}, u32[128]{0}, f32[128]{0}, /*index=35*/u32[128]{0}, u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2278), index=38, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2342 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) tuple(u32[128]{0} %get-tuple-element.2339, f32[128]{0} %get-tuple-element.2340, u32[128]{0} %get-tuple-element.2341), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %tuple.2343 = ((u32[128]{0}, f32[128]{0}, u32[128]{0})) tuple((u32[128]{0}, f32[128]{0}, u32[128]{0}) %tuple.2342), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2785 = (u32[128]{0}, f32[128]{0}, u32[128]{0}) get-tuple-element(((u32[128]{0}, f32[128]{0}, u32[128]{0})) %tuple.2343), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2788 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2785), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2804 = u32[128,128]{1,0} broadcast(u32[128]{0} %get-tuple-element.2788), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2803 = u32[128,128]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2805 = pred[128,128]{1,0} compare(u32[128,128]{1,0} %broadcast.2804, u32[128,128]{1,0} %iota.2803), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2801 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2806 = f32[128,128]{1,0} broadcast(f32[] %constant.2801), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2802 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2807 = f32[128,128]{1,0} broadcast(f32[] %constant.2802), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2808 = f32[128,128]{1,0} select(pred[128,128]{1,0} %compare.2805, f32[128,128]{1,0} %broadcast.2806, f32[128,128]{1,0} %broadcast.2807), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %transpose.2809 = f32[128,128]{0,1} transpose(f32[128,128]{1,0} %select.2808), dimensions={1,0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2786 = u32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2785), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2793 = u32[128,8]{1,0} broadcast(u32[128]{0} %get-tuple-element.2786), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.2792 = u32[128,8]{1,0} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.2794 = pred[128,8]{1,0} compare(u32[128,8]{1,0} %broadcast.2793, u32[128,8]{1,0} %iota.2792), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2790 = f32[] constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2795 = f32[128,8]{1,0} broadcast(f32[] %constant.2790), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2791 = f32[] constant(0), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2796 = f32[128,8]{1,0} broadcast(f32[] %constant.2791), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %select.2797 = f32[128,8]{1,0} select(pred[128,8]{1,0} %compare.2794, f32[128,8]{1,0} %broadcast.2795, f32[128,8]{1,0} %broadcast.2796), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2784 = f32[8,128]{1,0} slice(f32[136,128]{1,0} %concatenate.2782), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2789 = f32[8,128]{1,0} reshape(f32[8,128]{1,0} %slice.2784), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2798 = f32[128,128]{1,0} dot(f32[128,8]{1,0} %select.2797, f32[8,128]{1,0} %reshape.2789), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2787 = f32[128]{0} get-tuple-element((u32[128]{0}, f32[128]{0}, u32[128]{0}) %get-tuple-element.2785), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2799 = f32[128,128]{1,0} broadcast(f32[128]{0} %get-tuple-element.2787), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %multiply.2800 = f32[128,128]{1,0} multiply(f32[128,128]{1,0} %dot.2798, f32[128,128]{1,0} %broadcast.2799), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %dot.2810 = f32[128,128]{1,0} dot(f32[128,128]{0,1} %transpose.2809, f32[128,128]{1,0} %multiply.2800), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2811 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %dot.2810), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %add.2812 = f32[128,128]{1,0} add(f32[128,128]{1,0} %slice.2783, f32[128,128]{1,0} %reshape.2811), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %concatenate.2813 = f32[128,128]{1,0} concatenate(f32[128,128]{1,0} %add.2812), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2814 = f32[128,128]{1,0} reshape(f32[128,128]{1,0} %concatenate.2813), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %slice.2815 = f32[128,128]{1,0} slice(f32[128,128]{1,0} %reshape.2814), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.2825 = f32[128,1,128]{2,1,0} reshape(f32[128,128]{1,0} %slice.2815), metadata={op_type="Reshape" op_name="Reshape_12"}
  %slice.2899 = f32[128,1,128]{2,1,0} slice(f32[128,1,128]{2,1,0} %reshape.2825), slice={[0:128], [0:1], [0:128]}, metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %reshape.2900 = f32[128,128]{1,0} reshape(f32[128,1,128]{2,1,0} %slice.2899), metadata={op_type="StridedSlice" op_name="strided_slice_12"}
  %concatenate.2980 = f32[128,1792]{1,0} concatenate(f32[128,128]{1,0} %maximum.2978, f32[128,128]{1,0} %reshape.2872, f32[128,128]{1,0} %reshape.2879, f32[128,128]{1,0} %reshape.2907, f32[128,128]{1,0} %reshape.2914, /*index=5*/f32[128,128]{1,0} %reshape.2921, f32[128,128]{1,0} %reshape.2928, f32[128,128]{1,0} %reshape.2935, f32[128,128]{1,0} %reshape.2942, f32[128,128]{1,0} %reshape.2949, /*index=10*/f32[128,128]{1,0} %reshape.2956, f32[128,128]{1,0} %reshape.2886, f32[128,128]{1,0} %reshape.2893, f32[128,128]{1,0} %reshape.2900), dimensions={1}, metadata={op_type="ConcatV2" op_name="concat"}
  %reshape.2982 = f32[128,14,128]{2,1,0} reshape(f32[128,1792]{1,0} %concatenate.2980), metadata={op_type="Reshape" op_name="Reshape_13"}
  %get-tuple-element.2243 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=4
  %constant.2858 = s32[128,13]{1,0} constant({...}), metadata={op_type="AddV2" op_name="add_2"}
  %get-tuple-element.2271 = s32[128,13]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.2268), index=2, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %slice.2855 = s32[128,13]{1,0} slice(s32[128,13]{0,1} %get-tuple-element.2271), slice={[0:128], [0:13]}, metadata={op_type="Slice" op_name="Slice_2"}
  %add.2859 = s32[128,13]{1,0} add(s32[128,13]{1,0} %constant.2858, s32[128,13]{1,0} %slice.2855), metadata={op_type="AddV2" op_name="add_2"}
  %gather.2957 = f32[128,13,128]{2,1,0} gather(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.2243, s32[128,13]{1,0} %add.2859), offset_dims={2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=2, slice_sizes={1,128}, metadata={op_type="ResourceGather" op_name="Gather"}
  %concatenate.2984 = f32[128,27,128]{2,1,0} concatenate(f32[128,14,128]{2,1,0} %reshape.2982, f32[128,13,128]{2,1,0} %gather.2957), dimensions={1}, metadata={op_type="ConcatV2" op_name="concat_1"}
  %dot.2985 = f32[128,27,27]{2,1,0} dot(f32[128,27,128]{2,1,0} %concatenate.2984, f32[128,27,128]{2,1,0} %concatenate.2984), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={0}, rhs_contracting_dims={2}, metadata={op_type="BatchMatMulV2" op_name="MatMul"}
  %transpose.2986 = f32[128,27,27]{2,1,0} transpose(f32[128,27,27]{2,1,0} %dot.2985), dimensions={0,1,2}, metadata={op_type="BatchMatMulV2" op_name="MatMul"}
  %select.2993 = f32[128,27,27]{2,1,0} select(pred[128,27,27]{2,1,0} %constant.2990, f32[128,27,27]{2,1,0} %broadcast.2992, f32[128,27,27]{2,1,0} %transpose.2986), metadata={op_name="Select"}
  %reshape.2995 = f32[128,729]{1,0} reshape(f32[128,27,27]{2,1,0} %select.2993), metadata={op_type="Reshape" op_name="Reshape_14"}
  %concatenate.2997 = f32[128,857]{1,0} concatenate(f32[128,128]{1,0} %maximum.2978, f32[128,729]{1,0} %reshape.2995), dimensions={1}, metadata={op_type="ConcatV2" op_name="concat_2"}
  %get-tuple-element.2251 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=12
  %dot.2998 = f32[128,1024]{1,0} dot(f32[128,857]{1,0} %concatenate.2997, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.2251), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="top_mlp_layer_0/MatMul"}
  %transpose.2999 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.2998), dimensions={0,1}, metadata={op_type="MatMul" op_name="top_mlp_layer_0/MatMul"}
  %get-tuple-element.2250 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=11
  %broadcast.3000 = f32[128,1024]{1,0} broadcast(f32[1024]{0:T(1024)} %get-tuple-element.2250), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_0/BiasAdd"}
  %add.3001 = f32[128,1024]{1,0} add(f32[128,1024]{1,0} %transpose.2999, f32[128,1024]{1,0} %broadcast.3000), metadata={op_type="BiasAdd" op_name="top_mlp_layer_0/BiasAdd"}
  %constant.3002 = f32[] constant(0), metadata={op_type="Relu" op_name="top_mlp_layer_0/Relu"}
  %broadcast.3003 = f32[128,1024]{1,0} broadcast(f32[] %constant.3002), dimensions={}, metadata={op_name="top_mlp_layer_0/Relu"}
  %maximum.3004 = f32[128,1024]{1,0} maximum(f32[128,1024]{1,0} %add.3001, f32[128,1024]{1,0} %broadcast.3003), metadata={op_name="top_mlp_layer_0/Relu"}
  %get-tuple-element.2253 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=14
  %dot.3005 = f32[128,1024]{1,0} dot(f32[128,1024]{1,0} %maximum.3004, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.2253), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="top_mlp_layer_1/MatMul"}
  %transpose.3006 = f32[128,1024]{1,0} transpose(f32[128,1024]{1,0} %dot.3005), dimensions={0,1}, metadata={op_type="MatMul" op_name="top_mlp_layer_1/MatMul"}
  %get-tuple-element.2252 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=13
  %broadcast.3007 = f32[128,1024]{1,0} broadcast(f32[1024]{0:T(1024)} %get-tuple-element.2252), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_1/BiasAdd"}
  %add.3008 = f32[128,1024]{1,0} add(f32[128,1024]{1,0} %transpose.3006, f32[128,1024]{1,0} %broadcast.3007), metadata={op_type="BiasAdd" op_name="top_mlp_layer_1/BiasAdd"}
  %constant.3009 = f32[] constant(0), metadata={op_type="Relu" op_name="top_mlp_layer_1/Relu"}
  %broadcast.3010 = f32[128,1024]{1,0} broadcast(f32[] %constant.3009), dimensions={}, metadata={op_name="top_mlp_layer_1/Relu"}
  %maximum.3011 = f32[128,1024]{1,0} maximum(f32[128,1024]{1,0} %add.3008, f32[128,1024]{1,0} %broadcast.3010), metadata={op_name="top_mlp_layer_1/Relu"}
  %get-tuple-element.2255 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=16
  %dot.3012 = f32[128,512]{1,0} dot(f32[128,1024]{1,0} %maximum.3011, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.2255), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="top_mlp_layer_2/MatMul"}
  %transpose.3013 = f32[128,512]{1,0} transpose(f32[128,512]{1,0} %dot.3012), dimensions={0,1}, metadata={op_type="MatMul" op_name="top_mlp_layer_2/MatMul"}
  %get-tuple-element.2254 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=15
  %broadcast.3014 = f32[128,512]{1,0} broadcast(f32[512]{0:T(512)} %get-tuple-element.2254), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_2/BiasAdd"}
  %add.3015 = f32[128,512]{1,0} add(f32[128,512]{1,0} %transpose.3013, f32[128,512]{1,0} %broadcast.3014), metadata={op_type="BiasAdd" op_name="top_mlp_layer_2/BiasAdd"}
  %constant.3016 = f32[] constant(0), metadata={op_type="Relu" op_name="top_mlp_layer_2/Relu"}
  %broadcast.3017 = f32[128,512]{1,0} broadcast(f32[] %constant.3016), dimensions={}, metadata={op_name="top_mlp_layer_2/Relu"}
  %maximum.3018 = f32[128,512]{1,0} maximum(f32[128,512]{1,0} %add.3015, f32[128,512]{1,0} %broadcast.3017), metadata={op_name="top_mlp_layer_2/Relu"}
  %get-tuple-element.2257 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=18
  %dot.3019 = f32[128,256]{1,0} dot(f32[128,512]{1,0} %maximum.3018, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2257), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="top_mlp_layer_3/MatMul"}
  %transpose.3020 = f32[128,256]{1,0} transpose(f32[128,256]{1,0} %dot.3019), dimensions={0,1}, metadata={op_type="MatMul" op_name="top_mlp_layer_3/MatMul"}
  %get-tuple-element.2256 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=17
  %broadcast.3021 = f32[128,256]{1,0} broadcast(f32[256]{0:T(256)} %get-tuple-element.2256), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_3/BiasAdd"}
  %add.3022 = f32[128,256]{1,0} add(f32[128,256]{1,0} %transpose.3020, f32[128,256]{1,0} %broadcast.3021), metadata={op_type="BiasAdd" op_name="top_mlp_layer_3/BiasAdd"}
  %constant.3023 = f32[] constant(0), metadata={op_type="Relu" op_name="top_mlp_layer_3/Relu"}
  %broadcast.3024 = f32[128,256]{1,0} broadcast(f32[] %constant.3023), dimensions={}, metadata={op_name="top_mlp_layer_3/Relu"}
  %maximum.3025 = f32[128,256]{1,0} maximum(f32[128,256]{1,0} %add.3022, f32[128,256]{1,0} %broadcast.3024), metadata={op_name="top_mlp_layer_3/Relu"}
  %get-tuple-element.2259 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=20
  %dot.3026 = f32[128,1]{1,0} dot(f32[128,256]{1,0} %maximum.3025, f32[256,1]{0,1:T(2,128)} %get-tuple-element.2259), lhs_contracting_dims={1}, rhs_contracting_dims={0}, metadata={op_type="MatMul" op_name="top_mlp_layer_4/MatMul"}
  %transpose.3027 = f32[128,1]{1,0} transpose(f32[128,1]{1,0} %dot.3026), dimensions={0,1}, metadata={op_type="MatMul" op_name="top_mlp_layer_4/MatMul"}
  %get-tuple-element.2258 = f32[1]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=19
  %broadcast.3028 = f32[128,1]{1,0} broadcast(f32[1]{0:T(256)} %get-tuple-element.2258), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_4/BiasAdd"}
  %add.3029 = f32[128,1]{1,0} add(f32[128,1]{1,0} %transpose.3027, f32[128,1]{1,0} %broadcast.3028), metadata={op_type="BiasAdd" op_name="top_mlp_layer_4/BiasAdd"}
  %logistic.3030 = f32[128,1]{1,0} logistic(f32[128,1]{1,0} %add.3029), metadata={op_name="top_mlp_layer_4/Sigmoid"}
  %get-tuple-element.2269 = f32[128,1]{0,1} get-tuple-element((f32[128,1]{0,1}, f32[128,13]{0,1}, s32[128,13]{0,1}) %get-tuple-element.2268), index=0, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %slice.2845 = f32[128,1]{1,0} slice(f32[128,1]{0,1} %get-tuple-element.2269), slice={[0:128], [0:1]}, metadata={op_type="Slice" op_name="Slice"}
  %concatenate.3032 = f32[128,2]{1,0} concatenate(f32[128,1]{1,0} %logistic.3030, f32[128,1]{1,0} %slice.2845), dimensions={1}, metadata={op_type="ConcatV2" op_name="concat_3"}
  %reshape.3033 = f32[1,128,2]{2,1,0} reshape(f32[128,2]{1,0} %concatenate.3032), metadata={op_type="ExpandDims" op_name="ExpandDims"}
  %reshape.2262 = s32[1]{0} reshape(s32[] %get-tuple-element.2240), metadata={op_type="Pack" op_name="stack"}
  %constant.2260 = s32[] constant(0), metadata={op_type="Pack" op_name="stack"}
  %reshape.2263 = s32[1]{0} reshape(s32[] %constant.2260), metadata={op_type="Pack" op_name="stack"}
  %constant.2261 = s32[] constant(0), metadata={op_type="Pack" op_name="stack"}
  %reshape.2264 = s32[1]{0} reshape(s32[] %constant.2261), metadata={op_type="Pack" op_name="stack"}
  %concatenate.2265 = s32[3]{0} concatenate(s32[1]{0} %reshape.2262, s32[1]{0} %reshape.2263, s32[1]{0} %reshape.2264), dimensions={0}, metadata={op_type="Pack" op_name="stack"}
  %slice.3034 = s32[1]{0} slice(s32[3]{0} %concatenate.2265), slice={[0:1]}, metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %reshape.3035 = s32[] reshape(s32[1]{0} %slice.3034), metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %slice.3036 = s32[1]{0} slice(s32[3]{0} %concatenate.2265), slice={[1:2]}, metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %reshape.3037 = s32[] reshape(s32[1]{0} %slice.3036), metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %slice.3038 = s32[1]{0} slice(s32[3]{0} %concatenate.2265), slice={[2:3]}, metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %reshape.3039 = s32[] reshape(s32[1]{0} %slice.3038), metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %dynamic-update-slice.3040 = f32[1363,128,2]{2,1,0} dynamic-update-slice(f32[1363,128,2]{2,1,0} %get-tuple-element.2241, f32[1,128,2]{2,1,0} %reshape.3033, s32[] %reshape.3035, s32[] %reshape.3037, s32[] %reshape.3039), metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  %get-tuple-element.2242 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.2238), index=3, sharding={maximal device=0}
  %tuple.3043 = (s32[]) tuple(s32[] %get-tuple-element.2242), sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3044 = s32[] get-tuple-element((s32[]) %tuple.3043), index=0, sharding={maximal device=0}, metadata={op_name="XLA_Retvals"}
  %tuple.3045 = (f32[19656,128]{1,0:T(8,128)}) tuple(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.2243), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3046 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}) %tuple.3045), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3047 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %get-tuple-element.2244), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3048 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3047), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3049 = (f32[13,512]{1,0:T(8,128)}) tuple(f32[13,512]{1,0:T(8,128)} %get-tuple-element.2245), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3050 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[13,512]{1,0:T(8,128)}) %tuple.3049), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3051 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %get-tuple-element.2246), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3052 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3051), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3053 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %get-tuple-element.2247), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3054 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3053), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3055 = (f32[128]{0:T(256)}) tuple(f32[128]{0:T(256)} %get-tuple-element.2248), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3056 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}) %tuple.3055), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3057 = (f32[256,128]{1,0:T(8,128)}) tuple(f32[256,128]{1,0:T(8,128)} %get-tuple-element.2249), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3058 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[256,128]{1,0:T(8,128)}) %tuple.3057), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3059 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %get-tuple-element.2250), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3060 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3059), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3061 = (f32[857,1024]{1,0:T(8,128)}) tuple(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.2251), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3062 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[857,1024]{1,0:T(8,128)}) %tuple.3061), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3063 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %get-tuple-element.2252), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3064 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3063), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3065 = (f32[1024,1024]{1,0:T(8,128)}) tuple(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.2253), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3066 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[1024,1024]{1,0:T(8,128)}) %tuple.3065), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3067 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %get-tuple-element.2254), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3068 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3067), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3069 = (f32[1024,512]{1,0:T(8,128)}) tuple(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.2255), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3070 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[1024,512]{1,0:T(8,128)}) %tuple.3069), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3071 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %get-tuple-element.2256), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3072 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3071), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3073 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %get-tuple-element.2257), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3074 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3073), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3075 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.2258), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3076 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3075), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3077 = (f32[256,1]{0,1:T(2,128)}) tuple(f32[256,1]{0,1:T(2,128)} %get-tuple-element.2259), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3078 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[256,1]{0,1:T(2,128)}) %tuple.3077), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.3079 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) tuple(s32[] %add.2862, s32[] %get-tuple-element.3042, f32[1363,128,2]{2,1,0} %dynamic-update-slice.3040, s32[] %get-tuple-element.3044, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3046, /*index=5*/f32[512]{0:T(512)} %get-tuple-element.3048, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3050, f32[256]{0:T(256)} %get-tuple-element.3052, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3054, f32[128]{0:T(256)} %get-tuple-element.3056, /*index=10*/f32[256,128]{1,0:T(8,128)} %get-tuple-element.3058, f32[1024]{0:T(1024)} %get-tuple-element.3060, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3062, f32[1024]{0:T(1024)} %get-tuple-element.3064, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3066, /*index=15*/f32[512]{0:T(512)} %get-tuple-element.3068, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3070, f32[256]{0:T(256)} %get-tuple-element.3072, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3074, f32[1]{0:T(256)} %get-tuple-element.3076, /*index=20*/f32[256,1]{0,1:T(2,128)} %get-tuple-element.3078), metadata={op_name="XLA_Retvals"}
}

%_functionalize_cond_9__.3080 (arg_tuple.3081: (s32[], s32[], f32[1363,128,2], s32[], f32[19656,128], /*index=5*/f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=10*/f32[256,128], f32[1024], f32[857,1024], f32[1024], f32[1024,1024], /*index=15*/f32[512], f32[1024,512], f32[256], f32[512,256], f32[1], /*index=20*/f32[256,1])) -> (pred[]) {
  %arg_tuple.3081 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.3083 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=1
  %get-tuple-element.3084 = f32[1363,128,2]{2,1,0} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=2
  %get-tuple-element.3085 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=3
  %get-tuple-element.3086 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=4
  %get-tuple-element.3087 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=5
  %get-tuple-element.3088 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=6
  %get-tuple-element.3089 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=7
  %get-tuple-element.3090 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=8
  %get-tuple-element.3091 = f32[128]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=9
  %get-tuple-element.3092 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=10
  %get-tuple-element.3093 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=11
  %get-tuple-element.3094 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=12
  %get-tuple-element.3095 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=13
  %get-tuple-element.3096 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=14
  %get-tuple-element.3097 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=15
  %get-tuple-element.3098 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=16
  %get-tuple-element.3099 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=17
  %get-tuple-element.3100 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=18
  %get-tuple-element.3101 = f32[1]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=19
  %get-tuple-element.3102 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=20
  %constant.3103 = s32[] constant(1363), metadata={op_type="Less" op_name="Less_1"}
  %get-tuple-element.3082 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %arg_tuple.3081), index=0
  %constant.3104 = s32[] constant(1363), metadata={op_type="Less" op_name="Less_1"}
  %compare.3105 = pred[] compare(s32[] %get-tuple-element.3082, s32[] %constant.3104), direction=LT, metadata={op_type="Less" op_name="Less_1"}
  ROOT %tuple.3106 = (pred[]) tuple(pred[] %compare.3105), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.3107 (inputs.3108: (s32[], s32[], f32[1363,128,2], s32[], f32[19656,128], /*index=5*/f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=10*/f32[256,128], f32[1024], f32[857,1024], f32[1024], f32[1024,1024], /*index=15*/f32[512], f32[1024,512], f32[256], f32[512,256], f32[1], /*index=20*/f32[256,1])) -> pred[] {
  %inputs.3108 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) parameter(0)
  %call.3109 = (pred[]) call((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %inputs.3108), to_apply=%_functionalize_cond_9__.3080
  ROOT %get-tuple-element.3110 = pred[] get-tuple-element((pred[]) %call.3109), index=0
}

%_functionalize_body_11__.3111 (arg_tuple.3112: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1]) {
  %constant.3145 = s32[] constant(1), metadata={op_type="AddV2" op_name="add"}
  %constant.3148 = s32[] constant(0), metadata={op_type="While" op_name="while/LoopCond"}
  %constant.3217 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3218 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3219 = f32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %broadcast.3220 = f32[1363,128,2]{2,1,0} broadcast(f32[] %constant.3219), dimensions={}, metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3221 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3222 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3223 = f32[] constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %broadcast.3224 = f32[1363,128,2]{2,1,0} broadcast(f32[] %constant.3223), dimensions={}, metadata={op_type="While" op_name="LoopCond_1"}
  %constant.3149 = s32[] constant(0), metadata={op_type="While" op_name="while/LoopCond"}
  %arg_tuple.3112 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.3114 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=1
  %get-tuple-element.3115 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=2
  %get-tuple-element.3116 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=3
  %get-tuple-element.3117 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=4
  %get-tuple-element.3118 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=5
  %get-tuple-element.3119 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=6
  %get-tuple-element.3120 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=7
  %get-tuple-element.3121 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=8
  %get-tuple-element.3122 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=9
  %get-tuple-element.3123 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=10
  %get-tuple-element.3124 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=11
  %get-tuple-element.3125 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=12
  %get-tuple-element.3126 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=13
  %get-tuple-element.3127 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=14
  %get-tuple-element.3128 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=15
  %get-tuple-element.3129 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=16
  %get-tuple-element.3130 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=17
  %get-tuple-element.3131 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=18
  %get-tuple-element.3132 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=19
  %get-tuple-element.3133 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=20
  %get-tuple-element.3134 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=21
  %get-tuple-element.3135 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=22
  %get-tuple-element.3136 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=23
  %get-tuple-element.3137 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=24
  %get-tuple-element.3138 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=25
  %get-tuple-element.3139 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=26
  %get-tuple-element.3140 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=27
  %get-tuple-element.3141 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=28
  %get-tuple-element.3142 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=29
  %get-tuple-element.3143 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=30
  %get-tuple-element.3144 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=31
  %tuple.3150 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %constant.3149, s64[]{:T(256)} %get-tuple-element.3114, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3115, f32[1]{0:T(256)} %get-tuple-element.3116, f32[1]{0:T(256)} %get-tuple-element.3117, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3118, f32[1]{0:T(256)} %get-tuple-element.3119, f32[1]{0:T(256)} %get-tuple-element.3120, f32[1]{0:T(256)} %get-tuple-element.3121, f32[1]{0:T(256)} %get-tuple-element.3122, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3123, f32[1]{0:T(256)} %get-tuple-element.3124, f32[1]{0:T(256)} %get-tuple-element.3125, f32[1]{0:T(256)} %get-tuple-element.3126, f32[1]{0:T(256)} %get-tuple-element.3127, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3128, f32[512]{0:T(512)} %get-tuple-element.3129, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3130, f32[256]{0:T(256)} %get-tuple-element.3131, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3132, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.3133, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3134, f32[1024]{0:T(1024)} %get-tuple-element.3135, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3136, f32[1024]{0:T(1024)} %get-tuple-element.3137, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3138, f32[512]{0:T(512)} %get-tuple-element.3139, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3140, f32[256]{0:T(256)} %get-tuple-element.3141, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3142, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3143, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3144), metadata={op_type="While" op_name="while/LoopCond"}
  %while.3151 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) while((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3150), condition=%cond_wrapper.2233, body=%_functionalize_body_10__.204, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3152 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=0, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3153 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=1, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3154 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=2, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3155 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=3, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3156 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=4, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3157 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=5, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3158 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=6, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3159 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=7, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3160 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=8, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3161 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=9, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3162 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=10, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3163 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=11, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3164 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=12, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3165 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=13, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3166 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=14, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3167 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=15, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3168 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=16, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3169 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=17, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3170 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=18, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3171 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=19, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3172 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=20, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3173 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=21, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3174 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=22, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3175 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=23, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3176 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=24, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3177 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=25, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3178 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=26, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3179 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=27, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3180 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=28, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3181 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=29, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3182 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=30, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3183 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3151), index=31, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3184 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %get-tuple-element.3152, s64[]{:T(256)} %get-tuple-element.3153, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3154, f32[1]{0:T(256)} %get-tuple-element.3155, f32[1]{0:T(256)} %get-tuple-element.3156, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3157, f32[1]{0:T(256)} %get-tuple-element.3158, f32[1]{0:T(256)} %get-tuple-element.3159, f32[1]{0:T(256)} %get-tuple-element.3160, f32[1]{0:T(256)} %get-tuple-element.3161, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3162, f32[1]{0:T(256)} %get-tuple-element.3163, f32[1]{0:T(256)} %get-tuple-element.3164, f32[1]{0:T(256)} %get-tuple-element.3165, f32[1]{0:T(256)} %get-tuple-element.3166, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3167, f32[512]{0:T(512)} %get-tuple-element.3168, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3169, f32[256]{0:T(256)} %get-tuple-element.3170, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3171, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.3172, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3173, f32[1024]{0:T(1024)} %get-tuple-element.3174, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3175, f32[1024]{0:T(1024)} %get-tuple-element.3176, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3177, f32[512]{0:T(512)} %get-tuple-element.3178, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3179, f32[256]{0:T(256)} %get-tuple-element.3180, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3181, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3182, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3183), metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3185 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=0, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3187 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=2, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3201 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=16, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3202 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=17, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3203 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=18, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3204 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=19, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3205 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=20, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3206 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=21, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3207 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=22, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3208 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=23, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3209 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=24, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3210 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=25, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3211 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=26, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3212 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=27, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3213 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=28, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3214 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=29, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3215 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=30, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3216 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=31, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3225 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) tuple(s32[] %constant.3221, s32[] %constant.3222, f32[1363,128,2]{2,1,0} %broadcast.3224, s32[] %get-tuple-element.3185, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3187, /*index=5*/f32[512]{0:T(512)} %get-tuple-element.3201, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3202, f32[256]{0:T(256)} %get-tuple-element.3203, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3204, f32[128]{0:T(256)} %get-tuple-element.3205, /*index=10*/f32[256,128]{1,0:T(8,128)} %get-tuple-element.3206, f32[1024]{0:T(1024)} %get-tuple-element.3207, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3208, f32[1024]{0:T(1024)} %get-tuple-element.3209, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3210, /*index=15*/f32[512]{0:T(512)} %get-tuple-element.3211, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3212, f32[256]{0:T(256)} %get-tuple-element.3213, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3214, f32[1]{0:T(256)} %get-tuple-element.3215, /*index=20*/f32[256,1]{0,1:T(2,128)} %get-tuple-element.3216), metadata={op_type="While" op_name="LoopCond_1"}
  %while.3226 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) while((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %tuple.3225), condition=%cond_wrapper.3107, body=%_functionalize_body_9__.2237, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3227 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=0, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3228 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=1, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3229 = f32[1363,128,2]{2,1,0} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=2, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3230 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=3, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3231 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=4, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3232 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=5, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3233 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=6, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3234 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=7, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3235 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=8, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3236 = f32[128]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=9, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3237 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=10, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3238 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=11, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3239 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=12, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3240 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=13, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3241 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=14, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3242 = f32[512]{0:T(512)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=15, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3243 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=16, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3244 = f32[256]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=17, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3245 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=18, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3246 = f32[1]{0:T(256)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=19, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3247 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %while.3226), index=20, metadata={op_type="While" op_name="LoopCond_1"}
  %tuple.3248 = (s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) tuple(s32[] %get-tuple-element.3227, s32[] %get-tuple-element.3228, f32[1363,128,2]{2,1,0} %get-tuple-element.3229, s32[] %get-tuple-element.3230, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3231, /*index=5*/f32[512]{0:T(512)} %get-tuple-element.3232, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3233, f32[256]{0:T(256)} %get-tuple-element.3234, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3235, f32[128]{0:T(256)} %get-tuple-element.3236, /*index=10*/f32[256,128]{1,0:T(8,128)} %get-tuple-element.3237, f32[1024]{0:T(1024)} %get-tuple-element.3238, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3239, f32[1024]{0:T(1024)} %get-tuple-element.3240, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3241, /*index=15*/f32[512]{0:T(512)} %get-tuple-element.3242, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3243, f32[256]{0:T(256)} %get-tuple-element.3244, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3245, f32[1]{0:T(256)} %get-tuple-element.3246, /*index=20*/f32[256,1]{0,1:T(2,128)} %get-tuple-element.3247), metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3249 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %tuple.3248), index=0, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3250 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %tuple.3248), index=1, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3252 = s32[] get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %tuple.3248), index=3, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3251 = f32[1363,128,2]{2,1,0} get-tuple-element((s32[], s32[], f32[1363,128,2]{2,1,0}, s32[], f32[19656,128]{1,0:T(8,128)}, /*index=5*/f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=10*/f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, /*index=15*/f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=20*/f32[256,1]{0,1:T(2,128)}) %tuple.3248), index=2, metadata={op_type="While" op_name="LoopCond_1"}
  %tuple.3253 = (f32[1363,128,2]{2,1,0}) tuple(f32[1363,128,2]{2,1,0} %get-tuple-element.3251), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %after-all.3254 = token[] after-all(), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %outfeed.3255 = token[] outfeed((f32[1363,128,2]{2,1,0}) %tuple.3253, token[] %after-all.3254), outfeed_shape=(f32[1363,128,2]{2,1,0}), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %tuple.3256 = () tuple(), sharding={replicated}, metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %get-tuple-element.3113 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3112), index=0
  %constant.3146 = s32[] constant(1), metadata={op_type="AddV2" op_name="add"}
  %add.3147 = s32[] add(s32[] %get-tuple-element.3113, s32[] %constant.3146), metadata={op_type="AddV2" op_name="add"}
  %get-tuple-element.3186 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=1, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3257 = (s64[]{:T(256)}) tuple(s64[]{:T(256)} %get-tuple-element.3186), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3258 = s64[]{:T(256)} get-tuple-element((s64[]{:T(256)}) %tuple.3257), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3259 = (f32[19656,128]{1,0:T(8,128)}) tuple(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3187), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3260 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}) %tuple.3259), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3188 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=3, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3261 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3188), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3262 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3261), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3189 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=4, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3263 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3189), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3264 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3263), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3190 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=5, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3265 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3190), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3266 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3265), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3191 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=6, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3267 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3191), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3268 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3267), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3192 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=7, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3269 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3192), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3270 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3269), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3193 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=8, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3271 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3193), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3272 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3271), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3194 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=9, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3273 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3194), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3274 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3273), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3195 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=10, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3275 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3195), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3276 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3275), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3196 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=11, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3277 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3196), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3278 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3277), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3197 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=12, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3279 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3197), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3280 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3279), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3198 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=13, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3281 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3198), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3282 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3281), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3199 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=14, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3283 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3199), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3284 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3283), index=0, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3200 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3184), index=15, metadata={op_type="While" op_name="while/LoopCond"}
  %tuple.3285 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3200), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3286 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3285), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3287 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %get-tuple-element.3201), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3288 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3287), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3289 = (f32[13,512]{1,0:T(8,128)}) tuple(f32[13,512]{1,0:T(8,128)} %get-tuple-element.3202), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3290 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[13,512]{1,0:T(8,128)}) %tuple.3289), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3291 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %get-tuple-element.3203), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3292 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3291), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3293 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3204), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3294 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3293), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3295 = (f32[128]{0:T(256)}) tuple(f32[128]{0:T(256)} %get-tuple-element.3205), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3296 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}) %tuple.3295), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3297 = (f32[256,128]{1,0:T(8,128)}) tuple(f32[256,128]{1,0:T(8,128)} %get-tuple-element.3206), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3298 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[256,128]{1,0:T(8,128)}) %tuple.3297), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3299 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %get-tuple-element.3207), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3300 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3299), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3301 = (f32[857,1024]{1,0:T(8,128)}) tuple(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3208), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3302 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[857,1024]{1,0:T(8,128)}) %tuple.3301), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3303 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %get-tuple-element.3209), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3304 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3303), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3305 = (f32[1024,1024]{1,0:T(8,128)}) tuple(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3210), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3306 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[1024,1024]{1,0:T(8,128)}) %tuple.3305), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3307 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %get-tuple-element.3211), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3308 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3307), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3309 = (f32[1024,512]{1,0:T(8,128)}) tuple(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3212), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3310 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[1024,512]{1,0:T(8,128)}) %tuple.3309), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3311 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %get-tuple-element.3213), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3312 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3311), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3313 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3214), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3314 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3313), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3315 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %get-tuple-element.3215), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3316 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3315), index=0, metadata={op_name="XLA_Retvals"}
  %tuple.3317 = (f32[256,1]{0,1:T(2,128)}) tuple(f32[256,1]{0,1:T(2,128)} %get-tuple-element.3216), metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3318 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[256,1]{0,1:T(2,128)}) %tuple.3317), index=0, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.3319 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %add.3147, s64[]{:T(256)} %get-tuple-element.3258, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3260, f32[1]{0:T(256)} %get-tuple-element.3262, f32[1]{0:T(256)} %get-tuple-element.3264, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3266, f32[1]{0:T(256)} %get-tuple-element.3268, f32[1]{0:T(256)} %get-tuple-element.3270, f32[1]{0:T(256)} %get-tuple-element.3272, f32[1]{0:T(256)} %get-tuple-element.3274, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3276, f32[1]{0:T(256)} %get-tuple-element.3278, f32[1]{0:T(256)} %get-tuple-element.3280, f32[1]{0:T(256)} %get-tuple-element.3282, f32[1]{0:T(256)} %get-tuple-element.3284, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3286, f32[512]{0:T(512)} %get-tuple-element.3288, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3290, f32[256]{0:T(256)} %get-tuple-element.3292, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3294, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.3296, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3298, f32[1024]{0:T(1024)} %get-tuple-element.3300, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3302, f32[1024]{0:T(1024)} %get-tuple-element.3304, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3306, f32[512]{0:T(512)} %get-tuple-element.3308, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3310, f32[256]{0:T(256)} %get-tuple-element.3312, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3314, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3316, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3318), metadata={op_name="XLA_Retvals"}
}

%_functionalize_cond_11__.3320 (arg_tuple.3321: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> (pred[]) {
  %arg_tuple.3321 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0), metadata={op_name="XLA_Args"}
  %get-tuple-element.3323 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=1
  %get-tuple-element.3324 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=2
  %get-tuple-element.3325 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=3
  %get-tuple-element.3326 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=4
  %get-tuple-element.3327 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=5
  %get-tuple-element.3328 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=6
  %get-tuple-element.3329 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=7
  %get-tuple-element.3330 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=8
  %get-tuple-element.3331 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=9
  %get-tuple-element.3332 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=10
  %get-tuple-element.3333 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=11
  %get-tuple-element.3334 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=12
  %get-tuple-element.3335 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=13
  %get-tuple-element.3336 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=14
  %get-tuple-element.3337 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=15
  %get-tuple-element.3338 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=16
  %get-tuple-element.3339 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=17
  %get-tuple-element.3340 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=18
  %get-tuple-element.3341 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=19
  %get-tuple-element.3342 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=20
  %get-tuple-element.3343 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=21
  %get-tuple-element.3344 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=22
  %get-tuple-element.3345 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=23
  %get-tuple-element.3346 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=24
  %get-tuple-element.3347 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=25
  %get-tuple-element.3348 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=26
  %get-tuple-element.3349 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=27
  %get-tuple-element.3350 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=28
  %get-tuple-element.3351 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=29
  %get-tuple-element.3352 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=30
  %get-tuple-element.3353 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=31
  %constant.3354 = s32[] constant(20), metadata={op_type="Less" op_name="Less"}
  %get-tuple-element.3322 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %arg_tuple.3321), index=0
  %constant.3355 = s32[] constant(20), metadata={op_type="Less" op_name="Less"}
  %compare.3356 = pred[] compare(s32[] %get-tuple-element.3322, s32[] %constant.3355), direction=LT, metadata={op_type="Less" op_name="Less"}
  ROOT %tuple.3357 = (pred[]) tuple(pred[] %compare.3356), metadata={op_name="XLA_Retvals"}
}

%cond_wrapper.3358 (inputs.3359: (s32[], s64[], f32[19656,128], f32[1], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[512], f32[13,512], f32[256], f32[512,256], /*index=20*/f32[128], f32[256,128], f32[1024], f32[857,1024], f32[1024], /*index=25*/f32[1024,1024], f32[512], f32[1024,512], f32[256], f32[512,256], /*index=30*/f32[1], f32[256,1])) -> pred[] {
  %inputs.3359 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) parameter(0)
  %call.3360 = (pred[]) call((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %inputs.3359), to_apply=%_functionalize_cond_11__.3320
  ROOT %get-tuple-element.3361 = pred[] get-tuple-element((pred[]) %call.3360), index=0
}

ENTRY %cluster_7035002757448359829_f15n_1__.3522 (arg_tuple.1: (f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=5*/f32[256,128], s64[], f32[19656,128], f32[1024], f32[857,1024], /*index=10*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=15*/f32[512,256], f32[1], f32[256,1], f32[1], f32[1], /*index=20*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=25*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=30*/f32[1])) -> (f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=5*/f32[256,128], s64[], f32[19656,128], f32[1024], f32[857,1024], /*index=10*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=15*/f32[512,256], f32[1], f32[256,1], f32[1], f32[1], /*index=20*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=25*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=30*/f32[1]) {
  %constant.33 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond"}
  %constant.34 = s32[] constant(0), metadata={op_type="While" op_name="LoopCond"}
  %arg_tuple.1 = (f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) parameter(0), parameter_replication={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true}, sharding={{maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}}, metadata={op_name="XLA_Args"}
  %get-tuple-element.8 = s64[]{:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=6, sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="global_step_0_arg"}
  %get-tuple-element.9 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=7, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="tc_embedding_table_0_arg"}
  %get-tuple-element.20 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=18, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl00_0_arg"}
  %get-tuple-element.21 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=19, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl01_0_arg"}
  %get-tuple-element.30 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=28, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl10_0_arg"}
  %get-tuple-element.31 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=29, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl11_0_arg"}
  %get-tuple-element.32 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=30, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl12_0_arg"}
  %get-tuple-element.22 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=20, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl02_0_arg"}
  %get-tuple-element.23 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=21, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl03_0_arg"}
  %get-tuple-element.24 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=22, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl04_0_arg"}
  %get-tuple-element.25 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=23, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl05_0_arg"}
  %get-tuple-element.26 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=24, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl06_0_arg"}
  %get-tuple-element.27 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=25, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl07_0_arg"}
  %get-tuple-element.28 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=26, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl08_0_arg"}
  %get-tuple-element.29 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=27, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, metadata={op_name="tpu_embedding_dummy_table_variable_tbl09_0_arg"}
  %get-tuple-element.2 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_0_bias_0_arg"}
  %get-tuple-element.3 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=1, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_0_kernel_0_arg"}
  %get-tuple-element.4 = f32[256]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=2, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_1_bias_0_arg"}
  %get-tuple-element.5 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=3, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_1_kernel_0_arg"}
  %get-tuple-element.6 = f32[128]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=4, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_2_bias_0_arg"}
  %get-tuple-element.7 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=5, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="bottom_mlp_layer_2_kernel_0_arg"}
  %get-tuple-element.10 = f32[1024]{0:T(1024)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=8, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_0_bias_0_arg"}
  %get-tuple-element.11 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=9, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_0_kernel_0_arg"}
  %get-tuple-element.12 = f32[1024]{0:T(1024)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=10, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_1_bias_0_arg"}
  %get-tuple-element.13 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=11, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_1_kernel_0_arg"}
  %get-tuple-element.14 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=12, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_2_bias_0_arg"}
  %get-tuple-element.15 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=13, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_2_kernel_0_arg"}
  %get-tuple-element.16 = f32[256]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=14, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_3_bias_0_arg"}
  %get-tuple-element.17 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=15, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_3_kernel_0_arg"}
  %get-tuple-element.18 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=16, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_4_bias_0_arg"}
  %get-tuple-element.19 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=17, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="top_mlp_layer_4_kernel_0_arg"}
  %tuple.35 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %constant.34, s64[]{:T(256)} %get-tuple-element.8, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.9, f32[1]{0:T(256)} %get-tuple-element.20, f32[1]{0:T(256)} %get-tuple-element.21, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.30, f32[1]{0:T(256)} %get-tuple-element.31, f32[1]{0:T(256)} %get-tuple-element.32, f32[1]{0:T(256)} %get-tuple-element.22, f32[1]{0:T(256)} %get-tuple-element.23, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.24, f32[1]{0:T(256)} %get-tuple-element.25, f32[1]{0:T(256)} %get-tuple-element.26, f32[1]{0:T(256)} %get-tuple-element.27, f32[1]{0:T(256)} %get-tuple-element.28, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.29, f32[512]{0:T(512)} %get-tuple-element.2, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3, f32[256]{0:T(256)} %get-tuple-element.4, f32[512,256]{1,0:T(8,128)} %get-tuple-element.5, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.6, f32[256,128]{1,0:T(8,128)} %get-tuple-element.7, f32[1024]{0:T(1024)} %get-tuple-element.10, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.11, f32[1024]{0:T(1024)} %get-tuple-element.12, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.13, f32[512]{0:T(512)} %get-tuple-element.14, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.15, f32[256]{0:T(256)} %get-tuple-element.16, f32[512,256]{1,0:T(8,128)} %get-tuple-element.17, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.18, f32[256,1]{0,1:T(2,128)} %get-tuple-element.19), metadata={op_type="While" op_name="LoopCond"}
  %while.3362 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) while((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.35), condition=%cond_wrapper.3358, body=%_functionalize_body_11__.3111, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3363 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=0, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3364 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=1, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3365 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=2, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3366 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=3, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3367 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=4, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3368 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=5, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3369 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=6, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3370 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=7, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3371 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=8, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3372 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=9, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3373 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=10, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3374 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=11, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3375 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=12, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3376 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=13, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3377 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=14, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3378 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=15, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3379 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=16, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3380 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=17, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3381 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=18, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3382 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=19, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3383 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=20, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3384 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=21, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3385 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=22, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3386 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=23, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3387 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=24, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3388 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=25, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3389 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=26, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3390 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=27, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3391 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=28, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3392 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=29, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3393 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=30, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3394 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %while.3362), index=31, metadata={op_type="While" op_name="LoopCond"}
  %tuple.3395 = (s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) tuple(s32[] %get-tuple-element.3363, s64[]{:T(256)} %get-tuple-element.3364, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3365, f32[1]{0:T(256)} %get-tuple-element.3366, f32[1]{0:T(256)} %get-tuple-element.3367, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3368, f32[1]{0:T(256)} %get-tuple-element.3369, f32[1]{0:T(256)} %get-tuple-element.3370, f32[1]{0:T(256)} %get-tuple-element.3371, f32[1]{0:T(256)} %get-tuple-element.3372, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3373, f32[1]{0:T(256)} %get-tuple-element.3374, f32[1]{0:T(256)} %get-tuple-element.3375, f32[1]{0:T(256)} %get-tuple-element.3376, f32[1]{0:T(256)} %get-tuple-element.3377, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3378, f32[512]{0:T(512)} %get-tuple-element.3379, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3380, f32[256]{0:T(256)} %get-tuple-element.3381, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3382, /*index=20*/f32[128]{0:T(256)} %get-tuple-element.3383, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3384, f32[1024]{0:T(1024)} %get-tuple-element.3385, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3386, f32[1024]{0:T(1024)} %get-tuple-element.3387, /*index=25*/f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3388, f32[512]{0:T(512)} %get-tuple-element.3389, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3390, f32[256]{0:T(256)} %get-tuple-element.3391, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3392, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3393, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3394), metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3396 = s32[] get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=0, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3412 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=16, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3428 = f32[512]{0:T(512)} reshape(f32[512]{0:T(512)} %get-tuple-element.3412), metadata={op_name="XLA_Retvals"}
  %tuple.3429 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %reshape.3428), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3430 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3429), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3413 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=17, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3431 = f32[13,512]{1,0:T(8,128)} reshape(f32[13,512]{1,0:T(8,128)} %get-tuple-element.3413), metadata={op_name="XLA_Retvals"}
  %tuple.3432 = (f32[13,512]{1,0:T(8,128)}) tuple(f32[13,512]{1,0:T(8,128)} %reshape.3431), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3433 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[13,512]{1,0:T(8,128)}) %tuple.3432), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3414 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=18, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3434 = f32[256]{0:T(256)} reshape(f32[256]{0:T(256)} %get-tuple-element.3414), metadata={op_name="XLA_Retvals"}
  %tuple.3435 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %reshape.3434), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3436 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3435), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3415 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=19, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3437 = f32[512,256]{1,0:T(8,128)} reshape(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3415), metadata={op_name="XLA_Retvals"}
  %tuple.3438 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %reshape.3437), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3439 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3438), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3416 = f32[128]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=20, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3440 = f32[128]{0:T(256)} reshape(f32[128]{0:T(256)} %get-tuple-element.3416), metadata={op_name="XLA_Retvals"}
  %tuple.3441 = (f32[128]{0:T(256)}) tuple(f32[128]{0:T(256)} %reshape.3440), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3442 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}) %tuple.3441), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3417 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=21, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3443 = f32[256,128]{1,0:T(8,128)} reshape(f32[256,128]{1,0:T(8,128)} %get-tuple-element.3417), metadata={op_name="XLA_Retvals"}
  %tuple.3444 = (f32[256,128]{1,0:T(8,128)}) tuple(f32[256,128]{1,0:T(8,128)} %reshape.3443), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3445 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[256,128]{1,0:T(8,128)}) %tuple.3444), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3397 = s64[]{:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=1, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3446 = s64[]{:T(256)} reshape(s64[]{:T(256)} %get-tuple-element.3397), metadata={op_name="XLA_Retvals"}
  %tuple.3447 = (s64[]{:T(256)}) tuple(s64[]{:T(256)} %reshape.3446), sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3448 = s64[]{:T(256)} get-tuple-element((s64[]{:T(256)}) %tuple.3447), index=0, sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3398 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=2, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3449 = f32[19656,128]{1,0:T(8,128)} reshape(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3398), metadata={op_name="XLA_Retvals"}
  %tuple.3450 = (f32[19656,128]{1,0:T(8,128)}) tuple(f32[19656,128]{1,0:T(8,128)} %reshape.3449), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3451 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}) %tuple.3450), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3418 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=22, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3452 = f32[1024]{0:T(1024)} reshape(f32[1024]{0:T(1024)} %get-tuple-element.3418), metadata={op_name="XLA_Retvals"}
  %tuple.3453 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %reshape.3452), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3454 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3453), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3419 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=23, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3455 = f32[857,1024]{1,0:T(8,128)} reshape(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3419), metadata={op_name="XLA_Retvals"}
  %tuple.3456 = (f32[857,1024]{1,0:T(8,128)}) tuple(f32[857,1024]{1,0:T(8,128)} %reshape.3455), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3457 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[857,1024]{1,0:T(8,128)}) %tuple.3456), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3420 = f32[1024]{0:T(1024)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=24, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3458 = f32[1024]{0:T(1024)} reshape(f32[1024]{0:T(1024)} %get-tuple-element.3420), metadata={op_name="XLA_Retvals"}
  %tuple.3459 = (f32[1024]{0:T(1024)}) tuple(f32[1024]{0:T(1024)} %reshape.3458), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3460 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}) %tuple.3459), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3421 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=25, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3461 = f32[1024,1024]{1,0:T(8,128)} reshape(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3421), metadata={op_name="XLA_Retvals"}
  %tuple.3462 = (f32[1024,1024]{1,0:T(8,128)}) tuple(f32[1024,1024]{1,0:T(8,128)} %reshape.3461), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3463 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[1024,1024]{1,0:T(8,128)}) %tuple.3462), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3422 = f32[512]{0:T(512)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=26, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3464 = f32[512]{0:T(512)} reshape(f32[512]{0:T(512)} %get-tuple-element.3422), metadata={op_name="XLA_Retvals"}
  %tuple.3465 = (f32[512]{0:T(512)}) tuple(f32[512]{0:T(512)} %reshape.3464), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3466 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}) %tuple.3465), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3423 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=27, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3467 = f32[1024,512]{1,0:T(8,128)} reshape(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3423), metadata={op_name="XLA_Retvals"}
  %tuple.3468 = (f32[1024,512]{1,0:T(8,128)}) tuple(f32[1024,512]{1,0:T(8,128)} %reshape.3467), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3469 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[1024,512]{1,0:T(8,128)}) %tuple.3468), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3424 = f32[256]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=28, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3470 = f32[256]{0:T(256)} reshape(f32[256]{0:T(256)} %get-tuple-element.3424), metadata={op_name="XLA_Retvals"}
  %tuple.3471 = (f32[256]{0:T(256)}) tuple(f32[256]{0:T(256)} %reshape.3470), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3472 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}) %tuple.3471), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3425 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=29, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3473 = f32[512,256]{1,0:T(8,128)} reshape(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3425), metadata={op_name="XLA_Retvals"}
  %tuple.3474 = (f32[512,256]{1,0:T(8,128)}) tuple(f32[512,256]{1,0:T(8,128)} %reshape.3473), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3475 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512,256]{1,0:T(8,128)}) %tuple.3474), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3426 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=30, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3476 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3426), metadata={op_name="XLA_Retvals"}
  %tuple.3477 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3476), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3478 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3477), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3427 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=31, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3479 = f32[256,1]{0,1:T(2,128)} reshape(f32[256,1]{0,1:T(2,128)} %get-tuple-element.3427), metadata={op_name="XLA_Retvals"}
  %tuple.3480 = (f32[256,1]{0,1:T(2,128)}) tuple(f32[256,1]{0,1:T(2,128)} %reshape.3479), sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3481 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[256,1]{0,1:T(2,128)}) %tuple.3480), index=0, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3399 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=3, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3482 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3399), metadata={op_name="XLA_Retvals"}
  %tuple.3483 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3482), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3484 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3483), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3400 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=4, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3485 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3400), metadata={op_name="XLA_Retvals"}
  %tuple.3486 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3485), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3487 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3486), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3404 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=8, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3488 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3404), metadata={op_name="XLA_Retvals"}
  %tuple.3489 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3488), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3490 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3489), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3405 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=9, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3491 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3405), metadata={op_name="XLA_Retvals"}
  %tuple.3492 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3491), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3493 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3492), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3406 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=10, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3494 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3406), metadata={op_name="XLA_Retvals"}
  %tuple.3495 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3494), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3496 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3495), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3407 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=11, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3497 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3407), metadata={op_name="XLA_Retvals"}
  %tuple.3498 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3497), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3499 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3498), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3408 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=12, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3500 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3408), metadata={op_name="XLA_Retvals"}
  %tuple.3501 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3500), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3502 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3501), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3409 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=13, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3503 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3409), metadata={op_name="XLA_Retvals"}
  %tuple.3504 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3503), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3505 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3504), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3410 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=14, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3506 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3410), metadata={op_name="XLA_Retvals"}
  %tuple.3507 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3506), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3508 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3507), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3411 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=15, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3509 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3411), metadata={op_name="XLA_Retvals"}
  %tuple.3510 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3509), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3511 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3510), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3401 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=5, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3512 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3401), metadata={op_name="XLA_Retvals"}
  %tuple.3513 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3512), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3514 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3513), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3402 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=6, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3515 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3402), metadata={op_name="XLA_Retvals"}
  %tuple.3516 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3515), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3517 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3516), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3403 = f32[1]{0:T(256)} get-tuple-element((s32[], s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=20*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=25*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=30*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %tuple.3395), index=7, metadata={op_type="While" op_name="LoopCond"}
  %reshape.3518 = f32[1]{0:T(256)} reshape(f32[1]{0:T(256)} %get-tuple-element.3403), metadata={op_name="XLA_Retvals"}
  %tuple.3519 = (f32[1]{0:T(256)}) tuple(f32[1]{0:T(256)} %reshape.3518), sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3520 = f32[1]{0:T(256)} get-tuple-element((f32[1]{0:T(256)}) %tuple.3519), index=0, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}, metadata={op_name="XLA_Retvals"}
  ROOT %tuple.3521 = (f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) tuple(f32[512]{0:T(512)} %get-tuple-element.3430, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3433, f32[256]{0:T(256)} %get-tuple-element.3436, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3439, f32[128]{0:T(256)} %get-tuple-element.3442, /*index=5*/f32[256,128]{1,0:T(8,128)} %get-tuple-element.3445, s64[]{:T(256)} %get-tuple-element.3448, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3451, f32[1024]{0:T(1024)} %get-tuple-element.3454, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3457, /*index=10*/f32[1024]{0:T(1024)} %get-tuple-element.3460, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3463, f32[512]{0:T(512)} %get-tuple-element.3466, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3469, f32[256]{0:T(256)} %get-tuple-element.3472, /*index=15*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3475, f32[1]{0:T(256)} %get-tuple-element.3478, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3481, f32[1]{0:T(256)} %get-tuple-element.3484, f32[1]{0:T(256)} %get-tuple-element.3487, /*index=20*/f32[1]{0:T(256)} %get-tuple-element.3490, f32[1]{0:T(256)} %get-tuple-element.3493, f32[1]{0:T(256)} %get-tuple-element.3496, f32[1]{0:T(256)} %get-tuple-element.3499, f32[1]{0:T(256)} %get-tuple-element.3502, /*index=25*/f32[1]{0:T(256)} %get-tuple-element.3505, f32[1]{0:T(256)} %get-tuple-element.3508, f32[1]{0:T(256)} %get-tuple-element.3511, f32[1]{0:T(256)} %get-tuple-element.3514, f32[1]{0:T(256)} %get-tuple-element.3517, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3520), sharding={{maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}}, metadata={op_name="XLA_Retvals"}
}

