# HLO Graph containing the computations for MLPerf(TM)'s training v0.7's Dlrm benchmark after XLA optimizations running on a 4x4x4 TPU v3 system. 
# Please, follow MLPerf(TM)'s publication guidelines when citing this data (https://github.com/mlcommons/policies/blob/master/RESULTS_GUIDELINES.md).
HloModule cluster_7035002757448359829_f15n_1__.3522, is_scheduled=true, input_output_alias={ {0}: (0, {0}, may-alias), {1}: (0, {1}, may-alias), {2}: (0, {2}, may-alias), {3}: (0, {3}, may-alias), {4}: (0, {4}, may-alias), {5}: (0, {5}, may-alias), {6}: (0, {6}, may-alias), {7}: (0, {7}, may-alias), {8}: (0, {8}, may-alias), {9}: (0, {9}, may-alias), {10}: (0, {10}, may-alias), {11}: (0, {11}, may-alias), {12}: (0, {12}, may-alias), {13}: (0, {13}, may-alias), {14}: (0, {14}, may-alias), {15}: (0, {15}, may-alias), {16}: (0, {16}, may-alias), {17}: (0, {17}, may-alias), {18}: (0, {18}, may-alias), {19}: (0, {19}, may-alias), {20}: (0, {20}, may-alias), {21}: (0, {21}, may-alias), {22}: (0, {22}, may-alias), {23}: (0, {23}, may-alias), {24}: (0, {24}, may-alias), {25}: (0, {25}, may-alias), {26}: (0, {26}, may-alias), {27}: (0, {27}, may-alias), {28}: (0, {28}, may-alias), {29}: (0, {29}, may-alias), {30}: (0, {30}, may-alias) }

%or_with_unsigned_bitcast (x: f32[], y: f32[]) -> f32[] {
  %y = f32[] parameter(1)
  %bitcast-convert.41 = u32[]{:S(5)} bitcast-convert(f32[] %y)
  %x = f32[] parameter(0)
  %bitcast-convert.40 = u32[]{:S(5)} bitcast-convert(f32[] %x)
  %or.18 = u32[]{:S(5)} or(u32[]{:S(5)} %bitcast-convert.40, u32[]{:S(5)} %bitcast-convert.41)
  ROOT %bitcast-convert.42 = f32[] bitcast-convert(u32[]{:S(5)} %or.18)
}

%get-tuple-element.798.reduce_sub_computation (lhs: f32[], rhs: f32[]) -> f32[] {
  %rhs = f32[] parameter(1)
  %lhs = f32[] parameter(0)
  ROOT %add.292 = f32[] add(f32[] %lhs, f32[] %rhs)
}

%fused_computation.294.clone (param_0.2088: s32[1664]) -> s32[2048] {
  %constant.2249 = s32[] constant(0), metadata={op_type="ResourceGather" op_name="while/Gather"}
  %broadcast.2587 = s32[2048]{0} broadcast(s32[] %constant.2249), dimensions={}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %param_0.2088 = s32[1664]{0:T(1024)} parameter(0)
  %pad.142 = s32[2048]{0} pad(s32[1664]{0:T(1024)} %param_0.2088, s32[] %constant.2249), padding=0_384, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %constant.2248 = s32[] constant(19655), metadata={op_type="ResourceGather" op_name="while/Gather"}
  %broadcast.2586 = s32[2048]{0} broadcast(s32[] %constant.2248), dimensions={}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  ROOT %clamp.4 = s32[2048]{0} clamp(s32[2048]{0} %broadcast.2587, s32[2048]{0} %pad.142, s32[2048]{0} %broadcast.2586), metadata={op_type="ResourceGather" op_name="while/Gather"}
}

%fused_computation.clone (param_0.2089: f32[19656,128], param_1.1504: s32[2048]) -> bf16[1664,128] {
  %param_0.2089 = f32[19656,128]{1,0:T(8,128)} parameter(0)
  %param_1.1504 = s32[2048]{0} parameter(1)
  %custom-call.7 = s32[2048]{0} custom-call(s32[2048]{0} %param_1.1504), custom_call_target="AssumeGatherIndicesInBound", operand_layout_constraints={s32[2048]{0}}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %slice.779 = s32[1664]{0:T(1024)} slice(s32[2048]{0} %custom-call.7), slice={[0:1664]}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %reshape.401 = s32[128,13]{1,0:T(8,128)} reshape(s32[1664]{0:T(1024)} %slice.779)
  %transpose.170 = s32[128,13]{1,0:T(8,128)} transpose(s32[128,13]{1,0:T(8,128)} %reshape.401), dimensions={0,1}
  %gather.10 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} gather(f32[19656,128]{1,0:T(8,128)} %param_0.2089, s32[128,13]{1,0:T(8,128)} %transpose.170), offset_dims={2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=2, slice_sizes={1,128}, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %transpose.171 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} transpose(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %gather.10), dimensions={0,1,2}
  ROOT %reshape.402 = bf16[1664,128]{1,0:T(8,128)(2,1)} reshape(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %transpose.171)
}

%fused_computation.34.clone (param_0.2090: f32[128,13], param_1.1505: f32[13,512], param_2.1389: f32[512]) -> f32[128,512] {
  %param_0.2090 = f32[128,13]{0,1:T(8,128)} parameter(0)
  %param_1.1505 = f32[13,512]{1,0:T(8,128)} parameter(1)
  %convolution.336 = f32[128,512]{1,0:T(8,128)} convolution(f32[128,13]{0,1:T(8,128)} %param_0.2090, f32[13,512]{1,0:T(8,128)} %param_1.1505), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_0/MatMul"}
  %param_2.1389 = f32[512]{0:T(512)} parameter(2)
  %broadcast.2589 = f32[128,512]{1,0:T(8,128)} broadcast(f32[512]{0:T(512)} %param_2.1389), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_0/BiasAdd"}
  %add.435 = f32[128,512]{1,0:T(8,128)} add(f32[128,512]{1,0:T(8,128)} %convolution.336, f32[128,512]{1,0:T(8,128)} %broadcast.2589), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_0/BiasAdd"}
  %constant.2250 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2588 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2250), dimensions={}, metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  ROOT %maximum.142 = f32[128,512]{1,0:T(8,128)} maximum(f32[128,512]{1,0:T(8,128)} %add.435, f32[128,512]{1,0:T(8,128)} %broadcast.2588), metadata={op_name="while/bottom_mlp_layer_0/Relu"}
}

%fused_computation.54.clone (param_0.2091: f32[128,512], param_1.1506: f32[512,256], param_2.1390: f32[256]) -> f32[128,256] {
  %param_0.2091 = f32[128,512]{1,0:T(8,128)} parameter(0)
  %param_1.1506 = f32[512,256]{1,0:T(8,128)} parameter(1)
  %convolution.337 = f32[128,256]{1,0:T(8,128)} convolution(f32[128,512]{1,0:T(8,128)} %param_0.2091, f32[512,256]{1,0:T(8,128)} %param_1.1506), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_1/MatMul"}
  %param_2.1390 = f32[256]{0:T(256)} parameter(2)
  %broadcast.2591 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_2.1390), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_1/BiasAdd"}
  %add.436 = f32[128,256]{1,0:T(8,128)} add(f32[128,256]{1,0:T(8,128)} %convolution.337, f32[128,256]{1,0:T(8,128)} %broadcast.2591), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_1/BiasAdd"}
  %constant.2251 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2590 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2251), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  ROOT %maximum.143 = f32[128,256]{1,0:T(8,128)} maximum(f32[128,256]{1,0:T(8,128)} %add.436, f32[128,256]{1,0:T(8,128)} %broadcast.2590), metadata={op_name="while/bottom_mlp_layer_1/Relu"}
}

%fused_computation.136.clone (param_0.2092: f32[128,256], param_1.1507: f32[256,128], param_2.1391: f32[128]) -> f32[128,128] {
  %param_0.2092 = f32[128,256]{1,0:T(8,128)} parameter(0)
  %param_1.1507 = f32[256,128]{1,0:T(8,128)} parameter(1)
  %convolution.338 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,256]{1,0:T(8,128)} %param_0.2092, f32[256,128]{1,0:T(8,128)} %param_1.1507), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_2/MatMul"}
  %param_2.1391 = f32[128]{0:T(256)} parameter(2)
  %broadcast.2593 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_2.1391), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_2/BiasAdd"}
  %add.437 = f32[128,128]{1,0:T(8,128)} add(f32[128,128]{1,0:T(8,128)} %convolution.338, f32[128,128]{1,0:T(8,128)} %broadcast.2593), metadata={op_type="BiasAdd" op_name="while/bottom_mlp_layer_2/BiasAdd"}
  %constant.2252 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2592 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2252), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %maximum.144 = f32[128,128]{1,0:T(8,128)} maximum(f32[128,128]{1,0:T(8,128)} %add.437, f32[128,128]{1,0:T(8,128)} %broadcast.2592), metadata={op_name="while/bottom_mlp_layer_2/Relu"}
}

%fused_computation.311.clone.clone (param_0.2093: f32[136,768]) -> f32[8,128] {
  %param_0.2093 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.780 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2093), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.364.clone.clone (param_0.2094: u32[128]) -> f32[128,8] {
  %param_0.2094 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2596 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2094), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.611 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.709 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2596, u32[128,8]{0,1:T(8,128)} %iota.611), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2254 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2595 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2254), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2253 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2594 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2253), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.592 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.709, f32[128,8]{0,1:T(8,128)} %broadcast.2595, f32[128,8]{0,1:T(8,128)} %broadcast.2594), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.134.clone.clone.clone (param_0.2095: f32[128], param_1.1508: f32[136,768], param_2.1392: u32[128]) -> f32[128,128] {
  %param_2.1392 = u32[128]{0:T(256)} parameter(2)
  %fusion.1207 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1392), kind=kLoop, calls=%fused_computation.364.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1508 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1206 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1508), kind=kLoop, calls=%fused_computation.311.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.339 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1207, f32[8,128]{1,0:T(8,128)} %fusion.1206), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2095 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2597 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2095), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.407 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.339, f32[128,128]{1,0:T(8,128)} %broadcast.2597), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.187.clone (param_0.2096: u32[128]) -> f32[128,128] {
  %param_0.2096 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2600 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2096), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.612 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.710 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2600, u32[128,128]{1,0:T(8,128)} %iota.612), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2256 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2599 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2256), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2255 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2598 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2255), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.593 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.710, f32[128,128]{1,0:T(8,128)} %broadcast.2599, f32[128,128]{1,0:T(8,128)} %broadcast.2598), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.95.clone (param_0.2097: f32[136,768], param_1.1509: f32[128], param_2.1393: u32[128], param_3.850: u32[128]) -> bf16[128,1,128] {
  %param_0.2097 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.781 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2097), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1393 = u32[128]{0:T(256)} parameter(2)
  %fusion.1209 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1393), kind=kLoop, calls=%fused_computation.187.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1509 = f32[128]{0:T(256)} parameter(1)
  %param_3.850 = u32[128]{0:T(256)} parameter(3)
  %fusion.1208 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1509, f32[136,768]{1,0:T(8,128)} %param_0.2097, u32[128]{0:T(256)} %param_3.850), kind=kOutput, calls=%fused_computation.134.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.340 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1209, f32[128,128]{1,0:T(8,128)} %fusion.1208), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.438 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.781, f32[128,128]{1,0:T(8,128)} %convolution.340), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.91 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.438), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.310.clone.clone (param_0.2098: f32[136,896]) -> f32[8,128] {
  %param_0.2098 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.782 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2098), slice={[128:136], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.362.clone.clone (param_0.2099: u32[128]) -> f32[128,8] {
  %param_0.2099 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2603 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2099), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.613 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.711 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2603, u32[128,8]{0,1:T(8,128)} %iota.613), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2258 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2602 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2258), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2257 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2601 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2257), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.594 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.711, f32[128,8]{0,1:T(8,128)} %broadcast.2602, f32[128,8]{0,1:T(8,128)} %broadcast.2601), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.133.clone.clone.clone (param_0.2100: f32[128], param_1.1510: f32[136,896], param_2.1394: u32[128]) -> f32[128,128] {
  %param_2.1394 = u32[128]{0:T(256)} parameter(2)
  %fusion.1212 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1394), kind=kLoop, calls=%fused_computation.362.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1510 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1211 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1510), kind=kLoop, calls=%fused_computation.310.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.341 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1212, f32[8,128]{1,0:T(8,128)} %fusion.1211), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2100 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2604 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2100), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.408 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.341, f32[128,128]{1,0:T(8,128)} %broadcast.2604), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.185.clone (param_0.2101: u32[128]) -> f32[128,128] {
  %param_0.2101 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2607 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2101), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.614 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.712 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2607, u32[128,128]{1,0:T(8,128)} %iota.614), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2260 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2606 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2260), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2259 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2605 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2259), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.595 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.712, f32[128,128]{1,0:T(8,128)} %broadcast.2606, f32[128,128]{1,0:T(8,128)} %broadcast.2605), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.93.clone (param_0.2102: f32[136,896], param_1.1511: f32[128], param_2.1395: u32[128], param_3.851: u32[128]) -> bf16[128,1,128] {
  %param_0.2102 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.783 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2102), slice={[0:128], [0:128]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1395 = u32[128]{0:T(256)} parameter(2)
  %fusion.1214 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1395), kind=kLoop, calls=%fused_computation.185.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1511 = f32[128]{0:T(256)} parameter(1)
  %param_3.851 = u32[128]{0:T(256)} parameter(3)
  %fusion.1213 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1511, f32[136,896]{1,0:T(8,128)} %param_0.2102, u32[128]{0:T(256)} %param_3.851), kind=kOutput, calls=%fused_computation.133.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.342 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1214, f32[128,128]{1,0:T(8,128)} %fusion.1213), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.439 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.783, f32[128,128]{1,0:T(8,128)} %convolution.342), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.92 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.439), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.309.clone.clone (param_0.2103: f32[136,896]) -> f32[8,128] {
  %param_0.2103 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.784 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2103), slice={[128:136], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.360.clone.clone (param_0.2104: u32[128]) -> f32[128,8] {
  %param_0.2104 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2610 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2104), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.615 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.713 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2610, u32[128,8]{0,1:T(8,128)} %iota.615), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2262 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2609 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2262), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2261 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2608 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2261), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.596 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.713, f32[128,8]{0,1:T(8,128)} %broadcast.2609, f32[128,8]{0,1:T(8,128)} %broadcast.2608), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.132.clone.clone.clone (param_0.2105: f32[128], param_1.1512: f32[136,896], param_2.1396: u32[128]) -> f32[128,128] {
  %param_2.1396 = u32[128]{0:T(256)} parameter(2)
  %fusion.1217 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1396), kind=kLoop, calls=%fused_computation.360.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1512 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1216 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1512), kind=kLoop, calls=%fused_computation.309.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.343 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1217, f32[8,128]{1,0:T(8,128)} %fusion.1216), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2105 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2611 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2105), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.409 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.343, f32[128,128]{1,0:T(8,128)} %broadcast.2611), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.183.clone (param_0.2106: u32[128]) -> f32[128,128] {
  %param_0.2106 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2614 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2106), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.616 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.714 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2614, u32[128,128]{1,0:T(8,128)} %iota.616), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2264 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2613 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2264), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2263 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2612 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2263), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.597 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.714, f32[128,128]{1,0:T(8,128)} %broadcast.2613, f32[128,128]{1,0:T(8,128)} %broadcast.2612), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.91.clone (param_0.2107: f32[136,896], param_1.1513: f32[128], param_2.1397: u32[128], param_3.852: u32[128]) -> bf16[128,1,128] {
  %param_0.2107 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.785 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2107), slice={[0:128], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1397 = u32[128]{0:T(256)} parameter(2)
  %fusion.1219 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1397), kind=kLoop, calls=%fused_computation.183.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1513 = f32[128]{0:T(256)} parameter(1)
  %param_3.852 = u32[128]{0:T(256)} parameter(3)
  %fusion.1218 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1513, f32[136,896]{1,0:T(8,128)} %param_0.2107, u32[128]{0:T(256)} %param_3.852), kind=kOutput, calls=%fused_computation.132.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.344 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1219, f32[128,128]{1,0:T(8,128)} %fusion.1218), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.440 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.785, f32[128,128]{1,0:T(8,128)} %convolution.344), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.93 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.440), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.308.clone.clone (param_0.2108: f32[136,768]) -> f32[8,128] {
  %param_0.2108 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.786 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2108), slice={[128:136], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.358.clone.clone (param_0.2109: u32[128]) -> f32[128,8] {
  %param_0.2109 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2617 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2109), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.617 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.715 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2617, u32[128,8]{0,1:T(8,128)} %iota.617), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2266 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2616 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2266), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2265 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2615 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2265), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.598 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.715, f32[128,8]{0,1:T(8,128)} %broadcast.2616, f32[128,8]{0,1:T(8,128)} %broadcast.2615), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.131.clone.clone.clone (param_0.2110: f32[128], param_1.1514: f32[136,768], param_2.1398: u32[128]) -> f32[128,128] {
  %param_2.1398 = u32[128]{0:T(256)} parameter(2)
  %fusion.1222 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1398), kind=kLoop, calls=%fused_computation.358.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1514 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1221 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1514), kind=kLoop, calls=%fused_computation.308.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.345 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1222, f32[8,128]{1,0:T(8,128)} %fusion.1221), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2110 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2618 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2110), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.410 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.345, f32[128,128]{1,0:T(8,128)} %broadcast.2618), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.181.clone (param_0.2111: u32[128]) -> f32[128,128] {
  %param_0.2111 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2621 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2111), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.618 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.716 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2621, u32[128,128]{1,0:T(8,128)} %iota.618), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2268 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2620 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2268), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2267 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2619 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2267), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.599 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.716, f32[128,128]{1,0:T(8,128)} %broadcast.2620, f32[128,128]{1,0:T(8,128)} %broadcast.2619), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.89.clone (param_0.2112: f32[136,768], param_1.1515: f32[128], param_2.1399: u32[128], param_3.853: u32[128]) -> bf16[128,1,128] {
  %param_0.2112 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.787 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2112), slice={[0:128], [128:256]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1399 = u32[128]{0:T(256)} parameter(2)
  %fusion.1224 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1399), kind=kLoop, calls=%fused_computation.181.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1515 = f32[128]{0:T(256)} parameter(1)
  %param_3.853 = u32[128]{0:T(256)} parameter(3)
  %fusion.1223 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1515, f32[136,768]{1,0:T(8,128)} %param_0.2112, u32[128]{0:T(256)} %param_3.853), kind=kOutput, calls=%fused_computation.131.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.346 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1224, f32[128,128]{1,0:T(8,128)} %fusion.1223), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.441 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.787, f32[128,128]{1,0:T(8,128)} %convolution.346), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.94 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.441), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.307.clone.clone (param_0.2113: f32[136,896]) -> f32[8,128] {
  %param_0.2113 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.788 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2113), slice={[128:136], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.356.clone.clone (param_0.2114: u32[128]) -> f32[128,8] {
  %param_0.2114 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2624 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2114), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.619 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.717 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2624, u32[128,8]{0,1:T(8,128)} %iota.619), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2270 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2623 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2270), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2269 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2622 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2269), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.600 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.717, f32[128,8]{0,1:T(8,128)} %broadcast.2623, f32[128,8]{0,1:T(8,128)} %broadcast.2622), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.130.clone.clone.clone (param_0.2115: f32[128], param_1.1516: f32[136,896], param_2.1400: u32[128]) -> f32[128,128] {
  %param_2.1400 = u32[128]{0:T(256)} parameter(2)
  %fusion.1227 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1400), kind=kLoop, calls=%fused_computation.356.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1516 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1226 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1516), kind=kLoop, calls=%fused_computation.307.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.347 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1227, f32[8,128]{1,0:T(8,128)} %fusion.1226), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2115 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2625 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2115), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.411 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.347, f32[128,128]{1,0:T(8,128)} %broadcast.2625), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.179.clone (param_0.2116: u32[128]) -> f32[128,128] {
  %param_0.2116 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2628 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2116), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.620 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.718 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2628, u32[128,128]{1,0:T(8,128)} %iota.620), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2272 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2627 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2272), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2271 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2626 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2271), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.601 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.718, f32[128,128]{1,0:T(8,128)} %broadcast.2627, f32[128,128]{1,0:T(8,128)} %broadcast.2626), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.87.clone (param_0.2117: f32[136,896], param_1.1517: f32[128], param_2.1401: u32[128], param_3.854: u32[128]) -> bf16[128,1,128] {
  %param_0.2117 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.789 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2117), slice={[0:128], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1401 = u32[128]{0:T(256)} parameter(2)
  %fusion.1229 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1401), kind=kLoop, calls=%fused_computation.179.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1517 = f32[128]{0:T(256)} parameter(1)
  %param_3.854 = u32[128]{0:T(256)} parameter(3)
  %fusion.1228 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1517, f32[136,896]{1,0:T(8,128)} %param_0.2117, u32[128]{0:T(256)} %param_3.854), kind=kOutput, calls=%fused_computation.130.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.348 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1229, f32[128,128]{1,0:T(8,128)} %fusion.1228), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.442 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.789, f32[128,128]{1,0:T(8,128)} %convolution.348), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.95 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.442), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.306.clone.clone (param_0.2118: f32[136,768]) -> f32[8,128] {
  %param_0.2118 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.790 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2118), slice={[128:136], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.354.clone.clone (param_0.2119: u32[128]) -> f32[128,8] {
  %param_0.2119 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2631 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2119), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.621 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.719 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2631, u32[128,8]{0,1:T(8,128)} %iota.621), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2274 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2630 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2274), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2273 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2629 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2273), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.602 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.719, f32[128,8]{0,1:T(8,128)} %broadcast.2630, f32[128,8]{0,1:T(8,128)} %broadcast.2629), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.129.clone.clone.clone (param_0.2120: f32[128], param_1.1518: f32[136,768], param_2.1402: u32[128]) -> f32[128,128] {
  %param_2.1402 = u32[128]{0:T(256)} parameter(2)
  %fusion.1232 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1402), kind=kLoop, calls=%fused_computation.354.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1518 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1231 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1518), kind=kLoop, calls=%fused_computation.306.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.349 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1232, f32[8,128]{1,0:T(8,128)} %fusion.1231), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2120 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2632 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2120), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.412 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.349, f32[128,128]{1,0:T(8,128)} %broadcast.2632), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.177.clone (param_0.2121: u32[128]) -> f32[128,128] {
  %param_0.2121 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2635 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2121), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.622 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.720 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2635, u32[128,128]{1,0:T(8,128)} %iota.622), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2276 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2634 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2276), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2275 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2633 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2275), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.603 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.720, f32[128,128]{1,0:T(8,128)} %broadcast.2634, f32[128,128]{1,0:T(8,128)} %broadcast.2633), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.85.clone (param_0.2122: f32[136,768], param_1.1519: f32[128], param_2.1403: u32[128], param_3.855: u32[128]) -> bf16[128,1,128] {
  %param_0.2122 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.791 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2122), slice={[0:128], [256:384]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1403 = u32[128]{0:T(256)} parameter(2)
  %fusion.1234 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1403), kind=kLoop, calls=%fused_computation.177.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1519 = f32[128]{0:T(256)} parameter(1)
  %param_3.855 = u32[128]{0:T(256)} parameter(3)
  %fusion.1233 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1519, f32[136,768]{1,0:T(8,128)} %param_0.2122, u32[128]{0:T(256)} %param_3.855), kind=kOutput, calls=%fused_computation.129.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.350 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1234, f32[128,128]{1,0:T(8,128)} %fusion.1233), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.443 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.791, f32[128,128]{1,0:T(8,128)} %convolution.350), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.96 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.443), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.305.clone.clone (param_0.2123: f32[136,768]) -> f32[8,128] {
  %param_0.2123 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.792 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2123), slice={[128:136], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.352.clone.clone (param_0.2124: u32[128]) -> f32[128,8] {
  %param_0.2124 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2638 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2124), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.623 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.721 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2638, u32[128,8]{0,1:T(8,128)} %iota.623), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2278 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2637 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2278), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2277 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2636 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2277), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.604 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.721, f32[128,8]{0,1:T(8,128)} %broadcast.2637, f32[128,8]{0,1:T(8,128)} %broadcast.2636), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.128.clone.clone.clone (param_0.2125: f32[128], param_1.1520: f32[136,768], param_2.1404: u32[128]) -> f32[128,128] {
  %param_2.1404 = u32[128]{0:T(256)} parameter(2)
  %fusion.1237 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1404), kind=kLoop, calls=%fused_computation.352.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1520 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1236 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1520), kind=kLoop, calls=%fused_computation.305.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.351 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1237, f32[8,128]{1,0:T(8,128)} %fusion.1236), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2125 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2639 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2125), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.413 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.351, f32[128,128]{1,0:T(8,128)} %broadcast.2639), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.175.clone (param_0.2126: u32[128]) -> f32[128,128] {
  %param_0.2126 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2642 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2126), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.624 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.722 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2642, u32[128,128]{1,0:T(8,128)} %iota.624), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2280 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2641 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2280), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2279 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2640 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2279), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.605 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.722, f32[128,128]{1,0:T(8,128)} %broadcast.2641, f32[128,128]{1,0:T(8,128)} %broadcast.2640), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.83.clone (param_0.2127: f32[136,768], param_1.1521: f32[128], param_2.1405: u32[128], param_3.856: u32[128]) -> bf16[128,1,128] {
  %param_0.2127 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.793 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2127), slice={[0:128], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1405 = u32[128]{0:T(256)} parameter(2)
  %fusion.1239 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1405), kind=kLoop, calls=%fused_computation.175.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1521 = f32[128]{0:T(256)} parameter(1)
  %param_3.856 = u32[128]{0:T(256)} parameter(3)
  %fusion.1238 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1521, f32[136,768]{1,0:T(8,128)} %param_0.2127, u32[128]{0:T(256)} %param_3.856), kind=kOutput, calls=%fused_computation.128.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.352 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1239, f32[128,128]{1,0:T(8,128)} %fusion.1238), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.444 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.793, f32[128,128]{1,0:T(8,128)} %convolution.352), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.97 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.444), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.304.clone.clone (param_0.2128: f32[136,896]) -> f32[8,128] {
  %param_0.2128 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.794 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2128), slice={[128:136], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.350.clone.clone (param_0.2129: u32[128]) -> f32[128,8] {
  %param_0.2129 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2645 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2129), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.625 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.723 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2645, u32[128,8]{0,1:T(8,128)} %iota.625), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2282 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2644 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2282), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2281 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2643 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2281), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.606 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.723, f32[128,8]{0,1:T(8,128)} %broadcast.2644, f32[128,8]{0,1:T(8,128)} %broadcast.2643), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.127.clone.clone.clone (param_0.2130: f32[128], param_1.1522: f32[136,896], param_2.1406: u32[128]) -> f32[128,128] {
  %param_2.1406 = u32[128]{0:T(256)} parameter(2)
  %fusion.1242 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1406), kind=kLoop, calls=%fused_computation.350.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1522 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1241 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1522), kind=kLoop, calls=%fused_computation.304.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.353 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1242, f32[8,128]{1,0:T(8,128)} %fusion.1241), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2130 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2646 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2130), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.414 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.353, f32[128,128]{1,0:T(8,128)} %broadcast.2646), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.173.clone (param_0.2131: u32[128]) -> f32[128,128] {
  %param_0.2131 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2649 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2131), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.626 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.724 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2649, u32[128,128]{1,0:T(8,128)} %iota.626), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2284 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2648 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2284), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2283 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2647 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2283), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.607 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.724, f32[128,128]{1,0:T(8,128)} %broadcast.2648, f32[128,128]{1,0:T(8,128)} %broadcast.2647), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.81.clone (param_0.2132: f32[136,896], param_1.1523: f32[128], param_2.1407: u32[128], param_3.857: u32[128]) -> bf16[128,1,128] {
  %param_0.2132 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.795 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2132), slice={[0:128], [384:512]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1407 = u32[128]{0:T(256)} parameter(2)
  %fusion.1244 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1407), kind=kLoop, calls=%fused_computation.173.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1523 = f32[128]{0:T(256)} parameter(1)
  %param_3.857 = u32[128]{0:T(256)} parameter(3)
  %fusion.1243 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1523, f32[136,896]{1,0:T(8,128)} %param_0.2132, u32[128]{0:T(256)} %param_3.857), kind=kOutput, calls=%fused_computation.127.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.354 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1244, f32[128,128]{1,0:T(8,128)} %fusion.1243), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.445 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.795, f32[128,128]{1,0:T(8,128)} %convolution.354), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.98 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.445), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.303.clone.clone (param_0.2133: f32[136,768]) -> f32[8,128] {
  %param_0.2133 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.796 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2133), slice={[128:136], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.348.clone.clone (param_0.2134: u32[128]) -> f32[128,8] {
  %param_0.2134 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2652 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2134), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.627 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.725 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2652, u32[128,8]{0,1:T(8,128)} %iota.627), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2286 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2651 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2286), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2285 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2650 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2285), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.608 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.725, f32[128,8]{0,1:T(8,128)} %broadcast.2651, f32[128,8]{0,1:T(8,128)} %broadcast.2650), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.126.clone.clone.clone (param_0.2135: f32[128], param_1.1524: f32[136,768], param_2.1408: u32[128]) -> f32[128,128] {
  %param_2.1408 = u32[128]{0:T(256)} parameter(2)
  %fusion.1247 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1408), kind=kLoop, calls=%fused_computation.348.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1524 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1246 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1524), kind=kLoop, calls=%fused_computation.303.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.355 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1247, f32[8,128]{1,0:T(8,128)} %fusion.1246), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2135 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2653 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2135), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.415 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.355, f32[128,128]{1,0:T(8,128)} %broadcast.2653), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.171.clone (param_0.2136: u32[128]) -> f32[128,128] {
  %param_0.2136 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2656 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2136), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.628 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.726 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2656, u32[128,128]{1,0:T(8,128)} %iota.628), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2288 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2655 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2288), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2287 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2654 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2287), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.609 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.726, f32[128,128]{1,0:T(8,128)} %broadcast.2655, f32[128,128]{1,0:T(8,128)} %broadcast.2654), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.79.clone (param_0.2137: f32[136,768], param_1.1525: f32[128], param_2.1409: u32[128], param_3.858: u32[128]) -> bf16[128,1,128] {
  %param_0.2137 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.797 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2137), slice={[0:128], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1409 = u32[128]{0:T(256)} parameter(2)
  %fusion.1249 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1409), kind=kLoop, calls=%fused_computation.171.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1525 = f32[128]{0:T(256)} parameter(1)
  %param_3.858 = u32[128]{0:T(256)} parameter(3)
  %fusion.1248 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1525, f32[136,768]{1,0:T(8,128)} %param_0.2137, u32[128]{0:T(256)} %param_3.858), kind=kOutput, calls=%fused_computation.126.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.356 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1249, f32[128,128]{1,0:T(8,128)} %fusion.1248), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.446 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.797, f32[128,128]{1,0:T(8,128)} %convolution.356), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.99 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.446), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.302.clone.clone (param_0.2138: f32[136,896]) -> f32[8,128] {
  %param_0.2138 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.798 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2138), slice={[128:136], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.346.clone.clone (param_0.2139: u32[128]) -> f32[128,8] {
  %param_0.2139 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2659 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2139), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.629 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.727 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2659, u32[128,8]{0,1:T(8,128)} %iota.629), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2290 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2658 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2290), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2289 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2657 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2289), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.610 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.727, f32[128,8]{0,1:T(8,128)} %broadcast.2658, f32[128,8]{0,1:T(8,128)} %broadcast.2657), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.125.clone.clone.clone (param_0.2140: f32[128], param_1.1526: f32[136,896], param_2.1410: u32[128]) -> f32[128,128] {
  %param_2.1410 = u32[128]{0:T(256)} parameter(2)
  %fusion.1252 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1410), kind=kLoop, calls=%fused_computation.346.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1526 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1251 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1526), kind=kLoop, calls=%fused_computation.302.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.357 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1252, f32[8,128]{1,0:T(8,128)} %fusion.1251), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2140 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2660 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2140), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.416 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.357, f32[128,128]{1,0:T(8,128)} %broadcast.2660), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.169.clone (param_0.2141: u32[128]) -> f32[128,128] {
  %param_0.2141 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2663 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2141), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.630 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.728 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2663, u32[128,128]{1,0:T(8,128)} %iota.630), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2292 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2662 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2292), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2291 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2661 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2291), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.611 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.728, f32[128,128]{1,0:T(8,128)} %broadcast.2662, f32[128,128]{1,0:T(8,128)} %broadcast.2661), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.77.clone (param_0.2142: f32[136,896], param_1.1527: f32[128], param_2.1411: u32[128], param_3.859: u32[128]) -> bf16[128,1,128] {
  %param_0.2142 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.799 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2142), slice={[0:128], [512:640]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1411 = u32[128]{0:T(256)} parameter(2)
  %fusion.1254 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1411), kind=kLoop, calls=%fused_computation.169.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1527 = f32[128]{0:T(256)} parameter(1)
  %param_3.859 = u32[128]{0:T(256)} parameter(3)
  %fusion.1253 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1527, f32[136,896]{1,0:T(8,128)} %param_0.2142, u32[128]{0:T(256)} %param_3.859), kind=kOutput, calls=%fused_computation.125.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.358 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1254, f32[128,128]{1,0:T(8,128)} %fusion.1253), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.447 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.799, f32[128,128]{1,0:T(8,128)} %convolution.358), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.100 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.447), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.301.clone.clone (param_0.2143: f32[136,768]) -> f32[8,128] {
  %param_0.2143 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.800 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2143), slice={[128:136], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.344.clone.clone (param_0.2144: u32[128]) -> f32[128,8] {
  %param_0.2144 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2666 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2144), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.631 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.729 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2666, u32[128,8]{0,1:T(8,128)} %iota.631), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2294 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2665 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2294), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2293 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2664 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2293), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.612 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.729, f32[128,8]{0,1:T(8,128)} %broadcast.2665, f32[128,8]{0,1:T(8,128)} %broadcast.2664), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.124.clone.clone.clone (param_0.2145: f32[128], param_1.1528: f32[136,768], param_2.1412: u32[128]) -> f32[128,128] {
  %param_2.1412 = u32[128]{0:T(256)} parameter(2)
  %fusion.1257 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1412), kind=kLoop, calls=%fused_computation.344.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1528 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1256 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1528), kind=kLoop, calls=%fused_computation.301.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.359 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1257, f32[8,128]{1,0:T(8,128)} %fusion.1256), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2145 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2667 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2145), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.417 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.359, f32[128,128]{1,0:T(8,128)} %broadcast.2667), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.167.clone (param_0.2146: u32[128]) -> f32[128,128] {
  %param_0.2146 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2670 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2146), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.632 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.730 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2670, u32[128,128]{1,0:T(8,128)} %iota.632), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2296 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2669 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2296), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2295 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2668 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2295), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.613 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.730, f32[128,128]{1,0:T(8,128)} %broadcast.2669, f32[128,128]{1,0:T(8,128)} %broadcast.2668), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.75.clone (param_0.2147: f32[136,768], param_1.1529: f32[128], param_2.1413: u32[128], param_3.860: u32[128]) -> bf16[128,1,128] {
  %param_0.2147 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.801 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2147), slice={[0:128], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1413 = u32[128]{0:T(256)} parameter(2)
  %fusion.1259 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1413), kind=kLoop, calls=%fused_computation.167.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1529 = f32[128]{0:T(256)} parameter(1)
  %param_3.860 = u32[128]{0:T(256)} parameter(3)
  %fusion.1258 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1529, f32[136,768]{1,0:T(8,128)} %param_0.2147, u32[128]{0:T(256)} %param_3.860), kind=kOutput, calls=%fused_computation.124.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.360 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1259, f32[128,128]{1,0:T(8,128)} %fusion.1258), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.448 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.801, f32[128,128]{1,0:T(8,128)} %convolution.360), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.101 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.448), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.300.clone.clone (param_0.2148: f32[136,896]) -> f32[8,128] {
  %param_0.2148 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.802 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2148), slice={[128:136], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.342.clone.clone (param_0.2149: u32[128]) -> f32[128,8] {
  %param_0.2149 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2673 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2149), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.633 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.731 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2673, u32[128,8]{0,1:T(8,128)} %iota.633), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2298 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2672 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2298), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2297 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2671 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2297), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.614 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.731, f32[128,8]{0,1:T(8,128)} %broadcast.2672, f32[128,8]{0,1:T(8,128)} %broadcast.2671), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.123.clone.clone.clone (param_0.2150: f32[128], param_1.1530: f32[136,896], param_2.1414: u32[128]) -> f32[128,128] {
  %param_2.1414 = u32[128]{0:T(256)} parameter(2)
  %fusion.1262 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1414), kind=kLoop, calls=%fused_computation.342.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1530 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1261 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1530), kind=kLoop, calls=%fused_computation.300.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.361 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1262, f32[8,128]{1,0:T(8,128)} %fusion.1261), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2150 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2674 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2150), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.418 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.361, f32[128,128]{1,0:T(8,128)} %broadcast.2674), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.165.clone (param_0.2151: u32[128]) -> f32[128,128] {
  %param_0.2151 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2677 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2151), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.634 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.732 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2677, u32[128,128]{1,0:T(8,128)} %iota.634), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2300 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2676 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2300), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2299 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2675 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2299), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.615 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.732, f32[128,128]{1,0:T(8,128)} %broadcast.2676, f32[128,128]{1,0:T(8,128)} %broadcast.2675), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.73.clone (param_0.2152: f32[136,896], param_1.1531: f32[128], param_2.1415: u32[128], param_3.861: u32[128]) -> bf16[128,1,128] {
  %param_0.2152 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.803 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2152), slice={[0:128], [640:768]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1415 = u32[128]{0:T(256)} parameter(2)
  %fusion.1264 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1415), kind=kLoop, calls=%fused_computation.165.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1531 = f32[128]{0:T(256)} parameter(1)
  %param_3.861 = u32[128]{0:T(256)} parameter(3)
  %fusion.1263 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1531, f32[136,896]{1,0:T(8,128)} %param_0.2152, u32[128]{0:T(256)} %param_3.861), kind=kOutput, calls=%fused_computation.123.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.362 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1264, f32[128,128]{1,0:T(8,128)} %fusion.1263), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.449 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.803, f32[128,128]{1,0:T(8,128)} %convolution.362), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.102 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.449), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.299.clone.clone (param_0.2153: f32[136,896]) -> f32[8,128] {
  %param_0.2153 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.804 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2153), slice={[128:136], [768:896]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.340.clone.clone (param_0.2154: u32[128]) -> f32[128,8] {
  %param_0.2154 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2680 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2154), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.635 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.733 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2680, u32[128,8]{0,1:T(8,128)} %iota.635), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2302 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2679 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2302), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2301 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2678 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2301), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.616 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.733, f32[128,8]{0,1:T(8,128)} %broadcast.2679, f32[128,8]{0,1:T(8,128)} %broadcast.2678), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.122.clone.clone.clone (param_0.2155: f32[128], param_1.1532: f32[136,896], param_2.1416: u32[128]) -> f32[128,128] {
  %param_2.1416 = u32[128]{0:T(256)} parameter(2)
  %fusion.1267 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1416), kind=kLoop, calls=%fused_computation.340.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1532 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1266 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1532), kind=kLoop, calls=%fused_computation.299.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.363 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1267, f32[8,128]{1,0:T(8,128)} %fusion.1266), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_0.2155 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2681 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2155), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.419 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.363, f32[128,128]{1,0:T(8,128)} %broadcast.2681), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.163.clone (param_0.2156: u32[128]) -> f32[128,128] {
  %param_0.2156 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2684 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2156), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.636 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %compare.734 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2684, u32[128,128]{1,0:T(8,128)} %iota.636), direction=EQ, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2304 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2683 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2304), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2303 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2682 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2303), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.617 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.734, f32[128,128]{1,0:T(8,128)} %broadcast.2683, f32[128,128]{1,0:T(8,128)} %broadcast.2682), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
}

%fused_computation.71.clone (param_0.2157: f32[136,896], param_1.1533: f32[128], param_2.1417: u32[128], param_3.862: u32[128]) -> bf16[128,1,128] {
  %param_0.2157 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.805 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2157), slice={[0:128], [768:896]}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_2.1417 = u32[128]{0:T(256)} parameter(2)
  %fusion.1269 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1417), kind=kLoop, calls=%fused_computation.163.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %param_1.1533 = f32[128]{0:T(256)} parameter(1)
  %param_3.862 = u32[128]{0:T(256)} parameter(3)
  %fusion.1268 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_1.1533, f32[136,896]{1,0:T(8,128)} %param_0.2157, u32[128]{0:T(256)} %param_3.862), kind=kOutput, calls=%fused_computation.122.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %convolution.364 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1269, f32[128,128]{1,0:T(8,128)} %fusion.1268), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %add.450 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.805, f32[128,128]{1,0:T(8,128)} %convolution.364), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %bitcast.103 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} bitcast(bf16[128,128]{1,0:T(8,128)(2,1)} %add.450), metadata={op_type="ConcatV2" op_name="while/concat"}
}

%fused_computation.17.clone (param_0.2158: bf16[128,13,128], param_1.1534: bf16[128,14,128]) -> bf16[128,27,128] {
  %param_1.1534 = bf16[128,14,128]{2,0,1:T(8,128)(2,1)} parameter(1)
  %constant.2305 = f32[]{:T(256)} constant(-inf)
  %pad.144 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} pad(bf16[128,14,128]{2,0,1:T(8,128)(2,1)} %param_1.1534, f32[]{:T(256)} %constant.2305), padding=0_0x0_13x0_0, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %param_0.2158 = bf16[128,13,128]{2,0,1:T(8,128)(2,1)} parameter(0)
  %pad.143 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} pad(bf16[128,13,128]{2,0,1:T(8,128)(2,1)} %param_0.2158, f32[]{:T(256)} %constant.2305), padding=0_0x14_0x0_0, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  ROOT %maximum.145 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} maximum(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %pad.144, bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %pad.143), metadata={op_type="ConcatV2" op_name="while/concat_1"}
}

%fused_computation.13.clone.clone.clone (param_0.2159: bf16[128,27,128]) -> bf16[128,27,128] {
  %param_0.2159 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(0)
  ROOT %copy.150 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} copy(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_0.2159), metadata={op_type="ConcatV2" op_name="while/concat_1"}
}

%fused_computation.14.clone (param_0.2160: pred[128,27,27], param_1.1535: bf16[128,27,128]) -> bf16[128,27,27] {
  %param_0.2160 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} parameter(0)
  %constant.2306 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2685 = f32[128,27,27]{2,1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2306), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %param_1.1535 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(1)
  %fusion.1272 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_1.1535), kind=kLoop, calls=%fused_computation.13.clone.clone.clone, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %convolution-base-dilated.12 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} convolution(bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1272, bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1272), window={size=128 stride=127 lhs_dilate=128}, dim_labels=0bf_0oi->0bf, metadata={op_type="BatchMatMulV2" op_name="while/MatMul"}
  ROOT %select.618 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} select(pred[128,27,27]{2,1,0:T(8,128)(4,1)} %param_0.2160, f32[128,27,27]{2,1,0:T(8,128)} %broadcast.2685, bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %convolution-base-dilated.12), metadata={op_name="while/Select"}
}

%fused_computation.26.clone.1.clone (param_0.2161: bf16[128,729], param_1.1536: bf16[128,128]) -> bf16[128,857] {
  %param_1.1536 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(1)
  %constant.2307 = f32[]{:T(256)} constant(-inf)
  %pad.146 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,128]{0,1:T(8,128)(2,1)} %param_1.1536, f32[]{:T(256)} %constant.2307), padding=0_0x0_729, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %param_0.2161 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(0)
  %pad.145 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,729]{0,1:T(8,128)(2,1)} %param_0.2161, f32[]{:T(256)} %constant.2307), padding=0_0x128_0, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  ROOT %maximum.146 = bf16[128,857]{0,1:T(8,128)(2,1)} maximum(bf16[128,857]{0,1:T(8,128)(2,1)} %pad.146, bf16[128,857]{0,1:T(8,128)(2,1)} %pad.145), metadata={op_type="ConcatV2" op_name="while/concat_2"}
}

%fused_computation.23.clone (param_0.2162: f32[857,1024], param_1.1537: bf16[128,729], param_2.1418: bf16[128,128], param_3.863: f32[1024]) -> f32[128,1024] {
  %param_1.1537 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(1)
  %param_2.1418 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(2)
  %fusion.1274 = bf16[128,857]{0,1:T(8,128)(2,1)} fusion(bf16[128,729]{0,1:T(8,128)(2,1)} %param_1.1537, bf16[128,128]{0,1:T(8,128)(2,1)} %param_2.1418), kind=kLoop, calls=%fused_computation.26.clone.1.clone, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %param_0.2162 = f32[857,1024]{1,0:T(8,128)} parameter(0)
  %convolution.365 = f32[128,1024]{1,0:T(8,128)} convolution(bf16[128,857]{0,1:T(8,128)(2,1)} %fusion.1274, f32[857,1024]{1,0:T(8,128)} %param_0.2162), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/top_mlp_layer_0/MatMul"}
  %param_3.863 = f32[1024]{0:T(1024)} parameter(3)
  %broadcast.2687 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[1024]{0:T(1024)} %param_3.863), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_0/BiasAdd"}
  %add.451 = f32[128,1024]{1,0:T(8,128)} add(f32[128,1024]{1,0:T(8,128)} %convolution.365, f32[128,1024]{1,0:T(8,128)} %broadcast.2687), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_0/BiasAdd"}
  %constant.2308 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2686 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2308), dimensions={}, metadata={op_name="while/top_mlp_layer_0/Relu"}
  ROOT %maximum.147 = f32[128,1024]{1,0:T(8,128)} maximum(f32[128,1024]{1,0:T(8,128)} %add.451, f32[128,1024]{1,0:T(8,128)} %broadcast.2686), metadata={op_name="while/top_mlp_layer_0/Relu"}
}

%fused_computation.21.clone (param_0.2163: f32[128,1024], param_1.1538: f32[1024,1024], param_2.1419: f32[1024]) -> f32[128,1024] {
  %param_0.2163 = f32[128,1024]{1,0:T(8,128)} parameter(0)
  %param_1.1538 = f32[1024,1024]{1,0:T(8,128)} parameter(1)
  %convolution.366 = f32[128,1024]{1,0:T(8,128)} convolution(f32[128,1024]{1,0:T(8,128)} %param_0.2163, f32[1024,1024]{1,0:T(8,128)} %param_1.1538), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/top_mlp_layer_1/MatMul"}
  %param_2.1419 = f32[1024]{0:T(1024)} parameter(2)
  %broadcast.2689 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[1024]{0:T(1024)} %param_2.1419), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_1/BiasAdd"}
  %add.452 = f32[128,1024]{1,0:T(8,128)} add(f32[128,1024]{1,0:T(8,128)} %convolution.366, f32[128,1024]{1,0:T(8,128)} %broadcast.2689), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_1/BiasAdd"}
  %constant.2309 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2688 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2309), dimensions={}, metadata={op_name="while/top_mlp_layer_0/Relu"}
  ROOT %maximum.148 = f32[128,1024]{1,0:T(8,128)} maximum(f32[128,1024]{1,0:T(8,128)} %add.452, f32[128,1024]{1,0:T(8,128)} %broadcast.2688), metadata={op_name="while/top_mlp_layer_1/Relu"}
}

%fused_computation.32.clone (param_0.2164: f32[128,1024], param_1.1539: f32[1024,512], param_2.1420: f32[512]) -> f32[128,512] {
  %param_0.2164 = f32[128,1024]{1,0:T(8,128)} parameter(0)
  %param_1.1539 = f32[1024,512]{1,0:T(8,128)} parameter(1)
  %convolution.367 = f32[128,512]{1,0:T(8,128)} convolution(f32[128,1024]{1,0:T(8,128)} %param_0.2164, f32[1024,512]{1,0:T(8,128)} %param_1.1539), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/top_mlp_layer_2/MatMul"}
  %param_2.1420 = f32[512]{0:T(512)} parameter(2)
  %broadcast.2691 = f32[128,512]{1,0:T(8,128)} broadcast(f32[512]{0:T(512)} %param_2.1420), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_2/BiasAdd"}
  %add.453 = f32[128,512]{1,0:T(8,128)} add(f32[128,512]{1,0:T(8,128)} %convolution.367, f32[128,512]{1,0:T(8,128)} %broadcast.2691), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_2/BiasAdd"}
  %constant.2310 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2690 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2310), dimensions={}, metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  ROOT %maximum.149 = f32[128,512]{1,0:T(8,128)} maximum(f32[128,512]{1,0:T(8,128)} %add.453, f32[128,512]{1,0:T(8,128)} %broadcast.2690), metadata={op_name="while/top_mlp_layer_2/Relu"}
}

%scalar_add_computation (scalar_lhs: f32[], scalar_rhs: f32[]) -> f32[] {
  %scalar_rhs = f32[]{:T(256)} parameter(1)
  %scalar_lhs = f32[]{:T(256)} parameter(0)
  ROOT %add.181 = f32[]{:T(256)} add(f32[]{:T(256)} %scalar_lhs, f32[]{:T(256)} %scalar_rhs)
}

%fused_computation.58.clone (param_0.2165: f32[256], param_1.1540: f32[256], param_2.1421: f32[128,512], param_3.864: f32[512,256]) -> (f32[128], f32[128,256]) {
  %param_2.1421 = f32[128,512]{1,0:T(8,128)} parameter(2)
  %param_3.864 = f32[512,256]{1,0:T(8,128)} parameter(3)
  %convolution.368 = f32[128,256]{1,0:T(8,128)} convolution(f32[128,512]{1,0:T(8,128)} %param_2.1421, f32[512,256]{1,0:T(8,128)} %param_3.864), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="while/top_mlp_layer_3/MatMul"}
  %param_1.1540 = f32[256]{0:T(256)} parameter(1)
  %broadcast.2694 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_1.1540), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %add.454 = f32[128,256]{1,0:T(8,128)} add(f32[128,256]{1,0:T(8,128)} %convolution.368, f32[128,256]{1,0:T(8,128)} %broadcast.2694), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %constant.2311 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2693 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2311), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %maximum.150 = f32[128,256]{1,0:T(8,128)} maximum(f32[128,256]{1,0:T(8,128)} %add.454, f32[128,256]{1,0:T(8,128)} %broadcast.2693), metadata={op_name="while/top_mlp_layer_3/Relu"}
  %param_0.2165 = f32[256]{0:T(256)} parameter(0)
  %broadcast.2692 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_0.2165), dimensions={1}
  %multiply.420 = f32[128,256]{1,0:T(8,128)} multiply(f32[128,256]{1,0:T(8,128)} %maximum.150, f32[128,256]{1,0:T(8,128)} %broadcast.2692)
  %reduce.38 = f32[128]{0:T(256)} reduce(f32[128,256]{1,0:T(8,128)} %multiply.420, f32[]{:T(256)} %constant.2311), dimensions={1}, to_apply=%scalar_add_computation
  ROOT %tuple.346 = (f32[128]{0:T(256)}, f32[128,256]{1,0:T(8,128)}) tuple(f32[128]{0:T(256)} %reduce.38, f32[128,256]{1,0:T(8,128)} %convolution.368)
}

%region_0.100 (Arg_0.101: f32[], Arg_1.102: f32[]) -> f32[] {
  %Arg_1.102 = f32[]{:T(256)} parameter(1)
  %Arg_0.101 = f32[]{:T(256)} parameter(0)
  ROOT %add.13 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.101, f32[]{:T(256)} %Arg_1.102), metadata={op_name="while/training/gradients/while/top_mlp_layer_4/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.765.clone (param_0.2166: f32[128], param_1.1541: f32[128], param_2.1422: f32[]) -> (f32[], f32[128,1]) {
  %param_1.1541 = f32[128]{0:T(256)} parameter(1)
  %param_2.1422 = f32[]{:T(256)} parameter(2)
  %broadcast.2696 = f32[128]{0:T(256)} broadcast(f32[]{:T(256)} %param_2.1422), dimensions={}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_4/BiasAdd"}
  %add.455 = f32[128]{0:T(256)} add(f32[128]{0:T(256)} %param_1.1541, f32[128]{0:T(256)} %broadcast.2696), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_4/BiasAdd"}
  %bitcast.105 = f32[128,1]{0,1:T(2,128)} bitcast(f32[128]{0:T(256)} %add.455), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_4/BiasAdd"}
  %constant.2312 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2695 = f32[128,1]{0,1:T(2,128)} broadcast(f32[]{:T(256)} %constant.2312), dimensions={}, metadata={op_type="Const" op_name="while/binary_crossentropy/logistic_loss/zeros_like"}
  %compare.735 = pred[128,1]{0,1:T(8,128)(4,1)} compare(f32[128,1]{0,1:T(2,128)} %bitcast.105, f32[128,1]{0,1:T(2,128)} %broadcast.2695), direction=GE, metadata={op_type="GreaterEqual" op_name="while/binary_crossentropy/logistic_loss/GreaterEqual"}
  %constant.2314 = f32[]{:T(256)} constant(0.000122070312), metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %broadcast.2698 = f32[128,1]{0,1:T(2,128)} broadcast(f32[]{:T(256)} %constant.2314), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %select.622 = f32[128,1]{0,1:T(2,128)} select(pred[128,1]{0,1:T(8,128)(4,1)} %compare.735, f32[128,1]{0,1:T(2,128)} %broadcast.2698, f32[128,1]{0,1:T(2,128)} %broadcast.2695), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_grad/Select"}
  %constant.2315 = f32[]{:T(256)} constant(-0.000122070312), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %broadcast.2699 = f32[128,1]{0,1:T(2,128)} broadcast(f32[]{:T(256)} %constant.2315), dimensions={}, metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %param_0.2166 = f32[128]{0:T(256)} parameter(0)
  %bitcast.106 = f32[128,1]{0,1:T(2,128)} bitcast(f32[128]{0:T(256)} %param_0.2166), metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %multiply.423 = f32[128,1]{0,1:T(2,128)} multiply(f32[128,1]{0,1:T(2,128)} %broadcast.2699, f32[128,1]{0,1:T(2,128)} %bitcast.106), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/mul_grad/Mul"}
  %add.457 = f32[128,1]{0,1:T(2,128)} add(f32[128,1]{0,1:T(2,128)} %select.622, f32[128,1]{0,1:T(2,128)} %multiply.423), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %constant.2313 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2697 = f32[128,1]{0,1:T(2,128)} broadcast(f32[]{:T(256)} %constant.2313), dimensions={}, metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/Reciprocal"}
  %negate.25 = f32[128,1]{0,1:T(2,128)} negate(f32[128,1]{0,1:T(2,128)} %bitcast.105), metadata={op_type="Neg" op_name="while/binary_crossentropy/logistic_loss/Neg"}
  %select.619 = f32[128,1]{0,1:T(2,128)} select(pred[128,1]{0,1:T(8,128)(4,1)} %compare.735, f32[128,1]{0,1:T(2,128)} %negate.25, f32[128,1]{0,1:T(2,128)} %bitcast.105), metadata={op_name="while/binary_crossentropy/logistic_loss/Select_1"}
  %exponential.6 = f32[128,1]{0,1:T(2,128)} exponential(f32[128,1]{0,1:T(2,128)} %select.619), metadata={op_name="while/binary_crossentropy/logistic_loss/Exp"}
  %add.456 = f32[128,1]{0,1:T(2,128)} add(f32[128,1]{0,1:T(2,128)} %broadcast.2697, f32[128,1]{0,1:T(2,128)} %exponential.6), metadata={op_type="AddV2" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/add"}
  %divide.10 = f32[128,1]{0,1:T(2,128)} divide(f32[128,1]{0,1:T(2,128)} %broadcast.2697, f32[128,1]{0,1:T(2,128)} %add.456), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/Reciprocal"}
  %multiply.421 = f32[128,1]{0,1:T(2,128)} multiply(f32[128,1]{0,1:T(2,128)} %broadcast.2698, f32[128,1]{0,1:T(2,128)} %divide.10), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Log1p_grad/mul"}
  %multiply.422 = f32[128,1]{0,1:T(2,128)} multiply(f32[128,1]{0,1:T(2,128)} %multiply.421, f32[128,1]{0,1:T(2,128)} %exponential.6), metadata={op_type="Mul" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Exp_grad/mul"}
  %select.621 = f32[128,1]{0,1:T(2,128)} select(pred[128,1]{0,1:T(8,128)(4,1)} %compare.735, f32[128,1]{0,1:T(2,128)} %broadcast.2695, f32[128,1]{0,1:T(2,128)} %multiply.422), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/Select_1"}
  %add.458 = f32[128,1]{0,1:T(2,128)} add(f32[128,1]{0,1:T(2,128)} %add.457, f32[128,1]{0,1:T(2,128)} %select.621), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %select.620 = f32[128,1]{0,1:T(2,128)} select(pred[128,1]{0,1:T(8,128)(4,1)} %compare.735, f32[128,1]{0,1:T(2,128)} %multiply.422, f32[128,1]{0,1:T(2,128)} %broadcast.2695), metadata={op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Select_1_grad/Select"}
  %negate.26 = f32[128,1]{0,1:T(2,128)} negate(f32[128,1]{0,1:T(2,128)} %select.620), metadata={op_type="Neg" op_name="while/training/gradients/while/binary_crossentropy/logistic_loss/Neg_grad/Neg"}
  %add.459 = f32[128,1]{0,1:T(2,128)} add(f32[128,1]{0,1:T(2,128)} %add.458, f32[128,1]{0,1:T(2,128)} %negate.26), metadata={op_type="AddN" op_name="while/training/gradients/AddN"}
  %reduce.39 = f32[]{:T(256)} reduce(f32[128,1]{0,1:T(2,128)} %add.459, f32[]{:T(256)} %constant.2312), dimensions={0,1}, to_apply=%region_0.100
  ROOT %tuple.347 = (f32[]{:T(256)}, f32[128,1]{0,1:T(2,128)}) tuple(f32[]{:T(256)} %reduce.39, f32[128,1]{0,1:T(2,128)} %add.459)
}

%region_0.108 (Arg_0.109: f32[], Arg_1.110: f32[]) -> f32[] {
  %Arg_1.110 = f32[]{:T(256)} parameter(1)
  %Arg_0.109 = f32[]{:T(256)} parameter(0)
  ROOT %add.15 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.109, f32[]{:T(256)} %Arg_1.110), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.57.clone (param_0.2167: f32[128], param_1.1542: f32[256], param_2.1423: f32[128,256], param_3.865: f32[256]) -> (f32[256], pred[128,256]) {
  %param_2.1423 = f32[128,256]{1,0:T(8,128)} parameter(2)
  %param_3.865 = f32[256]{0:T(256)} parameter(3)
  %broadcast.2703 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_3.865), dimensions={1}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %add.460 = f32[128,256]{1,0:T(8,128)} add(f32[128,256]{1,0:T(8,128)} %param_2.1423, f32[128,256]{1,0:T(8,128)} %broadcast.2703), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %constant.2316 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2700 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2316), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %maximum.151 = f32[128,256]{1,0:T(8,128)} maximum(f32[128,256]{1,0:T(8,128)} %add.460, f32[128,256]{1,0:T(8,128)} %broadcast.2700), metadata={op_name="while/top_mlp_layer_3/Relu"}
  %compare.736 = pred[128,256]{1,0:T(8,128)(4,1)} compare(f32[128,256]{1,0:T(8,128)} %maximum.151, f32[128,256]{1,0:T(8,128)} %broadcast.2700), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %param_0.2167 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2702 = f32[128,256]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2167), dimensions={0}
  %param_1.1542 = f32[256]{0:T(256)} parameter(1)
  %broadcast.2701 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_1.1542), dimensions={1}
  %multiply.424 = f32[128,256]{1,0:T(8,128)} multiply(f32[128,256]{1,0:T(8,128)} %broadcast.2702, f32[128,256]{1,0:T(8,128)} %broadcast.2701), metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul"}
  %select.623 = f32[128,256]{1,0:T(8,128)} select(pred[128,256]{1,0:T(8,128)(4,1)} %compare.736, f32[128,256]{1,0:T(8,128)} %multiply.424, f32[128,256]{1,0:T(8,128)} %broadcast.2700), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %reduce.40 = f32[256]{0:T(256)} reduce(f32[128,256]{1,0:T(8,128)} %select.623, f32[]{:T(256)} %constant.2316), dimensions={0}, to_apply=%region_0.108, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
  ROOT %tuple.348 = (f32[256]{0:T(256)}, pred[128,256]{1,0:T(8,128)(4,1)}) tuple(f32[256]{0:T(256)} %reduce.40, pred[128,256]{1,0:T(8,128)(4,1)} %compare.736)
}

%fused_computation.55.clone.2.clone.clone.clone (param_0.2168: pred[128,256], param_1.1543: f32[128], param_2.1424: f32[256]) -> f32[128,256] {
  %param_0.2168 = pred[128,256]{1,0:T(8,128)(4,1)} parameter(0)
  %param_1.1543 = f32[128]{0:T(256)} parameter(1)
  %broadcast.2705 = f32[128,256]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_1.1543), dimensions={0}
  %param_2.1424 = f32[256]{0:T(256)} parameter(2)
  %broadcast.2704 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_2.1424), dimensions={1}
  %multiply.425 = f32[128,256]{1,0:T(8,128)} multiply(f32[128,256]{1,0:T(8,128)} %broadcast.2705, f32[128,256]{1,0:T(8,128)} %broadcast.2704), metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul"}
  %constant.2317 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2706 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2317), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  ROOT %select.624 = f32[128,256]{1,0:T(8,128)} select(pred[128,256]{1,0:T(8,128)(4,1)} %param_0.2168, f32[128,256]{1,0:T(8,128)} %multiply.425, f32[128,256]{1,0:T(8,128)} %broadcast.2706), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
}

%region_0.120 (Arg_0.121: f32[], Arg_1.122: f32[]) -> f32[] {
  %Arg_1.122 = f32[]{:T(256)} parameter(1)
  %Arg_0.121 = f32[]{:T(256)} parameter(0)
  ROOT %add.18 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.121, f32[]{:T(256)} %Arg_1.122), metadata={op_name="while/training/gradients/while/top_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.772.clone (param_0.2169: f32[512,256], param_1.1544: pred[128,256], param_2.1425: f32[128], param_3.866: f32[256], param_4.645: f32[128,512]) -> (f32[512], bf16[128,512]) {
  %param_4.645 = f32[128,512]{1,0:T(8,128)} parameter(4)
  %constant.2318 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2707 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2318), dimensions={}, metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  %compare.737 = pred[128,512]{1,0:T(8,128)(4,1)} compare(f32[128,512]{1,0:T(8,128)} %param_4.645, f32[128,512]{1,0:T(8,128)} %broadcast.2707), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %param_1.1544 = pred[128,256]{1,0:T(8,128)(4,1)} parameter(1)
  %param_2.1425 = f32[128]{0:T(256)} parameter(2)
  %param_3.866 = f32[256]{0:T(256)} parameter(3)
  %fusion.1281 = f32[128,256]{1,0:T(8,128)} fusion(pred[128,256]{1,0:T(8,128)(4,1)} %param_1.1544, f32[128]{0:T(256)} %param_2.1425, f32[256]{0:T(256)} %param_3.866), kind=kLoop, calls=%fused_computation.55.clone.2.clone.clone.clone, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  %param_0.2169 = f32[512,256]{1,0:T(8,128)} parameter(0)
  %convolution.369 = f32[128,512]{1,0:T(8,128)} convolution(f32[128,256]{1,0:T(8,128)} %fusion.1281, f32[512,256]{1,0:T(8,128)} %param_0.2169), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul"}
  %select.625 = f32[128,512]{1,0:T(8,128)} select(pred[128,512]{1,0:T(8,128)(4,1)} %compare.737, f32[128,512]{1,0:T(8,128)} %convolution.369, f32[128,512]{1,0:T(8,128)} %broadcast.2707), metadata={op_name="while/training/gradients/while/top_mlp_layer_2/Relu_grad/ReluGrad"}
  %reduce.41 = f32[512]{0:T(512)} reduce(f32[128,512]{1,0:T(8,128)} %select.625, f32[]{:T(256)} %constant.2318), dimensions={0}, to_apply=%region_0.120, metadata={op_name="while/training/gradients/while/top_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %convert.257 = bf16[128,512]{1,0:T(8,128)(2,1)} convert(f32[128,512]{1,0:T(8,128)} %select.625)
  ROOT %tuple.349 = (f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) tuple(f32[512]{0:T(512)} %reduce.41, bf16[128,512]{1,0:T(8,128)(2,1)} %convert.257)
}

%region_0.132 (Arg_0.133: f32[], Arg_1.134: f32[]) -> f32[] {
  %Arg_1.134 = f32[]{:T(256)} parameter(1)
  %Arg_0.133 = f32[]{:T(256)} parameter(0)
  ROOT %add.21 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.133, f32[]{:T(256)} %Arg_1.134), metadata={op_name="while/training/gradients/while/top_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.771.clone (param_0.2170: bf16[128,512], param_1.1545: f32[1024,512], param_2.1426: f32[128,1024]) -> (f32[1024], bf16[128,1024]) {
  %param_2.1426 = f32[128,1024]{1,0:T(8,128)} parameter(2)
  %constant.2319 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2708 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2319), dimensions={}, metadata={op_name="while/top_mlp_layer_0/Relu"}
  %compare.738 = pred[128,1024]{1,0:T(8,128)(4,1)} compare(f32[128,1024]{1,0:T(8,128)} %param_2.1426, f32[128,1024]{1,0:T(8,128)} %broadcast.2708), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %param_0.2170 = bf16[128,512]{1,0:T(8,128)(2,1)} parameter(0)
  %param_1.1545 = f32[1024,512]{1,0:T(8,128)} parameter(1)
  %convolution.370 = f32[128,1024]{1,0:T(8,128)} convolution(bf16[128,512]{1,0:T(8,128)(2,1)} %param_0.2170, f32[1024,512]{1,0:T(8,128)} %param_1.1545), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul"}
  %select.626 = f32[128,1024]{1,0:T(8,128)} select(pred[128,1024]{1,0:T(8,128)(4,1)} %compare.738, f32[128,1024]{1,0:T(8,128)} %convolution.370, f32[128,1024]{1,0:T(8,128)} %broadcast.2708), metadata={op_name="while/training/gradients/while/top_mlp_layer_1/Relu_grad/ReluGrad"}
  %reduce.42 = f32[1024]{0:T(1024)} reduce(f32[128,1024]{1,0:T(8,128)} %select.626, f32[]{:T(256)} %constant.2319), dimensions={0}, to_apply=%region_0.132, metadata={op_name="while/training/gradients/while/top_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %convert.258 = bf16[128,1024]{1,0:T(8,128)(2,1)} convert(f32[128,1024]{1,0:T(8,128)} %select.626)
  ROOT %tuple.350 = (f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) tuple(f32[1024]{0:T(1024)} %reduce.42, bf16[128,1024]{1,0:T(8,128)(2,1)} %convert.258)
}

%region_0.144 (Arg_0.145: f32[], Arg_1.146: f32[]) -> f32[] {
  %Arg_1.146 = f32[]{:T(256)} parameter(1)
  %Arg_0.145 = f32[]{:T(256)} parameter(0)
  ROOT %add.24 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.145, f32[]{:T(256)} %Arg_1.146), metadata={op_name="while/training/gradients/while/top_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.770.clone (param_0.2171: bf16[128,1024], param_1.1546: f32[1024,1024], param_2.1427: f32[128,1024]) -> (f32[1024], bf16[128,1024]) {
  %param_2.1427 = f32[128,1024]{1,0:T(8,128)} parameter(2)
  %constant.2320 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2709 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2320), dimensions={}, metadata={op_name="while/top_mlp_layer_0/Relu"}
  %compare.739 = pred[128,1024]{1,0:T(8,128)(4,1)} compare(f32[128,1024]{1,0:T(8,128)} %param_2.1427, f32[128,1024]{1,0:T(8,128)} %broadcast.2709), direction=GT, metadata={op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %param_0.2171 = bf16[128,1024]{1,0:T(8,128)(2,1)} parameter(0)
  %param_1.1546 = f32[1024,1024]{1,0:T(8,128)} parameter(1)
  %convolution.371 = f32[128,1024]{1,0:T(8,128)} convolution(bf16[128,1024]{1,0:T(8,128)(2,1)} %param_0.2171, f32[1024,1024]{1,0:T(8,128)} %param_1.1546), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul" profile_type={2}}, backend_config="{\"flag_configs\":[{\"flag_type\":\"XLA_SET_SPLIT_INPUT_OUTPUT_DMAS\",\"value\":{\"boolean_value\":false}},{\"flag_type\":\"XLA_TPU_SMALL_OPERAND_COUNT_FOR_LOOP_FUSION\",\"value\":{\"integer_value\":\"8\"}},{\"flag_type\":\"XLA_JF_FUSION_MAX_VMEM_MIB\",\"value\":{\"double_value\":15.35}},{\"flag_type\":\"XLA_SPLIT_CLUSTER_GAP\",\"value\":{\"integer_value\":\"512\"}},{\"flag_type\":\"XLA_SPLIT_CLUSTER_SIZE\",\"value\":{\"integer_value\":\"6\"}},{\"flag_type\":\"XLA_TPU_MAX_CLUSTERED_LOADS\",\"value\":{\"integer_value\":\"12\"}},{\"flag_type\":\"XLA_TPU_HBM_BW\",\"value\":{\"double_value\":460}},{\"flag_type\":\"XLA_TPU_HBM_INITIAL_CYCLE_PENALTY\",\"value\":{\"integer_value\":\"300\"}}],\"scoped_memory_configs\":[]}"
  %select.627 = f32[128,1024]{1,0:T(8,128)} select(pred[128,1024]{1,0:T(8,128)(4,1)} %compare.739, f32[128,1024]{1,0:T(8,128)} %convolution.371, f32[128,1024]{1,0:T(8,128)} %broadcast.2709), metadata={op_name="while/training/gradients/while/top_mlp_layer_0/Relu_grad/ReluGrad"}
  %reduce.43 = f32[1024]{0:T(1024)} reduce(f32[128,1024]{1,0:T(8,128)} %select.627, f32[]{:T(256)} %constant.2320), dimensions={0}, to_apply=%region_0.144, metadata={op_name="while/training/gradients/while/top_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %convert.259 = bf16[128,1024]{1,0:T(8,128)(2,1)} convert(f32[128,1024]{1,0:T(8,128)} %select.627)
  ROOT %tuple.351 = (f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) tuple(f32[1024]{0:T(1024)} %reduce.43, bf16[128,1024]{1,0:T(8,128)(2,1)} %convert.259)
}

%fused_computation.28.clone (param_0.2172: pred[128,729], param_1.1547: f32[128,857]) -> bf16[128,729] {
  %param_0.2172 = pred[128,729]{0,1:T(8,128)(4,1)} parameter(0)
  %constant.2321 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2710 = f32[128,729]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2321), dimensions={}, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %param_1.1547 = f32[128,857]{0,1:T(8,128)} parameter(1)
  %slice.806 = bf16[128,729]{0,1:T(8,128)(2,1)} slice(f32[128,857]{0,1:T(8,128)} %param_1.1547), slice={[0:128], [128:857]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice_1"}
  ROOT %select.628 = bf16[128,729]{0,1:T(8,128)(2,1)} select(pred[128,729]{0,1:T(8,128)(4,1)} %param_0.2172, f32[128,729]{0,1:T(8,128)} %broadcast.2710, bf16[128,729]{0,1:T(8,128)(2,1)} %slice.806), metadata={op_name="while/training/gradients/while/Select_grad/Select_1"}
}

%fused_computation.9.clone (param_0.2173: bf16[128,27,128]) -> bf16[128,27,128] {
  %param_0.2173 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(0)
  ROOT %copy.154 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} copy(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_0.2173), metadata={op_type="ConcatV2" op_name="while/concat_1"}
}

%bitcast_fusion.clone (bf16input.13: bf16[128,27,27]) -> bf16[128,27,27] {
  %bf16input.13 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.108 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} bitcast(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %bf16input.13)
}

%fused_computation.8.clone (param_0.2174: bf16[128,27,27], param_1.1548: bf16[128,27,128]) -> f32[128,27,128] {
  %param_0.2174 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1287 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %param_0.2174), kind=kLoop, calls=%bitcast_fusion.clone
  %param_1.1548 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(1)
  %fusion.1286 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_1.1548), kind=kLoop, calls=%fused_computation.9.clone, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  ROOT %convolution-base-dilated.13 = f32[128,27,128]{2,1,0:T(8,128)} convolution(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %fusion.1287, bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1286), window={size=128 stride=127 lhs_dilate=128}, dim_labels=0fb_0io->0bf, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul_1"}
}

%fused_computation.11.clone.clone.clone (param_0.2175: bf16[128,27,128]) -> bf16[128,27,128] {
  %param_0.2175 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(0)
  ROOT %copy.155 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} copy(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_0.2175), metadata={op_type="ConcatV2" op_name="while/concat_1"}
}

%bitcast_fusion.1.clone (bf16input.14: bf16[128,27,27]) -> bf16[128,27,27] {
  %bf16input.14 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.109 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} bitcast(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %bf16input.14)
}

%fused_computation.15.clone (param_0.2176: f32[128,27,128], param_1.1549: bf16[128,27,27], param_2.1428: bf16[128,27,128]) -> f32[128,27,128] {
  %param_1.1549 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} parameter(1)
  %fusion.1290 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %param_1.1549), kind=kLoop, calls=%bitcast_fusion.1.clone
  %param_2.1428 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} parameter(2)
  %fusion.1289 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %param_2.1428), kind=kLoop, calls=%fused_computation.11.clone.clone.clone, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %convolution-base-dilated.14 = f32[128,27,128]{2,1,0:T(8,128)} convolution(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %fusion.1290, bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1289), window={size=128 stride=127 lhs_dilate=128}, dim_labels=0bf_0io->0bf, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul"}
  %param_0.2176 = f32[128,27,128]{2,1,0:T(8,128)} parameter(0)
  ROOT %add.461 = f32[128,27,128]{2,1,0:T(8,128)} add(f32[128,27,128]{2,1,0:T(8,128)} %convolution-base-dilated.14, f32[128,27,128]{2,1,0:T(8,128)} %param_0.2176), metadata={op_type="AddN" op_name="while/training/gradients/AddN_1"}
}

%fused_computation.524.clone.clone (param_0.2177: f32[128,1792]) -> bf16[128,128] {
  %param_0.2177 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.808 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2177), slice={[0:128], [128:256]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
}

%fused_computation.161.clone.clone (param_0.2178: u32[128]) -> f32[128,128] {
  %param_0.2178 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2713 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2178), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.637 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.740 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2713, u32[128,128]{1,0:T(8,128)} %iota.637), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2323 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2712 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2323), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2322 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2711 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2322), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.629 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.740, f32[128,128]{1,0:T(8,128)} %broadcast.2712, f32[128,128]{1,0:T(8,128)} %broadcast.2711), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.120.clone.clone.clone (param_0.2179: f32[128], param_1.1550: u32[128], param_2.1429: f32[128,1792]) -> bf16[128,128] {
  %param_1.1550 = u32[128]{0:T(256)} parameter(1)
  %fusion.1293 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1550), kind=kLoop, calls=%fused_computation.161.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1429 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1292 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1429), kind=kLoop, calls=%fused_computation.524.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  %convolution.373 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1293, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1292), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2179 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2714 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2179), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.426 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.373, f32[128,128]{1,0:T(8,128)} %broadcast.2714), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.338.clone (param_0.2180: u32[128]) -> f32[128,8] {
  %param_0.2180 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2717 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2180), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.638 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.741 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2717, u32[128,8]{0,1:T(8,128)} %iota.638), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2325 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2716 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2325), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2324 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2715 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2324), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.630 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.741, f32[128,8]{0,1:T(8,128)} %broadcast.2716, f32[128,8]{0,1:T(8,128)} %broadcast.2715), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.121.clone (param_0.2181: f32[128], param_1.1551: u32[128], param_2.1430: u32[128], param_3.867: f32[128,1792]) -> f32[8,128] {
  %param_2.1430 = u32[128]{0:T(256)} parameter(2)
  %fusion.1295 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1430), kind=kLoop, calls=%fused_computation.338.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2181 = f32[128]{0:T(256)} parameter(0)
  %param_1.1551 = u32[128]{0:T(256)} parameter(1)
  %param_3.867 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1294 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2181, u32[128]{0:T(256)} %param_1.1551, f32[128,1792]{0,1:T(8,128)} %param_3.867), kind=kOutput, calls=%fused_computation.120.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.374 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1295, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1294), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.767.clone (param_0.2182: f32[128,1792]) -> (f32[128,128], f32[128,128], f32[128,128], f32[128,128], f32[128,128], /*index=5*/f32[128,128], f32[128,128], f32[128,128], f32[128,128], f32[128,128], /*index=10*/f32[128,128], f32[128,128], f32[128,128]) {
  %param_0.2182 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  %slice.809 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1664:1792]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %slice.810 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1536:1664]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %slice.811 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1280:1408]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %slice.812 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1024:1152]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %slice.813 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [640:768]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %slice.814 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [384:512]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %slice.815 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [256:384]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %slice.816 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1408:1536]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %slice.817 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [1152:1280]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %slice.818 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [896:1024]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %slice.819 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [768:896]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %slice.820 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [512:640]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %slice.821 = f32[128,128]{0,1:T(8,128)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2182), slice={[0:128], [128:256]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_1"}
  ROOT %tuple.352 = (f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) tuple(f32[128,128]{0,1:T(8,128)} %slice.809, f32[128,128]{0,1:T(8,128)} %slice.810, f32[128,128]{0,1:T(8,128)} %slice.811, f32[128,128]{0,1:T(8,128)} %slice.812, f32[128,128]{0,1:T(8,128)} %slice.813, /*index=5*/f32[128,128]{0,1:T(8,128)} %slice.814, f32[128,128]{0,1:T(8,128)} %slice.815, f32[128,128]{0,1:T(8,128)} %slice.816, f32[128,128]{0,1:T(8,128)} %slice.817, f32[128,128]{0,1:T(8,128)} %slice.818, /*index=10*/f32[128,128]{0,1:T(8,128)} %slice.819, f32[128,128]{0,1:T(8,128)} %slice.820, f32[128,128]{0,1:T(8,128)} %slice.821)
}

%fused_computation.35.clone (param_0.2183: f32[8,128], param_1.1552: f32[128,128]) -> f32[136,128] {
  %param_1.1552 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2326 = f32[]{:T(256)} constant(-inf)
  %pad.148 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1552, f32[]{:T(256)} %constant.2326), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2183 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.147 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2183, f32[]{:T(256)} %constant.2326), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.152 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.148, f32[136,128]{0,1:T(8,128)} %pad.147), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.523.clone.clone (param_0.2184: f32[128,1792]) -> bf16[128,128] {
  %param_0.2184 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.822 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2184), slice={[0:128], [512:640]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
}

%fused_computation.159.clone.clone (param_0.2185: u32[128]) -> f32[128,128] {
  %param_0.2185 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2720 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2185), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.639 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.742 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2720, u32[128,128]{1,0:T(8,128)} %iota.639), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2328 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2719 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2328), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2327 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2718 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2327), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.631 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.742, f32[128,128]{1,0:T(8,128)} %broadcast.2719, f32[128,128]{1,0:T(8,128)} %broadcast.2718), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.118.clone.clone.clone (param_0.2186: f32[128], param_1.1553: u32[128], param_2.1431: f32[128,1792]) -> bf16[128,128] {
  %param_1.1553 = u32[128]{0:T(256)} parameter(1)
  %fusion.1300 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1553), kind=kLoop, calls=%fused_computation.159.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1431 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1299 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1431), kind=kLoop, calls=%fused_computation.523.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_4"}
  %convolution.375 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1300, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1299), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2186 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2721 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2186), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.427 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.375, f32[128,128]{1,0:T(8,128)} %broadcast.2721), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.336.clone (param_0.2187: u32[128]) -> f32[128,8] {
  %param_0.2187 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2724 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2187), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.640 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.743 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2724, u32[128,8]{0,1:T(8,128)} %iota.640), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2330 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2723 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2330), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2329 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2722 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2329), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.632 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.743, f32[128,8]{0,1:T(8,128)} %broadcast.2723, f32[128,8]{0,1:T(8,128)} %broadcast.2722), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.119.clone (param_0.2188: f32[128], param_1.1554: u32[128], param_2.1432: u32[128], param_3.868: f32[128,1792]) -> f32[8,128] {
  %param_2.1432 = u32[128]{0:T(256)} parameter(2)
  %fusion.1302 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1432), kind=kLoop, calls=%fused_computation.336.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2188 = f32[128]{0:T(256)} parameter(0)
  %param_1.1554 = u32[128]{0:T(256)} parameter(1)
  %param_3.868 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1301 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2188, u32[128]{0:T(256)} %param_1.1554, f32[128,1792]{0,1:T(8,128)} %param_3.868), kind=kOutput, calls=%fused_computation.118.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.376 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1302, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1301), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.36.clone (param_0.2189: f32[8,128], param_1.1555: f32[128,128]) -> f32[136,128] {
  %param_1.1555 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2331 = f32[]{:T(256)} constant(-inf)
  %pad.150 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1555, f32[]{:T(256)} %constant.2331), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2189 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.149 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2189, f32[]{:T(256)} %constant.2331), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.153 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.150, f32[136,128]{0,1:T(8,128)} %pad.149), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.522.clone.clone (param_0.2190: f32[128,1792]) -> bf16[128,128] {
  %param_0.2190 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.823 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2190), slice={[0:128], [768:896]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
}

%fused_computation.157.clone.clone (param_0.2191: u32[128]) -> f32[128,128] {
  %param_0.2191 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2727 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2191), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.641 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.744 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2727, u32[128,128]{1,0:T(8,128)} %iota.641), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2333 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2726 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2333), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2332 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2725 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2332), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.633 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.744, f32[128,128]{1,0:T(8,128)} %broadcast.2726, f32[128,128]{1,0:T(8,128)} %broadcast.2725), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.116.clone.clone.clone (param_0.2192: f32[128], param_1.1556: u32[128], param_2.1433: f32[128,1792]) -> bf16[128,128] {
  %param_1.1556 = u32[128]{0:T(256)} parameter(1)
  %fusion.1306 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1556), kind=kLoop, calls=%fused_computation.157.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1433 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1305 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1433), kind=kLoop, calls=%fused_computation.522.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_6"}
  %convolution.377 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1306, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1305), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2192 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2728 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2192), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.428 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.377, f32[128,128]{1,0:T(8,128)} %broadcast.2728), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.334.clone (param_0.2193: u32[128]) -> f32[128,8] {
  %param_0.2193 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2731 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2193), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.642 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.745 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2731, u32[128,8]{0,1:T(8,128)} %iota.642), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2335 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2730 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2335), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2334 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2729 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2334), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.634 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.745, f32[128,8]{0,1:T(8,128)} %broadcast.2730, f32[128,8]{0,1:T(8,128)} %broadcast.2729), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.117.clone (param_0.2194: f32[128], param_1.1557: u32[128], param_2.1434: u32[128], param_3.869: f32[128,1792]) -> f32[8,128] {
  %param_2.1434 = u32[128]{0:T(256)} parameter(2)
  %fusion.1308 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1434), kind=kLoop, calls=%fused_computation.334.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2194 = f32[128]{0:T(256)} parameter(0)
  %param_1.1557 = u32[128]{0:T(256)} parameter(1)
  %param_3.869 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1307 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2194, u32[128]{0:T(256)} %param_1.1557, f32[128,1792]{0,1:T(8,128)} %param_3.869), kind=kOutput, calls=%fused_computation.116.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.378 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1308, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1307), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.37.clone (param_0.2195: f32[8,128], param_1.1558: f32[128,128]) -> f32[136,128] {
  %param_1.1558 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2336 = f32[]{:T(256)} constant(-inf)
  %pad.152 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1558, f32[]{:T(256)} %constant.2336), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2195 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.151 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2195, f32[]{:T(256)} %constant.2336), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.154 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.152, f32[136,128]{0,1:T(8,128)} %pad.151), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.521.clone.clone (param_0.2196: f32[128,1792]) -> bf16[128,128] {
  %param_0.2196 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.824 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2196), slice={[0:128], [896:1024]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
}

%fused_computation.155.clone.clone (param_0.2197: u32[128]) -> f32[128,128] {
  %param_0.2197 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2734 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2197), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.643 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.746 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2734, u32[128,128]{1,0:T(8,128)} %iota.643), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2338 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2733 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2338), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2337 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2732 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2337), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.635 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.746, f32[128,128]{1,0:T(8,128)} %broadcast.2733, f32[128,128]{1,0:T(8,128)} %broadcast.2732), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.114.clone.clone.clone (param_0.2198: f32[128], param_1.1559: u32[128], param_2.1435: f32[128,1792]) -> bf16[128,128] {
  %param_1.1559 = u32[128]{0:T(256)} parameter(1)
  %fusion.1312 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1559), kind=kLoop, calls=%fused_computation.155.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1435 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1311 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1435), kind=kLoop, calls=%fused_computation.521.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_7"}
  %convolution.379 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1312, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1311), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2198 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2735 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2198), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.429 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.379, f32[128,128]{1,0:T(8,128)} %broadcast.2735), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.332.clone (param_0.2199: u32[128]) -> f32[128,8] {
  %param_0.2199 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2738 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2199), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.644 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.747 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2738, u32[128,8]{0,1:T(8,128)} %iota.644), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2340 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2737 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2340), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2339 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2736 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2339), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.636 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.747, f32[128,8]{0,1:T(8,128)} %broadcast.2737, f32[128,8]{0,1:T(8,128)} %broadcast.2736), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.115.clone (param_0.2200: f32[128], param_1.1560: u32[128], param_2.1436: u32[128], param_3.870: f32[128,1792]) -> f32[8,128] {
  %param_2.1436 = u32[128]{0:T(256)} parameter(2)
  %fusion.1314 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1436), kind=kLoop, calls=%fused_computation.332.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2200 = f32[128]{0:T(256)} parameter(0)
  %param_1.1560 = u32[128]{0:T(256)} parameter(1)
  %param_3.870 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1313 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2200, u32[128]{0:T(256)} %param_1.1560, f32[128,1792]{0,1:T(8,128)} %param_3.870), kind=kOutput, calls=%fused_computation.114.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.380 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1314, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1313), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.38.clone (param_0.2201: f32[8,128], param_1.1561: f32[128,128]) -> f32[136,128] {
  %param_1.1561 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2341 = f32[]{:T(256)} constant(-inf)
  %pad.154 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1561, f32[]{:T(256)} %constant.2341), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2201 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.153 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2201, f32[]{:T(256)} %constant.2341), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.155 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.154, f32[136,128]{0,1:T(8,128)} %pad.153), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.520.clone.clone (param_0.2202: f32[128,1792]) -> bf16[128,128] {
  %param_0.2202 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.825 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2202), slice={[0:128], [1152:1280]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
}

%fused_computation.153.clone.clone (param_0.2203: u32[128]) -> f32[128,128] {
  %param_0.2203 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2741 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2203), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.645 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.748 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2741, u32[128,128]{1,0:T(8,128)} %iota.645), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2343 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2740 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2343), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2342 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2739 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2342), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.637 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.748, f32[128,128]{1,0:T(8,128)} %broadcast.2740, f32[128,128]{1,0:T(8,128)} %broadcast.2739), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.112.clone.clone.clone (param_0.2204: f32[128], param_1.1562: u32[128], param_2.1437: f32[128,1792]) -> bf16[128,128] {
  %param_1.1562 = u32[128]{0:T(256)} parameter(1)
  %fusion.1318 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1562), kind=kLoop, calls=%fused_computation.153.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1437 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1317 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1437), kind=kLoop, calls=%fused_computation.520.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_9"}
  %convolution.381 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1318, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1317), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2204 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2742 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2204), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.430 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.381, f32[128,128]{1,0:T(8,128)} %broadcast.2742), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.330.clone (param_0.2205: u32[128]) -> f32[128,8] {
  %param_0.2205 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2745 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2205), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.646 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.749 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2745, u32[128,8]{0,1:T(8,128)} %iota.646), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2345 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2744 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2345), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2344 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2743 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2344), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.638 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.749, f32[128,8]{0,1:T(8,128)} %broadcast.2744, f32[128,8]{0,1:T(8,128)} %broadcast.2743), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.113.clone (param_0.2206: f32[128], param_1.1563: u32[128], param_2.1438: u32[128], param_3.871: f32[128,1792]) -> f32[8,128] {
  %param_2.1438 = u32[128]{0:T(256)} parameter(2)
  %fusion.1320 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1438), kind=kLoop, calls=%fused_computation.330.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2206 = f32[128]{0:T(256)} parameter(0)
  %param_1.1563 = u32[128]{0:T(256)} parameter(1)
  %param_3.871 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1319 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2206, u32[128]{0:T(256)} %param_1.1563, f32[128,1792]{0,1:T(8,128)} %param_3.871), kind=kOutput, calls=%fused_computation.112.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.382 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1320, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1319), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.39.clone (param_0.2207: f32[8,128], param_1.1564: f32[128,128]) -> f32[136,128] {
  %param_1.1564 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2346 = f32[]{:T(256)} constant(-inf)
  %pad.156 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1564, f32[]{:T(256)} %constant.2346), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2207 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.155 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2207, f32[]{:T(256)} %constant.2346), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.156 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.156, f32[136,128]{0,1:T(8,128)} %pad.155), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.519.clone.clone (param_0.2208: f32[128,1792]) -> bf16[128,128] {
  %param_0.2208 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.826 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2208), slice={[0:128], [1408:1536]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
}

%fused_computation.151.clone.clone (param_0.2209: u32[128]) -> f32[128,128] {
  %param_0.2209 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2748 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2209), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.647 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.750 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2748, u32[128,128]{1,0:T(8,128)} %iota.647), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2348 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2747 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2348), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2347 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2746 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2347), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.639 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.750, f32[128,128]{1,0:T(8,128)} %broadcast.2747, f32[128,128]{1,0:T(8,128)} %broadcast.2746), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.110.clone.clone.clone (param_0.2210: f32[128], param_1.1565: u32[128], param_2.1439: f32[128,1792]) -> bf16[128,128] {
  %param_1.1565 = u32[128]{0:T(256)} parameter(1)
  %fusion.1324 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1565), kind=kLoop, calls=%fused_computation.151.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1439 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1323 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1439), kind=kLoop, calls=%fused_computation.519.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_11"}
  %convolution.383 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1324, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1323), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2210 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2749 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2210), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.431 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.383, f32[128,128]{1,0:T(8,128)} %broadcast.2749), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.328.clone (param_0.2211: u32[128]) -> f32[128,8] {
  %param_0.2211 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2752 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2211), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.648 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.751 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2752, u32[128,8]{0,1:T(8,128)} %iota.648), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2350 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2751 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2350), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2349 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2750 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2349), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.640 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.751, f32[128,8]{0,1:T(8,128)} %broadcast.2751, f32[128,8]{0,1:T(8,128)} %broadcast.2750), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.111.clone (param_0.2212: f32[128], param_1.1566: u32[128], param_2.1440: u32[128], param_3.872: f32[128,1792]) -> f32[8,128] {
  %param_2.1440 = u32[128]{0:T(256)} parameter(2)
  %fusion.1326 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1440), kind=kLoop, calls=%fused_computation.328.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2212 = f32[128]{0:T(256)} parameter(0)
  %param_1.1566 = u32[128]{0:T(256)} parameter(1)
  %param_3.872 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1325 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2212, u32[128]{0:T(256)} %param_1.1566, f32[128,1792]{0,1:T(8,128)} %param_3.872), kind=kOutput, calls=%fused_computation.110.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.384 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1326, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1325), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.40.clone (param_0.2213: f32[8,128], param_1.1567: f32[128,128]) -> f32[136,128] {
  %param_1.1567 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2351 = f32[]{:T(256)} constant(-inf)
  %pad.158 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1567, f32[]{:T(256)} %constant.2351), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2213 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.157 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2213, f32[]{:T(256)} %constant.2351), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.157 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.158, f32[136,128]{0,1:T(8,128)} %pad.157), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.518.clone.clone (param_0.2214: f32[128,1792]) -> bf16[128,128] {
  %param_0.2214 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.827 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2214), slice={[0:128], [256:384]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
}

%fused_computation.149.clone.clone (param_0.2215: u32[128]) -> f32[128,128] {
  %param_0.2215 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2755 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2215), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.649 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.752 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2755, u32[128,128]{1,0:T(8,128)} %iota.649), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2353 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2754 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2353), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2352 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2753 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2352), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.641 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.752, f32[128,128]{1,0:T(8,128)} %broadcast.2754, f32[128,128]{1,0:T(8,128)} %broadcast.2753), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.108.clone.clone.clone (param_0.2216: f32[128], param_1.1568: u32[128], param_2.1441: f32[128,1792]) -> bf16[128,128] {
  %param_1.1568 = u32[128]{0:T(256)} parameter(1)
  %fusion.1330 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1568), kind=kLoop, calls=%fused_computation.149.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1441 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1329 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1441), kind=kLoop, calls=%fused_computation.518.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_2"}
  %convolution.385 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1330, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1329), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2216 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2756 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2216), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.432 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.385, f32[128,128]{1,0:T(8,128)} %broadcast.2756), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.326.clone (param_0.2217: u32[128]) -> f32[128,8] {
  %param_0.2217 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2759 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2217), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.650 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.753 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2759, u32[128,8]{0,1:T(8,128)} %iota.650), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2355 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2758 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2355), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2354 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2757 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2354), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.642 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.753, f32[128,8]{0,1:T(8,128)} %broadcast.2758, f32[128,8]{0,1:T(8,128)} %broadcast.2757), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.109.clone (param_0.2218: f32[128], param_1.1569: u32[128], param_2.1442: u32[128], param_3.873: f32[128,1792]) -> f32[8,128] {
  %param_2.1442 = u32[128]{0:T(256)} parameter(2)
  %fusion.1332 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1442), kind=kLoop, calls=%fused_computation.326.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2218 = f32[128]{0:T(256)} parameter(0)
  %param_1.1569 = u32[128]{0:T(256)} parameter(1)
  %param_3.873 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1331 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2218, u32[128]{0:T(256)} %param_1.1569, f32[128,1792]{0,1:T(8,128)} %param_3.873), kind=kOutput, calls=%fused_computation.108.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.386 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1332, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1331), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.41.clone (param_0.2219: f32[8,128], param_1.1570: f32[128,128]) -> f32[136,128] {
  %param_1.1570 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2356 = f32[]{:T(256)} constant(-inf)
  %pad.160 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1570, f32[]{:T(256)} %constant.2356), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2219 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.159 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2219, f32[]{:T(256)} %constant.2356), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.158 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.160, f32[136,128]{0,1:T(8,128)} %pad.159), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.517.clone.clone (param_0.2220: f32[128,1792]) -> bf16[128,128] {
  %param_0.2220 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.828 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2220), slice={[0:128], [384:512]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
}

%fused_computation.147.clone.clone (param_0.2221: u32[128]) -> f32[128,128] {
  %param_0.2221 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2762 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2221), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.651 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.754 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2762, u32[128,128]{1,0:T(8,128)} %iota.651), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2358 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2761 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2358), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2357 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2760 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2357), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.643 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.754, f32[128,128]{1,0:T(8,128)} %broadcast.2761, f32[128,128]{1,0:T(8,128)} %broadcast.2760), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.106.clone.clone.clone (param_0.2222: f32[128], param_1.1571: u32[128], param_2.1443: f32[128,1792]) -> bf16[128,128] {
  %param_1.1571 = u32[128]{0:T(256)} parameter(1)
  %fusion.1336 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1571), kind=kLoop, calls=%fused_computation.147.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1443 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1335 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1443), kind=kLoop, calls=%fused_computation.517.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_3"}
  %convolution.387 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1336, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1335), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2222 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2763 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2222), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.433 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.387, f32[128,128]{1,0:T(8,128)} %broadcast.2763), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.324.clone (param_0.2223: u32[128]) -> f32[128,8] {
  %param_0.2223 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2766 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2223), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.652 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.755 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2766, u32[128,8]{0,1:T(8,128)} %iota.652), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2360 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2765 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2360), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2359 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2764 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2359), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.644 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.755, f32[128,8]{0,1:T(8,128)} %broadcast.2765, f32[128,8]{0,1:T(8,128)} %broadcast.2764), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.107.clone (param_0.2224: f32[128], param_1.1572: u32[128], param_2.1444: u32[128], param_3.874: f32[128,1792]) -> f32[8,128] {
  %param_2.1444 = u32[128]{0:T(256)} parameter(2)
  %fusion.1338 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1444), kind=kLoop, calls=%fused_computation.324.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2224 = f32[128]{0:T(256)} parameter(0)
  %param_1.1572 = u32[128]{0:T(256)} parameter(1)
  %param_3.874 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1337 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2224, u32[128]{0:T(256)} %param_1.1572, f32[128,1792]{0,1:T(8,128)} %param_3.874), kind=kOutput, calls=%fused_computation.106.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.388 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1338, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1337), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.42.clone (param_0.2225: f32[8,128], param_1.1573: f32[128,128]) -> f32[136,128] {
  %param_1.1573 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2361 = f32[]{:T(256)} constant(-inf)
  %pad.162 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1573, f32[]{:T(256)} %constant.2361), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2225 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.161 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2225, f32[]{:T(256)} %constant.2361), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.159 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.162, f32[136,128]{0,1:T(8,128)} %pad.161), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.516.clone.clone (param_0.2226: f32[128,1792]) -> bf16[128,128] {
  %param_0.2226 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.829 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2226), slice={[0:128], [640:768]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
}

%fused_computation.145.clone.clone (param_0.2227: u32[128]) -> f32[128,128] {
  %param_0.2227 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2769 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2227), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.653 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.756 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2769, u32[128,128]{1,0:T(8,128)} %iota.653), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2363 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2768 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2363), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2362 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2767 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2362), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.645 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.756, f32[128,128]{1,0:T(8,128)} %broadcast.2768, f32[128,128]{1,0:T(8,128)} %broadcast.2767), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.104.clone.clone.clone (param_0.2228: f32[128], param_1.1574: u32[128], param_2.1445: f32[128,1792]) -> bf16[128,128] {
  %param_1.1574 = u32[128]{0:T(256)} parameter(1)
  %fusion.1342 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1574), kind=kLoop, calls=%fused_computation.145.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1445 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1341 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1445), kind=kLoop, calls=%fused_computation.516.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_5"}
  %convolution.389 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1342, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1341), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2228 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2770 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2228), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.434 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.389, f32[128,128]{1,0:T(8,128)} %broadcast.2770), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.322.clone (param_0.2229: u32[128]) -> f32[128,8] {
  %param_0.2229 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2773 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2229), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.654 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.757 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2773, u32[128,8]{0,1:T(8,128)} %iota.654), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2365 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2772 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2365), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2364 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2771 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2364), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.646 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.757, f32[128,8]{0,1:T(8,128)} %broadcast.2772, f32[128,8]{0,1:T(8,128)} %broadcast.2771), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.105.clone (param_0.2230: f32[128], param_1.1575: u32[128], param_2.1446: u32[128], param_3.875: f32[128,1792]) -> f32[8,128] {
  %param_2.1446 = u32[128]{0:T(256)} parameter(2)
  %fusion.1344 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1446), kind=kLoop, calls=%fused_computation.322.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2230 = f32[128]{0:T(256)} parameter(0)
  %param_1.1575 = u32[128]{0:T(256)} parameter(1)
  %param_3.875 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1343 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2230, u32[128]{0:T(256)} %param_1.1575, f32[128,1792]{0,1:T(8,128)} %param_3.875), kind=kOutput, calls=%fused_computation.104.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.390 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1344, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1343), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.43.clone (param_0.2231: f32[8,128], param_1.1576: f32[128,128]) -> f32[136,128] {
  %param_1.1576 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2366 = f32[]{:T(256)} constant(-inf)
  %pad.164 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1576, f32[]{:T(256)} %constant.2366), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2231 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.163 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2231, f32[]{:T(256)} %constant.2366), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.160 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.164, f32[136,128]{0,1:T(8,128)} %pad.163), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.515.clone.clone (param_0.2232: f32[128,1792]) -> bf16[128,128] {
  %param_0.2232 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.830 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2232), slice={[0:128], [1024:1152]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
}

%fused_computation.143.clone.clone (param_0.2233: u32[128]) -> f32[128,128] {
  %param_0.2233 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2776 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2233), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.655 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.758 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2776, u32[128,128]{1,0:T(8,128)} %iota.655), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2368 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2775 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2368), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2367 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2774 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2367), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.647 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.758, f32[128,128]{1,0:T(8,128)} %broadcast.2775, f32[128,128]{1,0:T(8,128)} %broadcast.2774), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.102.clone.clone.clone (param_0.2234: f32[128], param_1.1577: u32[128], param_2.1447: f32[128,1792]) -> bf16[128,128] {
  %param_1.1577 = u32[128]{0:T(256)} parameter(1)
  %fusion.1348 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1577), kind=kLoop, calls=%fused_computation.143.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1447 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1347 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1447), kind=kLoop, calls=%fused_computation.515.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_8"}
  %convolution.391 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1348, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1347), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2234 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2777 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2234), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.435 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.391, f32[128,128]{1,0:T(8,128)} %broadcast.2777), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.320.clone (param_0.2235: u32[128]) -> f32[128,8] {
  %param_0.2235 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2780 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2235), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.656 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.759 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2780, u32[128,8]{0,1:T(8,128)} %iota.656), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2370 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2779 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2370), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2369 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2778 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2369), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.648 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.759, f32[128,8]{0,1:T(8,128)} %broadcast.2779, f32[128,8]{0,1:T(8,128)} %broadcast.2778), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.103.clone (param_0.2236: f32[128], param_1.1578: u32[128], param_2.1448: u32[128], param_3.876: f32[128,1792]) -> f32[8,128] {
  %param_2.1448 = u32[128]{0:T(256)} parameter(2)
  %fusion.1350 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1448), kind=kLoop, calls=%fused_computation.320.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2236 = f32[128]{0:T(256)} parameter(0)
  %param_1.1578 = u32[128]{0:T(256)} parameter(1)
  %param_3.876 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1349 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2236, u32[128]{0:T(256)} %param_1.1578, f32[128,1792]{0,1:T(8,128)} %param_3.876), kind=kOutput, calls=%fused_computation.102.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.392 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1350, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1349), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.44.clone (param_0.2237: f32[8,128], param_1.1579: f32[128,128]) -> f32[136,128] {
  %param_1.1579 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2371 = f32[]{:T(256)} constant(-inf)
  %pad.166 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1579, f32[]{:T(256)} %constant.2371), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2237 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.165 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2237, f32[]{:T(256)} %constant.2371), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.161 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.166, f32[136,128]{0,1:T(8,128)} %pad.165), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.514.clone.clone (param_0.2238: f32[128,1792]) -> bf16[128,128] {
  %param_0.2238 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.831 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2238), slice={[0:128], [1280:1408]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
}

%fused_computation.141.clone.clone (param_0.2239: u32[128]) -> f32[128,128] {
  %param_0.2239 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2783 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2239), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.657 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.760 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2783, u32[128,128]{1,0:T(8,128)} %iota.657), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2373 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2782 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2373), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2372 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2781 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2372), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.649 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.760, f32[128,128]{1,0:T(8,128)} %broadcast.2782, f32[128,128]{1,0:T(8,128)} %broadcast.2781), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.100.clone.clone.clone (param_0.2240: f32[128], param_1.1580: u32[128], param_2.1449: f32[128,1792]) -> bf16[128,128] {
  %param_1.1580 = u32[128]{0:T(256)} parameter(1)
  %fusion.1354 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1580), kind=kLoop, calls=%fused_computation.141.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1449 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1353 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1449), kind=kLoop, calls=%fused_computation.514.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_10"}
  %convolution.393 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1354, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1353), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2240 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2784 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2240), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.436 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.393, f32[128,128]{1,0:T(8,128)} %broadcast.2784), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.318.clone (param_0.2241: u32[128]) -> f32[128,8] {
  %param_0.2241 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2787 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2241), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.658 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.761 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2787, u32[128,8]{0,1:T(8,128)} %iota.658), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2375 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2786 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2375), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2374 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2785 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2374), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.650 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.761, f32[128,8]{0,1:T(8,128)} %broadcast.2786, f32[128,8]{0,1:T(8,128)} %broadcast.2785), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.101.clone (param_0.2242: f32[128], param_1.1581: u32[128], param_2.1450: u32[128], param_3.877: f32[128,1792]) -> f32[8,128] {
  %param_2.1450 = u32[128]{0:T(256)} parameter(2)
  %fusion.1356 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1450), kind=kLoop, calls=%fused_computation.318.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2242 = f32[128]{0:T(256)} parameter(0)
  %param_1.1581 = u32[128]{0:T(256)} parameter(1)
  %param_3.877 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1355 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2242, u32[128]{0:T(256)} %param_1.1581, f32[128,1792]{0,1:T(8,128)} %param_3.877), kind=kOutput, calls=%fused_computation.100.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.394 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1356, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1355), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.45.clone (param_0.2243: f32[8,128], param_1.1582: f32[128,128]) -> f32[136,128] {
  %param_1.1582 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2376 = f32[]{:T(256)} constant(-inf)
  %pad.168 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1582, f32[]{:T(256)} %constant.2376), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2243 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.167 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2243, f32[]{:T(256)} %constant.2376), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.162 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.168, f32[136,128]{0,1:T(8,128)} %pad.167), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.513.clone.clone (param_0.2244: f32[128,1792]) -> bf16[128,128] {
  %param_0.2244 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.832 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2244), slice={[0:128], [1536:1664]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
}

%fused_computation.139.clone.clone (param_0.2245: u32[128]) -> f32[128,128] {
  %param_0.2245 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2790 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2245), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.659 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.762 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2790, u32[128,128]{1,0:T(8,128)} %iota.659), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2378 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2789 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2378), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2377 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2788 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2377), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.651 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.762, f32[128,128]{1,0:T(8,128)} %broadcast.2789, f32[128,128]{1,0:T(8,128)} %broadcast.2788), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.98.clone.clone.clone (param_0.2246: f32[128], param_1.1583: u32[128], param_2.1451: f32[128,1792]) -> bf16[128,128] {
  %param_1.1583 = u32[128]{0:T(256)} parameter(1)
  %fusion.1360 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1583), kind=kLoop, calls=%fused_computation.139.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1451 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1359 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1451), kind=kLoop, calls=%fused_computation.513.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_12"}
  %convolution.395 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1360, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1359), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2246 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2791 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2246), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.437 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.395, f32[128,128]{1,0:T(8,128)} %broadcast.2791), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.316.clone (param_0.2247: u32[128]) -> f32[128,8] {
  %param_0.2247 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2794 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2247), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.660 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.763 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2794, u32[128,8]{0,1:T(8,128)} %iota.660), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2380 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2793 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2380), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2379 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2792 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2379), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.652 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.763, f32[128,8]{0,1:T(8,128)} %broadcast.2793, f32[128,8]{0,1:T(8,128)} %broadcast.2792), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.99.clone (param_0.2248: f32[128], param_1.1584: u32[128], param_2.1452: u32[128], param_3.878: f32[128,1792]) -> f32[8,128] {
  %param_2.1452 = u32[128]{0:T(256)} parameter(2)
  %fusion.1362 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1452), kind=kLoop, calls=%fused_computation.316.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2248 = f32[128]{0:T(256)} parameter(0)
  %param_1.1584 = u32[128]{0:T(256)} parameter(1)
  %param_3.878 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1361 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2248, u32[128]{0:T(256)} %param_1.1584, f32[128,1792]{0,1:T(8,128)} %param_3.878), kind=kOutput, calls=%fused_computation.98.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.396 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1362, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1361), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.46.clone (param_0.2249: f32[8,128], param_1.1585: f32[128,128]) -> f32[136,128] {
  %param_1.1585 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2381 = f32[]{:T(256)} constant(-inf)
  %pad.170 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1585, f32[]{:T(256)} %constant.2381), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2249 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.169 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2249, f32[]{:T(256)} %constant.2381), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.163 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.170, f32[136,128]{0,1:T(8,128)} %pad.169), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.512.clone.clone (param_0.2250: f32[128,1792]) -> bf16[128,128] {
  %param_0.2250 = f32[128,1792]{0,1:T(8,128)} parameter(0)
  ROOT %slice.833 = bf16[128,128]{0,1:T(8,128)(2,1)} slice(f32[128,1792]{0,1:T(8,128)} %param_0.2250), slice={[0:128], [1664:1792]}, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
}

%fused_computation.137.clone.clone (param_0.2251: u32[128]) -> f32[128,128] {
  %param_0.2251 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2797 = u32[128,128]{1,0:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2251), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.661 = u32[128,128]{1,0:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.764 = pred[128,128]{1,0:T(8,128)(4,1)} compare(u32[128,128]{1,0:T(8,128)} %broadcast.2797, u32[128,128]{1,0:T(8,128)} %iota.661), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2383 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2796 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2383), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2382 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2795 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2382), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  ROOT %select.653 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.764, f32[128,128]{1,0:T(8,128)} %broadcast.2796, f32[128,128]{1,0:T(8,128)} %broadcast.2795), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.96.clone.clone.clone (param_0.2252: f32[128], param_1.1586: u32[128], param_2.1453: f32[128,1792]) -> bf16[128,128] {
  %param_1.1586 = u32[128]{0:T(256)} parameter(1)
  %fusion.1366 = f32[128,128]{1,0:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1586), kind=kLoop, calls=%fused_computation.137.clone.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_2.1453 = f32[128,1792]{0,1:T(8,128)} parameter(2)
  %fusion.1365 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(f32[128,1792]{0,1:T(8,128)} %param_2.1453), kind=kLoop, calls=%fused_computation.512.clone.clone, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %convolution.397 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{1,0:T(8,128)} %fusion.1366, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1365), dim_labels=bf_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2252 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2798 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2252), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %multiply.438 = bf16[128,128]{1,0:T(8,128)(2,1)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.397, f32[128,128]{1,0:T(8,128)} %broadcast.2798), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.314.clone (param_0.2253: u32[128]) -> f32[128,8] {
  %param_0.2253 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2801 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2253), dimensions={0}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %iota.662 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %compare.765 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2801, u32[128,8]{0,1:T(8,128)} %iota.662), direction=EQ, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %constant.2385 = f32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %broadcast.2800 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2385), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %constant.2384 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2799 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2384), dimensions={}, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  ROOT %select.654 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.765, f32[128,8]{0,1:T(8,128)} %broadcast.2800, f32[128,8]{0,1:T(8,128)} %broadcast.2799), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.97.clone (param_0.2254: f32[128], param_1.1587: u32[128], param_2.1454: u32[128], param_3.879: f32[128,1792]) -> f32[8,128] {
  %param_2.1454 = u32[128]{0:T(256)} parameter(2)
  %fusion.1368 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1454), kind=kLoop, calls=%fused_computation.314.clone, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2254 = f32[128]{0:T(256)} parameter(0)
  %param_1.1587 = u32[128]{0:T(256)} parameter(1)
  %param_3.879 = f32[128,1792]{0,1:T(8,128)} parameter(3)
  %fusion.1367 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[128]{0:T(256)} %param_0.2254, u32[128]{0:T(256)} %param_1.1587, f32[128,1792]{0,1:T(8,128)} %param_3.879), kind=kOutput, calls=%fused_computation.96.clone.clone.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %convolution.398 = f32[8,128]{0,1:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1368, bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1367), dim_labels=fb_io->bf, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.47.clone (param_0.2255: f32[8,128], param_1.1588: f32[128,128]) -> f32[136,128] {
  %param_1.1588 = f32[128,128]{0,1:T(8,128)} parameter(1)
  %constant.2386 = f32[]{:T(256)} constant(-inf)
  %pad.172 = f32[136,128]{0,1:T(8,128)} pad(f32[128,128]{0,1:T(8,128)} %param_1.1588, f32[]{:T(256)} %constant.2386), padding=0_8x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %param_0.2255 = f32[8,128]{0,1:T(8,128)} parameter(0)
  %pad.171 = f32[136,128]{0,1:T(8,128)} pad(f32[8,128]{0,1:T(8,128)} %param_0.2255, f32[]{:T(256)} %constant.2386), padding=128_0x0_0, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  ROOT %maximum.164 = f32[136,128]{0,1:T(8,128)} maximum(f32[136,128]{0,1:T(8,128)} %pad.172, f32[136,128]{0,1:T(8,128)} %pad.171), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
}

%fused_computation.5.clone (param_0.2256: f32[]) -> f32[19656,128] {
  %param_0.2256 = f32[]{:T(256)} parameter(0)
  ROOT %broadcast.2802 = f32[19656,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %param_0.2256), dimensions={}, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
}

%scatter-combiner.196 (p0.197: f32[], p1.198: f32[]) -> f32[] {
  %p1.198 = f32[]{:T(256)} parameter(1)
  %p0.197 = f32[]{:T(256)} parameter(0)
  ROOT %add.37 = f32[]{:T(256)} add(f32[]{:T(256)} %p0.197, f32[]{:T(256)} %p1.198)
}

%fused_computation.2.clone.clone (param_0.2257: f32[19656,128], param_1.1589: s32[1664], param_2.1455: f32[1664,128]) -> f32[19656,128] {
  %param_0.2257 = f32[19656,128]{1,0:T(8,128)} parameter(0)
  %param_1.1589 = s32[1664]{0:T(1024)} parameter(1)
  %reshape.412 = s32[1664]{0:T(1024)} reshape(s32[1664]{0:T(1024)} %param_1.1589)
  %transpose.173 = s32[1664]{0:T(1024)} transpose(s32[1664]{0:T(1024)} %reshape.412), dimensions={0}
  %param_2.1455 = f32[1664,128]{1,0:T(8,128)} parameter(2)
  %reshape.411 = f32[1664,128]{1,0:T(8,128)} reshape(f32[1664,128]{1,0:T(8,128)} %param_2.1455)
  %transpose.172 = f32[1664,128]{1,0:T(8,128)} transpose(f32[1664,128]{1,0:T(8,128)} %reshape.411), dimensions={0,1}
  ROOT %scatter.4 = f32[19656,128]{1,0:T(8,128)} scatter(f32[19656,128]{1,0:T(8,128)} %param_0.2257, s32[1664]{0:T(1024)} %transpose.173, f32[1664,128]{1,0:T(8,128)} %transpose.172), update_window_dims={1}, inserted_window_dims={0}, scatter_dims_to_operand_dims={0}, index_vector_dim=1, to_apply=%scatter-combiner.196, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
}

%fused_computation.4.clone (param_0.2258: s32[1664], param_1.1590: f32[1664,128], param_2.1456: f32[]) -> f32[19656,128] {
  %param_2.1456 = f32[]{:T(256)} parameter(2)
  %fusion.1371 = f32[19656,128]{1,0:T(8,128)} fusion(f32[]{:T(256)} %param_2.1456), kind=kLoop, calls=%fused_computation.5.clone, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %param_0.2258 = s32[1664]{0:T(1024)} parameter(0)
  %param_1.1590 = f32[1664,128]{1,0:T(8,128)} parameter(1)
  ROOT %fusion.1372 = f32[19656,128]{1,0:T(8,128)} fusion(f32[19656,128]{1,0:T(8,128)} %fusion.1371, s32[1664]{0:T(1024)} %param_0.2258, f32[1664,128]{1,0:T(8,128)} %param_1.1590), kind=kCustom, calls=%fused_computation.2.clone.clone, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
}

%region_0.160 (Arg_0.161: f32[], Arg_1.162: f32[]) -> f32[] {
  %Arg_1.162 = f32[]{:T(256)} parameter(1)
  %Arg_0.161 = f32[]{:T(256)} parameter(0)
  ROOT %add.28 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.161, f32[]{:T(256)} %Arg_1.162), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.766.clone (param_0.2259: f32[128,1792], param_1.1591: f32[128,857], param_2.1457: f32[128,128]) -> (f32[128], bf16[128,128]) {
  %param_2.1457 = f32[128,128]{1,0:T(8,128)} parameter(2)
  %constant.2405 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2803 = f32[128,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2405), dimensions={}, metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  %compare.774 = pred[128,128]{1,0:T(8,128)(4,1)} compare(f32[128,128]{1,0:T(8,128)} %param_2.1457, f32[128,128]{1,0:T(8,128)} %broadcast.2803), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %param_1.1591 = f32[128,857]{1,0:T(8,128)} parameter(1)
  %slice.836 = f32[128,128]{1,0:T(8,128)} slice(f32[128,857]{1,0:T(8,128)} %param_1.1591), slice={[0:128], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_2_grad/Slice"}
  %param_0.2259 = f32[128,1792]{1,0:T(8,128)} parameter(0)
  %slice.835 = f32[128,128]{1,0:T(8,128)} slice(f32[128,1792]{1,0:T(8,128)} %param_0.2259), slice={[0:128], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice"}
  %add.469 = f32[128,128]{1,0:T(8,128)} add(f32[128,128]{1,0:T(8,128)} %slice.836, f32[128,128]{1,0:T(8,128)} %slice.835), metadata={op_type="AddN" op_name="while/training/gradients/AddN_2"}
  %select.666 = f32[128,128]{1,0:T(8,128)} select(pred[128,128]{1,0:T(8,128)(4,1)} %compare.774, f32[128,128]{1,0:T(8,128)} %add.469, f32[128,128]{1,0:T(8,128)} %broadcast.2803), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/Relu_grad/ReluGrad"}
  %reduce.44 = f32[128]{0:T(256)} reduce(f32[128,128]{1,0:T(8,128)} %select.666, f32[]{:T(256)} %constant.2405), dimensions={0}, to_apply=%region_0.160, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %convert.262 = bf16[128,128]{1,0:T(8,128)(2,1)} convert(f32[128,128]{1,0:T(8,128)} %select.666)
  ROOT %tuple.356 = (f32[128]{0:T(256)}, bf16[128,128]{1,0:T(8,128)(2,1)}) tuple(f32[128]{0:T(256)} %reduce.44, bf16[128,128]{1,0:T(8,128)(2,1)} %convert.262)
}

%region_0.164 (Arg_0.165: f32[], Arg_1.166: f32[]) -> f32[] {
  %Arg_1.166 = f32[]{:T(256)} parameter(1)
  %Arg_0.165 = f32[]{:T(256)} parameter(0)
  ROOT %add.29 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.165, f32[]{:T(256)} %Arg_1.166), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.769.clone (param_0.2260: bf16[128,128], param_1.1592: f32[256,128], param_2.1458: f32[128,256]) -> (f32[256], bf16[128,256]) {
  %param_2.1458 = f32[128,256]{1,0:T(8,128)} parameter(2)
  %constant.2406 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2804 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2406), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %compare.775 = pred[128,256]{1,0:T(8,128)(4,1)} compare(f32[128,256]{1,0:T(8,128)} %param_2.1458, f32[128,256]{1,0:T(8,128)} %broadcast.2804), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %param_0.2260 = bf16[128,128]{1,0:T(8,128)(2,1)} parameter(0)
  %param_1.1592 = f32[256,128]{1,0:T(8,128)} parameter(1)
  %convolution.399 = f32[128,256]{1,0:T(8,128)} convolution(bf16[128,128]{1,0:T(8,128)(2,1)} %param_0.2260, f32[256,128]{1,0:T(8,128)} %param_1.1592), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul"}
  %select.667 = f32[128,256]{1,0:T(8,128)} select(pred[128,256]{1,0:T(8,128)(4,1)} %compare.775, f32[128,256]{1,0:T(8,128)} %convolution.399, f32[128,256]{1,0:T(8,128)} %broadcast.2804), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/Relu_grad/ReluGrad"}
  %reduce.45 = f32[256]{0:T(256)} reduce(f32[128,256]{1,0:T(8,128)} %select.667, f32[]{:T(256)} %constant.2406), dimensions={0}, to_apply=%region_0.164, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_1/BiasAdd_grad/BiasAddGrad"}
  %convert.263 = bf16[128,256]{1,0:T(8,128)(2,1)} convert(f32[128,256]{1,0:T(8,128)} %select.667)
  ROOT %tuple.357 = (f32[256]{0:T(256)}, bf16[128,256]{1,0:T(8,128)(2,1)}) tuple(f32[256]{0:T(256)} %reduce.45, bf16[128,256]{1,0:T(8,128)(2,1)} %convert.263)
}

%region_0.168 (Arg_0.169: f32[], Arg_1.170: f32[]) -> f32[] {
  %Arg_1.170 = f32[]{:T(256)} parameter(1)
  %Arg_0.169 = f32[]{:T(256)} parameter(0)
  ROOT %add.30 = f32[]{:T(256)} add(f32[]{:T(256)} %Arg_0.169, f32[]{:T(256)} %Arg_1.170), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
}

%fused_computation.768.clone (param_0.2261: bf16[128,256], param_1.1593: f32[512,256], param_2.1459: f32[128,512]) -> (f32[512], bf16[128,512]) {
  %param_2.1459 = f32[128,512]{1,0:T(8,128)} parameter(2)
  %constant.2407 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2805 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2407), dimensions={}, metadata={op_name="while/bottom_mlp_layer_0/Relu"}
  %compare.776 = pred[128,512]{1,0:T(8,128)(4,1)} compare(f32[128,512]{1,0:T(8,128)} %param_2.1459, f32[128,512]{1,0:T(8,128)} %broadcast.2805), direction=GT, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %param_0.2261 = bf16[128,256]{1,0:T(8,128)(2,1)} parameter(0)
  %param_1.1593 = f32[512,256]{1,0:T(8,128)} parameter(1)
  %convolution.400 = f32[128,512]{1,0:T(8,128)} convolution(bf16[128,256]{1,0:T(8,128)(2,1)} %param_0.2261, f32[512,256]{1,0:T(8,128)} %param_1.1593), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul"}
  %select.668 = f32[128,512]{1,0:T(8,128)} select(pred[128,512]{1,0:T(8,128)(4,1)} %compare.776, f32[128,512]{1,0:T(8,128)} %convolution.400, f32[128,512]{1,0:T(8,128)} %broadcast.2805), metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/Relu_grad/ReluGrad"}
  %reduce.46 = f32[512]{0:T(512)} reduce(f32[128,512]{1,0:T(8,128)} %select.668, f32[]{:T(256)} %constant.2407), dimensions={0}, to_apply=%region_0.168, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_0/BiasAdd_grad/BiasAddGrad"}
  %convert.264 = bf16[128,512]{1,0:T(8,128)(2,1)} convert(f32[128,512]{1,0:T(8,128)} %select.668)
  ROOT %tuple.358 = (f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) tuple(f32[512]{0:T(512)} %reduce.46, bf16[128,512]{1,0:T(8,128)(2,1)} %convert.264)
}

%fused_computation.26.clone.clone (param_0.2262: bf16[128,729], param_1.1594: bf16[128,128]) -> bf16[128,857] {
  %param_1.1594 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(1)
  %constant.2408 = f32[]{:T(256)} constant(-inf)
  %pad.174 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,128]{0,1:T(8,128)(2,1)} %param_1.1594, f32[]{:T(256)} %constant.2408), padding=0_0x0_729, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %param_0.2262 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(0)
  %pad.173 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,729]{0,1:T(8,128)(2,1)} %param_0.2262, f32[]{:T(256)} %constant.2408), padding=0_0x128_0, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  ROOT %maximum.166 = bf16[128,857]{0,1:T(8,128)(2,1)} maximum(bf16[128,857]{0,1:T(8,128)(2,1)} %pad.174, bf16[128,857]{0,1:T(8,128)(2,1)} %pad.173), metadata={op_type="ConcatV2" op_name="while/concat_2"}
}

%fused_computation.27.clone (param_0.2263: bf16[128,1024], param_1.1595: bf16[128,729], param_2.1460: bf16[128,128]) -> f32[857,1024] {
  %param_1.1595 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(1)
  %param_2.1460 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(2)
  %fusion.1377 = bf16[128,857]{0,1:T(8,128)(2,1)} fusion(bf16[128,729]{0,1:T(8,128)(2,1)} %param_1.1595, bf16[128,128]{0,1:T(8,128)(2,1)} %param_2.1460), kind=kLoop, calls=%fused_computation.26.clone.clone, metadata={op_type="ConcatV2" op_name="while/concat_2"}
  %param_0.2263 = bf16[128,1024]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %convolution.404 = f32[857,1024]{1,0:T(8,128)} convolution(bf16[128,857]{0,1:T(8,128)(2,1)} %fusion.1377, bf16[128,1024]{1,0:T(8,128)(2,1)} %param_0.2263), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul_1"}
}

%fused_computation.55.clone.clone (param_0.2264: pred[128,256], param_1.1596: f32[128], param_2.1461: f32[256]) -> f32[128,256] {
  %param_0.2264 = pred[128,256]{1,0:T(8,128)(4,1)} parameter(0)
  %param_1.1596 = f32[128]{0:T(256)} parameter(1)
  %broadcast.2807 = f32[128,256]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_1.1596), dimensions={0}
  %param_2.1461 = f32[256]{0:T(256)} parameter(2)
  %broadcast.2806 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_2.1461), dimensions={1}
  %multiply.442 = f32[128,256]{1,0:T(8,128)} multiply(f32[128,256]{1,0:T(8,128)} %broadcast.2807, f32[128,256]{1,0:T(8,128)} %broadcast.2806), metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul"}
  %constant.2409 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2808 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2409), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  ROOT %select.669 = f32[128,256]{1,0:T(8,128)} select(pred[128,256]{1,0:T(8,128)(4,1)} %param_0.2264, f32[128,256]{1,0:T(8,128)} %multiply.442, f32[128,256]{1,0:T(8,128)} %broadcast.2808), metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
}

%fused_computation.56.clone (param_0.2265: f32[128,512], param_1.1597: pred[128,256], param_2.1462: f32[128], param_3.880: f32[256]) -> f32[512,256] {
  %param_0.2265 = f32[128,512]{1,0:T(8,128)} parameter(0)
  %param_1.1597 = pred[128,256]{1,0:T(8,128)(4,1)} parameter(1)
  %param_2.1462 = f32[128]{0:T(256)} parameter(2)
  %param_3.880 = f32[256]{0:T(256)} parameter(3)
  %fusion.1379 = f32[128,256]{1,0:T(8,128)} fusion(pred[128,256]{1,0:T(8,128)(4,1)} %param_1.1597, f32[128]{0:T(256)} %param_2.1462, f32[256]{0:T(256)} %param_3.880), kind=kLoop, calls=%fused_computation.55.clone.clone, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/Relu_grad/ReluGrad"}
  ROOT %convolution.407 = f32[512,256]{1,0:T(8,128)} convolution(f32[128,512]{1,0:T(8,128)} %param_0.2265, f32[128,256]{1,0:T(8,128)} %fusion.1379), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul_1"}
}

%fused_computation.51.clone (param_0.2266: f32[128,256], param_1.1598: f32[256], param_2.1463: f32[128]) -> f32[256] {
  %param_0.2266 = f32[128,256]{1,0:T(8,128)} parameter(0)
  %bitcast.112 = f32[256,128]{0,1:T(8,128)} bitcast(f32[128,256]{1,0:T(8,128)} %param_0.2266)
  %param_1.1598 = f32[256]{0:T(256)} parameter(1)
  %broadcast.2811 = f32[256,128]{0,1:T(8,128)} broadcast(f32[256]{0:T(256)} %param_1.1598), dimensions={0}, metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %add.470 = f32[256,128]{0,1:T(8,128)} add(f32[256,128]{0,1:T(8,128)} %bitcast.112, f32[256,128]{0,1:T(8,128)} %broadcast.2811), metadata={op_type="BiasAdd" op_name="while/top_mlp_layer_3/BiasAdd"}
  %constant.2410 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %broadcast.2810 = f32[256,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2410), dimensions={}, metadata={op_name="while/bottom_mlp_layer_1/Relu"}
  %maximum.167 = f32[256,128]{0,1:T(8,128)} maximum(f32[256,128]{0,1:T(8,128)} %add.470, f32[256,128]{0,1:T(8,128)} %broadcast.2810), metadata={op_name="while/top_mlp_layer_3/Relu"}
  %param_2.1463 = f32[128]{0:T(256)} parameter(2)
  %broadcast.2809 = f32[256,128]{0,1:T(8,128)} broadcast(f32[128]{0:T(256)} %param_2.1463), dimensions={1}
  %multiply.443 = f32[256,128]{0,1:T(8,128)} multiply(f32[256,128]{0,1:T(8,128)} %maximum.167, f32[256,128]{0,1:T(8,128)} %broadcast.2809)
  ROOT %reduce.47 = f32[256]{0:T(256)} reduce(f32[256,128]{0,1:T(8,128)} %multiply.443, f32[]{:T(256)} %constant.2410), dimensions={1}, to_apply=%scalar_add_computation
}

%sum.200 (x.201: f32[], y.202: f32[]) -> f32[] {
  %y.202 = f32[]{:T(256)} parameter(1)
  %x.201 = f32[]{:T(256)} parameter(0)
  ROOT %add.38 = f32[]{:T(256)} add(f32[]{:T(256)} %x.201, f32[]{:T(256)} %y.202)
}

%fused_computation.3.clone (param_0.2267: f32[19656,128], param_1.1599: f32[19656,128], param_2.1464: f32[]) -> f32[19656,128] {
  %param_0.2267 = f32[19656,128]{1,0:T(8,128)} parameter(0)
  %param_2.1464 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2812 = f32[19656,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1464), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  %param_1.1599 = f32[19656,128]{1,0:T(8,128)} parameter(1)
  %multiply.445 = f32[19656,128]{1,0:T(8,128)} multiply(f32[19656,128]{1,0:T(8,128)} %broadcast.2812, f32[19656,128]{1,0:T(8,128)} %param_1.1599), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  ROOT %subtract.131 = f32[19656,128]{1,0:T(8,128)} subtract(f32[19656,128]{1,0:T(8,128)} %param_0.2267, f32[19656,128]{1,0:T(8,128)} %multiply.445), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
}

%fused_computation.446.clone (param_0.2268: f32[512], param_1.1600: f32[512], param_2.1465: f32[]) -> f32[512] {
  %param_0.2268 = f32[512]{0:T(512)} parameter(0)
  %param_2.1465 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2813 = f32[512]{0:T(512)} broadcast(f32[]{:T(256)S(5)} %param_2.1465), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %param_1.1600 = f32[512]{0:T(512)} parameter(1)
  %multiply.447 = f32[512]{0:T(512)} multiply(f32[512]{0:T(512)} %broadcast.2813, f32[512]{0:T(512)} %param_1.1600), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.145 = f32[512]{0:T(512)} subtract(f32[512]{0:T(512)} %param_0.2268, f32[512]{0:T(512)} %multiply.447), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
}

%fused_computation.293.clone (param_0.2269: f32[13,512], param_1.1601: f32[13,512], param_2.1466: f32[]) -> f32[13,512] {
  %param_0.2269 = f32[13,512]{1,0:T(8,128)} parameter(0)
  %param_2.1466 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2814 = f32[13,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1466), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %param_1.1601 = f32[13,512]{1,0:T(8,128)} parameter(1)
  %multiply.448 = f32[13,512]{1,0:T(8,128)} multiply(f32[13,512]{1,0:T(8,128)} %broadcast.2814, f32[13,512]{1,0:T(8,128)} %param_1.1601), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.146 = f32[13,512]{1,0:T(8,128)} subtract(f32[13,512]{1,0:T(8,128)} %param_0.2269, f32[13,512]{1,0:T(8,128)} %multiply.448), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.455.clone (param_0.2270: f32[256], param_1.1602: f32[256], param_2.1467: f32[]) -> f32[256] {
  %param_0.2270 = f32[256]{0:T(256)} parameter(0)
  %param_2.1467 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2815 = f32[256]{0:T(256)} broadcast(f32[]{:T(256)S(5)} %param_2.1467), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %param_1.1602 = f32[256]{0:T(256)} parameter(1)
  %multiply.449 = f32[256]{0:T(256)} multiply(f32[256]{0:T(256)} %broadcast.2815, f32[256]{0:T(256)} %param_1.1602), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.147 = f32[256]{0:T(256)} subtract(f32[256]{0:T(256)} %param_0.2270, f32[256]{0:T(256)} %multiply.449), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
}

%fused_computation.25.clone (param_0.2271: f32[512,256], param_1.1603: f32[512,256], param_2.1468: f32[]) -> f32[512,256] {
  %param_0.2271 = f32[512,256]{1,0:T(8,128)} parameter(0)
  %param_2.1468 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2816 = f32[512,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1468), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %param_1.1603 = f32[512,256]{1,0:T(8,128)} parameter(1)
  %multiply.450 = f32[512,256]{1,0:T(8,128)} multiply(f32[512,256]{1,0:T(8,128)} %broadcast.2816, f32[512,256]{1,0:T(8,128)} %param_1.1603), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.148 = f32[512,256]{1,0:T(8,128)} subtract(f32[512,256]{1,0:T(8,128)} %param_0.2271, f32[512,256]{1,0:T(8,128)} %multiply.450), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.454.clone (param_0.2272: f32[128], param_1.1604: f32[128], param_2.1469: f32[]) -> f32[128] {
  %param_0.2272 = f32[128]{0:T(256)} parameter(0)
  %param_2.1469 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2817 = f32[128]{0:T(256)} broadcast(f32[]{:T(256)S(5)} %param_2.1469), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %param_1.1604 = f32[128]{0:T(256)} parameter(1)
  %multiply.451 = f32[128]{0:T(256)} multiply(f32[128]{0:T(256)} %broadcast.2817, f32[128]{0:T(256)} %param_1.1604), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.149 = f32[128]{0:T(256)} subtract(f32[128]{0:T(256)} %param_0.2272, f32[128]{0:T(256)} %multiply.451), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
}

%fused_computation.59.clone (param_0.2273: f32[256,128], param_1.1605: f32[256,128], param_2.1470: f32[]) -> f32[256,128] {
  %param_0.2273 = f32[256,128]{1,0:T(8,128)} parameter(0)
  %param_2.1470 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2818 = f32[256,128]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1470), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %param_1.1605 = f32[256,128]{1,0:T(8,128)} parameter(1)
  %multiply.452 = f32[256,128]{1,0:T(8,128)} multiply(f32[256,128]{1,0:T(8,128)} %broadcast.2818, f32[256,128]{1,0:T(8,128)} %param_1.1605), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.150 = f32[256,128]{1,0:T(8,128)} subtract(f32[256,128]{1,0:T(8,128)} %param_0.2273, f32[256,128]{1,0:T(8,128)} %multiply.452), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.313.clone (param_0.2274: f32[1024], param_1.1606: f32[1024], param_2.1471: f32[]) -> f32[1024] {
  %param_0.2274 = f32[1024]{0:T(1024)} parameter(0)
  %param_2.1471 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2819 = f32[1024]{0:T(1024)} broadcast(f32[]{:T(256)S(5)} %param_2.1471), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %param_1.1606 = f32[1024]{0:T(1024)} parameter(1)
  %multiply.453 = f32[1024]{0:T(1024)} multiply(f32[1024]{0:T(1024)} %broadcast.2819, f32[1024]{0:T(1024)} %param_1.1606), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.151 = f32[1024]{0:T(1024)} subtract(f32[1024]{0:T(1024)} %param_0.2274, f32[1024]{0:T(1024)} %multiply.453), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
}

%fused_computation.7.clone (param_0.2275: f32[857,1024], param_1.1607: f32[857,1024], param_2.1472: f32[]) -> f32[857,1024] {
  %param_0.2275 = f32[857,1024]{1,0:T(8,128)} parameter(0)
  %param_2.1472 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2820 = f32[857,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1472), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %param_1.1607 = f32[857,1024]{1,0:T(8,128)} parameter(1)
  %multiply.454 = f32[857,1024]{1,0:T(8,128)} multiply(f32[857,1024]{1,0:T(8,128)} %broadcast.2820, f32[857,1024]{1,0:T(8,128)} %param_1.1607), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.152 = f32[857,1024]{1,0:T(8,128)} subtract(f32[857,1024]{1,0:T(8,128)} %param_0.2275, f32[857,1024]{1,0:T(8,128)} %multiply.454), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.312.clone (param_0.2276: f32[1024], param_1.1608: f32[1024], param_2.1473: f32[]) -> f32[1024] {
  %param_0.2276 = f32[1024]{0:T(1024)} parameter(0)
  %param_2.1473 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2821 = f32[1024]{0:T(1024)} broadcast(f32[]{:T(256)S(5)} %param_2.1473), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %param_1.1608 = f32[1024]{0:T(1024)} parameter(1)
  %multiply.455 = f32[1024]{0:T(1024)} multiply(f32[1024]{0:T(1024)} %broadcast.2821, f32[1024]{0:T(1024)} %param_1.1608), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.153 = f32[1024]{0:T(1024)} subtract(f32[1024]{0:T(1024)} %param_0.2276, f32[1024]{0:T(1024)} %multiply.455), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
}

%fused_computation.6.clone (param_0.2277: f32[1024,1024], param_1.1609: f32[1024,1024], param_2.1474: f32[]) -> f32[1024,1024] {
  %param_0.2277 = f32[1024,1024]{1,0:T(8,128)} parameter(0)
  %param_2.1474 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2822 = f32[1024,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1474), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %param_1.1609 = f32[1024,1024]{1,0:T(8,128)} parameter(1)
  %multiply.456 = f32[1024,1024]{1,0:T(8,128)} multiply(f32[1024,1024]{1,0:T(8,128)} %broadcast.2822, f32[1024,1024]{1,0:T(8,128)} %param_1.1609), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.154 = f32[1024,1024]{1,0:T(8,128)} subtract(f32[1024,1024]{1,0:T(8,128)} %param_0.2277, f32[1024,1024]{1,0:T(8,128)} %multiply.456), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.445.clone (param_0.2278: f32[512], param_1.1610: f32[512], param_2.1475: f32[]) -> f32[512] {
  %param_0.2278 = f32[512]{0:T(512)} parameter(0)
  %param_2.1475 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2823 = f32[512]{0:T(512)} broadcast(f32[]{:T(256)S(5)} %param_2.1475), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %param_1.1610 = f32[512]{0:T(512)} parameter(1)
  %multiply.457 = f32[512]{0:T(512)} multiply(f32[512]{0:T(512)} %broadcast.2823, f32[512]{0:T(512)} %param_1.1610), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.155 = f32[512]{0:T(512)} subtract(f32[512]{0:T(512)} %param_0.2278, f32[512]{0:T(512)} %multiply.457), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
}

%fused_computation.16.clone (param_0.2279: f32[1024,512], param_1.1611: f32[1024,512], param_2.1476: f32[]) -> f32[1024,512] {
  %param_0.2279 = f32[1024,512]{1,0:T(8,128)} parameter(0)
  %param_2.1476 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2824 = f32[1024,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1476), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %param_1.1611 = f32[1024,512]{1,0:T(8,128)} parameter(1)
  %multiply.458 = f32[1024,512]{1,0:T(8,128)} multiply(f32[1024,512]{1,0:T(8,128)} %broadcast.2824, f32[1024,512]{1,0:T(8,128)} %param_1.1611), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.156 = f32[1024,512]{1,0:T(8,128)} subtract(f32[1024,512]{1,0:T(8,128)} %param_0.2279, f32[1024,512]{1,0:T(8,128)} %multiply.458), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.453.clone (param_0.2280: f32[256], param_1.1612: f32[256], param_2.1477: f32[]) -> f32[256] {
  %param_0.2280 = f32[256]{0:T(256)} parameter(0)
  %param_2.1477 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2825 = f32[256]{0:T(256)} broadcast(f32[]{:T(256)S(5)} %param_2.1477), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %param_1.1612 = f32[256]{0:T(256)} parameter(1)
  %multiply.459 = f32[256]{0:T(256)} multiply(f32[256]{0:T(256)} %broadcast.2825, f32[256]{0:T(256)} %param_1.1612), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
  ROOT %subtract.157 = f32[256]{0:T(256)} subtract(f32[256]{0:T(256)} %param_0.2280, f32[256]{0:T(256)} %multiply.459), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
}

%fused_computation.24.clone (param_0.2281: f32[512,256], param_1.1613: f32[512,256], param_2.1478: f32[]) -> f32[512,256] {
  %param_0.2281 = f32[512,256]{1,0:T(8,128)} parameter(0)
  %param_2.1478 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2826 = f32[512,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1478), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %param_1.1613 = f32[512,256]{1,0:T(8,128)} parameter(1)
  %multiply.460 = f32[512,256]{1,0:T(8,128)} multiply(f32[512,256]{1,0:T(8,128)} %broadcast.2826, f32[512,256]{1,0:T(8,128)} %param_1.1613), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.158 = f32[512,256]{1,0:T(8,128)} subtract(f32[512,256]{1,0:T(8,128)} %param_0.2281, f32[512,256]{1,0:T(8,128)} %multiply.460), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
}

%fused_computation.444.clone (param_0.2282: f32[256,1], param_1.1614: f32[256,1], param_2.1479: f32[]) -> f32[256,1] {
  %param_0.2282 = f32[256,1]{0,1:T(2,128)} parameter(0)
  %param_2.1479 = f32[]{:T(256)S(5)} parameter(2)
  %broadcast.2827 = f32[256,1]{0,1:T(2,128)} broadcast(f32[]{:T(256)S(5)} %param_2.1479), dimensions={}, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  %param_1.1614 = f32[256,1]{0,1:T(2,128)} parameter(1)
  %multiply.462 = f32[256,1]{0,1:T(2,128)} multiply(f32[256,1]{0,1:T(2,128)} %broadcast.2827, f32[256,1]{0,1:T(2,128)} %param_1.1614), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  ROOT %subtract.160 = f32[256,1]{0,1:T(2,128)} subtract(f32[256,1]{0,1:T(2,128)} %param_0.2282, f32[256,1]{0,1:T(2,128)} %multiply.462), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
}

%wide._functionalize_body_10__.204.clone (wide_param.5: (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], pred[128,729], f32[], /*index=35*/pred[128,27,27], s32[128,13], u32[], s32[], u32[], /*index=40*/u32[], u32[], u32[], u32[], u32[], /*index=45*/f32[], f32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], s32[], f32[], /*index=55*/f32[], f32[1])) -> (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], pred[128,729], f32[], /*index=35*/pred[128,27,27], s32[128,13], u32[], s32[], u32[], /*index=40*/u32[], u32[], u32[], u32[], u32[], /*index=45*/f32[], f32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], s32[], f32[], /*index=55*/f32[], f32[1]) {
  %wide_param.5 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) parameter(0)
  %get-tuple-element.3543 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=0
  %get-tuple-element.3544 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=1
  %copy.214 = u32[]{:T(256)S(5)} copy(u32[]{:T(256)} %get-tuple-element.3544), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3545 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=2
  %copy.215 = u32[]{:T(256)S(5)} copy(u32[]{:T(256)} %get-tuple-element.3545), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %bitcast-convert.43 = s32[]{:T(256)S(5)} bitcast-convert(u32[]{:T(256)S(5)} %copy.215), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3547 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=4
  %get-tuple-element.3548 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=5
  %get-tuple-element.3549 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=6
  %get-tuple-element.3550 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=7
  %get-tuple-element.3551 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=8
  %get-tuple-element.3552 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=9
  %get-tuple-element.3553 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=10
  %get-tuple-element.3554 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=11
  %get-tuple-element.3555 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=12
  %get-tuple-element.3556 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=13
  %get-tuple-element.3557 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=14
  %get-tuple-element.3558 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=15
  %get-tuple-element.3559 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=16
  %get-tuple-element.3574 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=31
  %get-tuple-element.3577 = f32[] get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=34
  %get-tuple-element.3580 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=37, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3581 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=38, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %compare.766 = pred[]{:T(1024)S(5)} compare(s32[]{:T(256)S(5)} %bitcast-convert.43, s32[]{:T(256)} %get-tuple-element.3581), direction=LT, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3582 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=39, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %subtract.124 = u32[]{:T(256)S(5)} subtract(u32[]{:T(256)} %get-tuple-element.3582, u32[]{:T(256)S(5)} %copy.214), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.657 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.766, u32[]{:T(256)S(5)} %subtract.124, u32[]{:T(256)S(5)} %copy.214), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %convert.260 = f32[]{:T(256)S(5)} convert(u32[]{:T(256)S(5)} %select.657), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %negate.27 = f32[]{:T(256)S(5)} negate(f32[]{:T(256)S(5)} %convert.260), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.658 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.766, f32[]{:T(256)S(5)} %negate.27, f32[]{:T(256)S(5)} %convert.260), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %compare.767 = pred[]{:T(1024)S(5)} compare(u32[]{:T(256)S(5)} %subtract.124, u32[]{:T(256)} %get-tuple-element.3582), direction=NE, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3583 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=40, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %add.468 = u32[]{:T(256)} add(u32[]{:T(256)S(5)} %copy.214, u32[]{:T(256)} %get-tuple-element.3583), metadata={op_type="AssignAddVariableOp" op_name="while/training/train"}
  %compare.773 = pred[]{:T(1024)S(5)} compare(u32[]{:T(256)} %add.468, u32[]{:T(256)S(5)} %copy.214), direction=LT, metadata={op_type="AssignAddVariableOp" op_name="while/training/train"}
  %add.462 = u32[]{:T(256)S(5)} add(u32[]{:T(256)S(5)} %copy.215, u32[]{:T(256)} %get-tuple-element.3583), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.665 = u32[]{:T(256)} select(pred[]{:T(1024)S(5)} %compare.773, u32[]{:T(256)S(5)} %add.462, u32[]{:T(256)S(5)} %copy.215), metadata={op_type="AssignAddVariableOp" op_name="while/training/train"}
  %select.655 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.767, u32[]{:T(256)S(5)} %add.462, u32[]{:T(256)S(5)} %copy.215), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %subtract.125 = u32[]{:T(256)S(5)} subtract(u32[]{:T(256)} %get-tuple-element.3582, u32[]{:T(256)S(5)} %select.655), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.656 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.766, u32[]{:T(256)S(5)} %subtract.125, u32[]{:T(256)S(5)} %copy.215), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %count-leading-zeros.6 = u32[]{:T(256)S(5)} count-leading-zeros(u32[]{:T(256)S(5)} %select.656), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %subtract.126 = u32[]{:T(256)S(5)} subtract(u32[]{:T(256)} %get-tuple-element.3580, u32[]{:T(256)S(5)} %count-leading-zeros.6), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %add.463 = u32[]{:T(256)S(5)} add(u32[]{:T(256)S(5)} %subtract.126, u32[]{:T(256)} %get-tuple-element.3583), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %shift-right-logical.25 = u32[]{:T(256)S(5)} shift-right-logical(u32[]{:T(256)S(5)} %select.657, u32[]{:T(256)S(5)} %add.463), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %subtract.127 = u32[]{:T(256)S(5)} subtract(u32[]{:T(256)} %get-tuple-element.3580, u32[]{:T(256)S(5)} %add.463), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %shift-left.12 = u32[]{:T(256)S(5)} shift-left(u32[]{:T(256)S(5)} %select.656, u32[]{:T(256)S(5)} %subtract.127), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %or.19 = u32[]{:T(256)S(5)} or(u32[]{:T(256)S(5)} %shift-left.12, u32[]{:T(256)S(5)} %shift-right-logical.25), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %compare.769 = pred[]{:T(1024)S(5)} compare(u32[]{:T(256)S(5)} %add.463, u32[]{:T(256)} %get-tuple-element.3580), direction=GE, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %compare.768 = pred[]{:T(1024)S(5)} compare(u32[]{:T(256)S(5)} %subtract.126, u32[]{:T(256)} %get-tuple-element.3582), direction=EQ, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3584 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=41, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.659 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.766, u32[]{:T(256)} %get-tuple-element.3584, u32[]{:T(256)} %get-tuple-element.3582), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3585 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=42
  %add.464 = u32[]{:T(256)S(5)} add(u32[]{:T(256)S(5)} %subtract.126, u32[]{:T(256)} %get-tuple-element.3585), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %shift-right-logical.24 = u32[]{:T(256)S(5)} shift-right-logical(u32[]{:T(256)S(5)} %select.656, u32[]{:T(256)S(5)} %add.464), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.660 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.769, u32[]{:T(256)S(5)} %shift-right-logical.24, u32[]{:T(256)S(5)} %or.19), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3586 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=43, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %shift-right-logical.26 = u32[]{:T(256)S(5)} shift-right-logical(u32[]{:T(256)} %get-tuple-element.3586, u32[]{:T(256)S(5)} %subtract.127), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %and.8 = u32[]{:T(256)S(5)} and(u32[]{:T(256)S(5)} %shift-right-logical.26, u32[]{:T(256)S(5)} %select.657), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %compare.770 = pred[]{:T(1024)S(5)} compare(u32[]{:T(256)S(5)} %and.8, u32[]{:T(256)} %get-tuple-element.3582), direction=NE, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.661 = u32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.770, u32[]{:T(256)} %get-tuple-element.3583, u32[]{:T(256)} %get-tuple-element.3582), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %or.20 = u32[]{:T(256)S(5)} or(u32[]{:T(256)S(5)} %select.660, u32[]{:T(256)S(5)} %select.661), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %convert.261 = f32[]{:T(256)S(5)} convert(u32[]{:T(256)S(5)} %or.20), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %bitcast-convert.44 = u32[]{:T(256)S(5)} bitcast-convert(f32[]{:T(256)S(5)} %convert.261), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3587 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=44, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %shift-left.13 = u32[]{:T(256)S(5)} shift-left(u32[]{:T(256)S(5)} %add.463, u32[]{:T(256)} %get-tuple-element.3587), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %add.465 = u32[]{:T(256)S(5)} add(u32[]{:T(256)S(5)} %bitcast-convert.44, u32[]{:T(256)S(5)} %shift-left.13), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %or.21 = u32[]{:T(256)S(5)} or(u32[]{:T(256)S(5)} %select.659, u32[]{:T(256)S(5)} %add.465), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %bitcast-convert.45 = f32[]{:T(256)S(5)} bitcast-convert(u32[]{:T(256)S(5)} %or.21), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %select.662 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.768, f32[]{:T(256)S(5)} %select.658, f32[]{:T(256)S(5)} %bitcast-convert.45), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3588 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=45, sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %subtract.129 = f32[]{:T(256)S(5)} subtract(f32[]{:T(256)} %get-tuple-element.3588, f32[]{:T(256)S(5)} %select.662), metadata={op_type="Sub" op_name="while/sub_4"}
  %compare.771 = pred[]{:T(1024)S(5)} compare(f32[]{:T(256)S(5)} %select.662, f32[]{:T(256)} %get-tuple-element.3588), direction=LT, sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %convert.265 = f32[]{:T(256)S(5)} convert(pred[]{:T(1024)S(5)} %compare.771), metadata={op_type="Cast" op_name="while/Cast_6"}
  %get-tuple-element.3589 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=46
  %multiply.439 = f32[]{:T(256)S(5)} multiply(f32[]{:T(256)S(5)} %select.662, f32[]{:T(256)} %get-tuple-element.3589), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_10"}
  %get-tuple-element.3590 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=47, sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %compare.772 = pred[]{:T(1024)S(5)} compare(f32[]{:T(256)S(5)} %select.662, f32[]{:T(256)} %get-tuple-element.3590), direction=GT, sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %convert.266 = f32[]{:T(256)S(5)} convert(pred[]{:T(1024)S(5)} %compare.772), metadata={op_type="Cast" op_name="while/Cast_7"}
  %add.471 = f32[]{:T(256)S(5)} add(f32[]{:T(256)S(5)} %convert.265, f32[]{:T(256)S(5)} %convert.266), metadata={op_type="AddV2" op_name="while/add_4"}
  %get-tuple-element.3591 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=48, sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %get-tuple-element.3592 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=49, sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %get-tuple-element.3593 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=50
  %add.466 = f32[]{:T(256)S(5)} add(f32[]{:T(256)S(5)} %select.662, f32[]{:T(256)} %get-tuple-element.3593), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_8"}
  %minimum.4 = f32[]{:T(256)S(5)} minimum(f32[]{:T(256)S(5)} %add.466, f32[]{:T(256)} %get-tuple-element.3592), sharding={maximal device=0}, metadata={op_type="Minimum" op_name="while/Minimum_2"}
  %subtract.128 = f32[]{:T(256)S(5)} subtract(f32[]{:T(256)} %get-tuple-element.3592, f32[]{:T(256)S(5)} %minimum.4), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %multiply.440 = f32[]{:T(256)S(5)} multiply(f32[]{:T(256)S(5)} %subtract.128, f32[]{:T(256)S(5)} %subtract.128)
  %get-tuple-element.3594 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=51
  %multiply.441 = f32[]{:T(256)S(5)} multiply(f32[]{:T(256)S(5)} %multiply.440, f32[]{:T(256)} %get-tuple-element.3594), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %maximum.168 = f32[]{:T(256)S(5)} maximum(f32[]{:T(256)S(5)} %multiply.441, f32[]{:T(256)} %get-tuple-element.3591), metadata={op_type="Maximum" op_name="while/Maximum_1"}
  %maximum.165 = f32[]{:T(256)S(5)} maximum(f32[]{:T(256)} %get-tuple-element.3591, f32[]{:T(256)S(5)} %multiply.441), sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %get-tuple-element.3595 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=52, sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %select.663 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.772, f32[]{:T(256)S(5)} %maximum.165, f32[]{:T(256)} %get-tuple-element.3595), metadata={op_name="while/Select_1"}
  %select.664 = f32[]{:T(256)} select(pred[]{:T(1024)S(5)} %compare.771, f32[]{:T(256)S(5)} %multiply.439, f32[]{:T(256)S(5)} %select.663), metadata={op_name="while/Select_2"}
  %get-tuple-element.3596 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=53, sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %add.467 = s32[]{:T(256)} add(s32[]{:T(256)} %get-tuple-element.3543, s32[]{:T(256)} %get-tuple-element.3596), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %get-tuple-element.3597 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=54, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %select.672 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.772, f32[]{:T(256)S(5)} %maximum.168, f32[]{:T(256)} %get-tuple-element.3597), metadata={op_type="Mul" op_name="while/mul_9"}
  %compare.777 = pred[]{:T(1024)S(5)} compare(f32[]{:T(256)S(5)} %add.471, f32[]{:T(256)} %get-tuple-element.3597), direction=EQ, metadata={op_type="Equal" op_name="while/Equal_1"}
  %select.671 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.777, f32[]{:T(256)} %get-tuple-element.3595, f32[]{:T(256)} %get-tuple-element.3597), metadata={op_type="Mul" op_name="while/mul_8"}
  %get-tuple-element.3598 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=55, metadata={op_type="Mul" op_name="while/mul_5"}
  %multiply.444 = f32[]{:T(256)S(5)} multiply(f32[]{:T(256)S(5)} %subtract.129, f32[]{:T(256)} %get-tuple-element.3598), metadata={op_type="Mul" op_name="while/mul_5"}
  %subtract.130 = f32[]{:T(256)S(5)} subtract(f32[]{:T(256)} %get-tuple-element.3595, f32[]{:T(256)S(5)} %multiply.444), metadata={op_type="Sub" op_name="while/sub_5"}
  %select.670 = f32[]{:T(256)S(5)} select(pred[]{:T(1024)S(5)} %compare.771, f32[]{:T(256)S(5)} %subtract.130, f32[]{:T(256)} %get-tuple-element.3597), metadata={op_type="Mul" op_name="while/mul_7"}
  %add.472 = f32[]{:T(256)S(5)} add(f32[]{:T(256)S(5)} %select.670, f32[]{:T(256)S(5)} %select.671), metadata={op_type="AddV2" op_name="while/add_5"}
  %add.473 = f32[]{:T(256)S(5)} add(f32[]{:T(256)S(5)} %add.472, f32[]{:T(256)S(5)} %select.672), metadata={op_type="AddV2" op_name="while/add_6"}
  %get-tuple-element.3599 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=56
  %bitcast.113 = f32[1]{0:T(256)S(5)} bitcast(f32[]{:T(256)S(5)} %add.473), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %multiply.446 = f32[1]{0:T(256)S(5)} multiply(f32[1]{0:T(256)S(5)} %bitcast.113, f32[1]{0:T(256)} %get-tuple-element.3599), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %subtract.144 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3559, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl09/ResourceApplyGradientDescent"}
  %subtract.143 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3558, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl08/ResourceApplyGradientDescent"}
  %subtract.142 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3557, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl07/ResourceApplyGradientDescent"}
  %subtract.141 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3556, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl06/ResourceApplyGradientDescent"}
  %subtract.140 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3555, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl05/ResourceApplyGradientDescent"}
  %subtract.139 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3554, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl04/ResourceApplyGradientDescent"}
  %subtract.138 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3553, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl03/ResourceApplyGradientDescent"}
  %subtract.137 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3552, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl02/ResourceApplyGradientDescent"}
  %subtract.136 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3551, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl12/ResourceApplyGradientDescent"}
  %subtract.135 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3550, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl11/ResourceApplyGradientDescent"}
  %subtract.134 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3549, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl10/ResourceApplyGradientDescent"}
  %subtract.133 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3548, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl01/ResourceApplyGradientDescent"}
  %subtract.132 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3547, f32[1]{0:T(256)S(5)} %multiply.446), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tpu_embedding_dummy_table_variable_tbl00/ResourceApplyGradientDescent"}
  %get-tuple-element.3572 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=29
  %get-tuple-element.3563 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=20
  %get-tuple-element.3565 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=22
  %get-tuple-element.3567 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=24
  %get-tuple-element.3569 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=26
  %get-tuple-element.3571 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=28
  %get-tuple-element.3573 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=30
  %get-tuple-element.3546 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=3
  %get-tuple-element.3560 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=17
  %get-tuple-element.3561 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=18
  %get-tuple-element.3562 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=19
  %get-tuple-element.3564 = f32[128]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=21
  %get-tuple-element.3566 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=23
  %get-tuple-element.3568 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=25
  %get-tuple-element.3570 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=27
  %get-tuple-element.3575 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=32
  %get-tuple-element.3576 = pred[128,729]{0,1:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=33
  %get-tuple-element.3578 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=35, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %get-tuple-element.3579 = s32[128,13]{0,1:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.5), index=36, metadata={op_type="AddV2" op_name="while/add"}
  %after-all.31 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %after-all.30 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %after-all.29 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %after-all.28 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %reduce.37 = f32[256]{0:T(256)} reduce(f32[256,1]{0,1:T(2,128)} %get-tuple-element.3575, f32[] %get-tuple-element.3577), dimensions={1}, to_apply=%get-tuple-element.798.reduce_sub_computation
  %infeed.27 = ((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}), token[]) infeed(token[] %after-all.29), sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}}
  %get-tuple-element.2680 = (f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) get-tuple-element(((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}), token[]) %infeed.27), index=0
  %get-tuple-element.2687 = f32[128,13]{0,1:T(8,128)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2680), index=1, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %get-tuple-element.2686 = s32[128,13]{0,1:T(8,128)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2680), index=2, metadata={op_type="InfeedDequeueTuple" op_name="while/InfeedQueue/dequeue"}
  %get-tuple-element.2681 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2680), index=0
  %add.434 = s32[128,13]{0,1:T(8,128)} add(s32[128,13]{0,1:T(8,128)} %get-tuple-element.2686, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3579), metadata={op_type="AddV2" op_name="while/add"}
  %copy.148 = s32[128,13]{1,0:T(8,128)} copy(s32[128,13]{0,1:T(8,128)} %add.434), metadata={op_type="AddV2" op_name="while/add"}
  %reshape.400 = s32[1664]{0:T(1024)} reshape(s32[128,13]{1,0:T(8,128)} %copy.148)
  %fusion.1201 = s32[2048]{0} fusion(s32[1664]{0:T(1024)} %reshape.400), kind=kLoop, calls=%fused_computation.294.clone, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %fusion.1203 = f32[128,512]{1,0:T(8,128)} fusion(f32[128,13]{0,1:T(8,128)} %get-tuple-element.2687, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3561, f32[512]{0:T(512)} %get-tuple-element.3560), kind=kOutput, calls=%fused_computation.34.clone, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_0/MatMul"}
  %fusion.1204 = f32[128,256]{1,0:T(8,128)} fusion(f32[128,512]{1,0:T(8,128)} %fusion.1203, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3563, f32[256]{0:T(256)} %get-tuple-element.3562), kind=kOutput, calls=%fused_computation.54.clone, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_1/MatMul"}
  %fusion.1205 = f32[128,128]{1,0:T(8,128)} fusion(f32[128,256]{1,0:T(8,128)} %fusion.1204, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3565, f32[128]{0:T(256)} %get-tuple-element.3564), kind=kOutput, calls=%fused_computation.136.clone, metadata={op_type="MatMul" op_name="while/bottom_mlp_layer_2/MatMul"}
  %copy.152 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(f32[128,128]{1,0:T(8,128)} %fusion.1205), metadata={op_name="while/bottom_mlp_layer_2/Relu"}
  %fusion.1202 = bf16[1664,128]{1,0:T(8,128)(2,1)} fusion(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3546, s32[2048]{0} %fusion.1201), kind=kCustom, calls=%fused_computation.clone, metadata={op_type="ResourceGather" op_name="while/Gather"}
  %reshape.403 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} reshape(bf16[1664,128]{1,0:T(8,128)(2,1)} %fusion.1202)
  %copy.149 = bf16[128,13,128]{2,0,1:T(8,128)(2,1)} copy(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %reshape.403)
  %infeed.26 = (((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})), token[]) infeed(token[] %after-all.28), infeed_config="\032_\n\007\010\200\010\030\003 \003\020\001\030\200\270\002\"N\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\"\007\010\r\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\0102\020\300\361\333\007", sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %get-tuple-element.2674 = ((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})) get-tuple-element((((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})), token[]) %infeed.26), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster_TPU_REPLICATED_CORE_0"}
  %get-tuple-element.2675 = (u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) get-tuple-element(((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})) %get-tuple-element.2674), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2732 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=36, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2731 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=38, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2730 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=37, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2729 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=33, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2728 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=35, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2727 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=34, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2726 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=30, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2725 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=32, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2724 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=31, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2723 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=27, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2722 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=29, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2721 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=28, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2720 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=24, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2719 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=26, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2718 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=25, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2717 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=21, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2716 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=23, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2715 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=22, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2714 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=18, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2713 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=20, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2712 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=19, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2711 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=15, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2710 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=17, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2709 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=16, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2708 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=12, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2707 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=14, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2706 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=13, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2705 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=9, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2704 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=11, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2703 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=10, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2702 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=6, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2701 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=8, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2700 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=7, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2699 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=3, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2698 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=5, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2697 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=4, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2678 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2677 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=2, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2676 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2675), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %infeed.28 = ((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), token[]) infeed(token[] %after-all.30), infeed_config="\n(\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\t\010\200\370\304\004\030\001 \001\"\007\010=\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010!\020\300\361\333\007", sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2694 = (f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) get-tuple-element(((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), token[]) %infeed.28), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2696 = f32[952,128]{1,0:T(8,128)} get-tuple-element((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) %get-tuple-element.2694), index=1, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %get-tuple-element.2695 = f32[816,128]{1,0:T(8,128)} get-tuple-element((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) %get-tuple-element.2694), index=0, sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.404 = f32[136,768]{1,0:T(8,128)} reshape(f32[816,128]{1,0:T(8,128)} %get-tuple-element.2695), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1260 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2724, u32[128]{0:T(256)} %get-tuple-element.2725, u32[128]{0:T(256)} %get-tuple-element.2726), kind=kOutput, calls=%fused_computation.75.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1250 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2718, u32[128]{0:T(256)} %get-tuple-element.2719, u32[128]{0:T(256)} %get-tuple-element.2720), kind=kOutput, calls=%fused_computation.79.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1240 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2712, u32[128]{0:T(256)} %get-tuple-element.2713, u32[128]{0:T(256)} %get-tuple-element.2714), kind=kOutput, calls=%fused_computation.83.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1235 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2709, u32[128]{0:T(256)} %get-tuple-element.2710, u32[128]{0:T(256)} %get-tuple-element.2711), kind=kOutput, calls=%fused_computation.85.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1225 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2703, u32[128]{0:T(256)} %get-tuple-element.2704, u32[128]{0:T(256)} %get-tuple-element.2705), kind=kOutput, calls=%fused_computation.89.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1210 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.404, f32[128]{0:T(256)} %get-tuple-element.2676, u32[128]{0:T(256)} %get-tuple-element.2677, u32[128]{0:T(256)} %get-tuple-element.2678), kind=kOutput, calls=%fused_computation.95.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %reshape.405 = f32[136,896]{1,0:T(8,128)} reshape(f32[952,128]{1,0:T(8,128)} %get-tuple-element.2696), sharding={maximal device=0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1270 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2730, u32[128]{0:T(256)} %get-tuple-element.2731, u32[128]{0:T(256)} %get-tuple-element.2732), kind=kOutput, calls=%fused_computation.71.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1265 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2727, u32[128]{0:T(256)} %get-tuple-element.2728, u32[128]{0:T(256)} %get-tuple-element.2729), kind=kOutput, calls=%fused_computation.73.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1255 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2721, u32[128]{0:T(256)} %get-tuple-element.2722, u32[128]{0:T(256)} %get-tuple-element.2723), kind=kOutput, calls=%fused_computation.77.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1245 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2715, u32[128]{0:T(256)} %get-tuple-element.2716, u32[128]{0:T(256)} %get-tuple-element.2717), kind=kOutput, calls=%fused_computation.81.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1230 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2706, u32[128]{0:T(256)} %get-tuple-element.2707, u32[128]{0:T(256)} %get-tuple-element.2708), kind=kOutput, calls=%fused_computation.87.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1220 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2700, u32[128]{0:T(256)} %get-tuple-element.2701, u32[128]{0:T(256)} %get-tuple-element.2702), kind=kOutput, calls=%fused_computation.91.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %fusion.1215 = bf16[128,1,128]{2,0,1:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.405, f32[128]{0:T(256)} %get-tuple-element.2697, u32[128]{0:T(256)} %get-tuple-element.2698, u32[128]{0:T(256)} %get-tuple-element.2699), kind=kOutput, calls=%fused_computation.93.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="while/RecvTPUEmbeddingActivations"}
  %bitcast.90 = f32[128,1,128]{2,0,1:T(8,128)} bitcast(f32[128,128]{1,0:T(8,128)} %fusion.1205), metadata={op_type="ConcatV2" op_name="while/concat"}
  %concatenate.218 = bf16[128,14,128]{2,0,1:T(8,128)(2,1)} concatenate(f32[128,1,128]{2,0,1:T(8,128)} %bitcast.90, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1210, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1215, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1220, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1225, /*index=5*/bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1230, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1235, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1240, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1245, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1250, /*index=10*/bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1255, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1260, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1265, bf16[128,1,128]{2,0,1:T(8,128)(2,1)} %fusion.1270), dimensions={1}, metadata={op_type="ConcatV2" op_name="while/concat"}
  %fusion.1271 = bf16[128,27,128]{2,0,1:T(8,128)(2,1)} fusion(bf16[128,13,128]{2,0,1:T(8,128)(2,1)} %copy.149, bf16[128,14,128]{2,0,1:T(8,128)(2,1)} %concatenate.218), kind=kLoop, calls=%fused_computation.17.clone, metadata={op_type="ConcatV2" op_name="while/concat_1"}
  %fusion.1273 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} fusion(pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3578, bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %fusion.1271), kind=kOutput, calls=%fused_computation.14.clone, metadata={op_type="BatchMatMulV2" op_name="while/MatMul"}
  %copy.151 = bf16[128,27,27]{0,2,1:T(8,128)(2,1)} copy(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %fusion.1273), metadata={op_name="while/Select"}
  %reshape.406 = bf16[128,729]{0,1:T(8,128)(2,1)} reshape(bf16[128,27,27]{0,2,1:T(8,128)(2,1)} %copy.151), metadata={op_type="Reshape" op_name="while/Reshape_14"}
  %fusion.1275 = f32[128,1024]{1,0:T(8,128)} fusion(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3567, bf16[128,729]{0,1:T(8,128)(2,1)} %reshape.406, bf16[128,128]{0,1:T(8,128)(2,1)} %copy.152, f32[1024]{0:T(1024)} %get-tuple-element.3566), kind=kOutput, calls=%fused_computation.23.clone, metadata={op_type="MatMul" op_name="while/top_mlp_layer_0/MatMul"}
  %fusion.1276 = f32[128,1024]{1,0:T(8,128)} fusion(f32[128,1024]{1,0:T(8,128)} %fusion.1275, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3569, f32[1024]{0:T(1024)} %get-tuple-element.3568), kind=kOutput, calls=%fused_computation.21.clone, metadata={op_type="MatMul" op_name="while/top_mlp_layer_1/MatMul"}
  %fusion.1277 = f32[128,512]{1,0:T(8,128)} fusion(f32[128,1024]{1,0:T(8,128)} %fusion.1276, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3571, f32[512]{0:T(512)} %get-tuple-element.3570), kind=kOutput, calls=%fused_computation.32.clone, metadata={op_type="MatMul" op_name="while/top_mlp_layer_2/MatMul"}
  %fusion.1278 = (f32[128]{0:T(256)}, f32[128,256]{1,0:T(8,128)}) fusion(f32[256]{0:T(256)} %reduce.37, f32[256]{0:T(256)} %get-tuple-element.3572, f32[128,512]{1,0:T(8,128)} %fusion.1277, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3573), kind=kOutput, calls=%fused_computation.58.clone, metadata={op_type="MatMul" op_name="while/top_mlp_layer_3/MatMul"}
  %get-tuple-element.2741 = f32[128,256]{1,0:T(8,128)} get-tuple-element((f32[128]{0:T(256)}, f32[128,256]{1,0:T(8,128)}) %fusion.1278), index=1
  %get-tuple-element.2738 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}, f32[128,256]{1,0:T(8,128)}) %fusion.1278), index=0
  %bitcast.104 = f32[]{:T(256)} bitcast(f32[1]{0:T(256)} %get-tuple-element.3574)
  %fusion.1279 = (f32[]{:T(256)}, f32[128,1]{0,1:T(2,128)}) fusion(f32[128]{0:T(256)} %get-tuple-element.2681, f32[128]{0:T(256)} %get-tuple-element.2738, f32[]{:T(256)} %bitcast.104), kind=kLoop, calls=%fused_computation.765.clone
  %get-tuple-element.2772 = f32[]{:T(256)} get-tuple-element((f32[]{:T(256)}, f32[128,1]{0,1:T(2,128)}) %fusion.1279), index=0
  %get-tuple-element.2740 = f32[128,1]{0,1:T(2,128)} get-tuple-element((f32[]{:T(256)}, f32[128,1]{0,1:T(2,128)}) %fusion.1279), index=1
  %bitcast.107 = f32[128]{0:T(256)} bitcast(f32[128,1]{0,1:T(2,128)} %get-tuple-element.2740)
  %fusion.1381 = f32[256]{0:T(256)} fusion(f32[128,256]{1,0:T(8,128)} %get-tuple-element.2741, f32[256]{0:T(256)} %get-tuple-element.3572, f32[128]{0:T(256)} %bitcast.107), kind=kLoop, calls=%fused_computation.51.clone
  %fusion.1280 = (f32[256]{0:T(256)}, pred[128,256]{1,0:T(8,128)(4,1)}) fusion(f32[128]{0:T(256)} %bitcast.107, f32[256]{0:T(256)} %reduce.37, f32[128,256]{1,0:T(8,128)} %get-tuple-element.2741, f32[256]{0:T(256)} %get-tuple-element.3572), kind=kLoop, calls=%fused_computation.57.clone, metadata={op_name="while/training/gradients/while/top_mlp_layer_3/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.2742 = pred[128,256]{1,0:T(8,128)(4,1)} get-tuple-element((f32[256]{0:T(256)}, pred[128,256]{1,0:T(8,128)(4,1)}) %fusion.1280), index=1
  %get-tuple-element.2771 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}, pred[128,256]{1,0:T(8,128)(4,1)}) %fusion.1280), index=0
  %reshape.413 = f32[256,1]{0,1:T(2,128)} reshape(f32[256]{0:T(256)} %fusion.1381), metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_4/MatMul_grad/MatMul_1"}
  %fusion.1282 = (f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) fusion(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3573, pred[128,256]{1,0:T(8,128)(4,1)} %get-tuple-element.2742, f32[128]{0:T(256)} %bitcast.107, f32[256]{0:T(256)} %reduce.37, f32[128,512]{1,0:T(8,128)} %fusion.1277), kind=kOutput, calls=%fused_computation.772.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul"}
  %get-tuple-element.2743 = bf16[128,512]{1,0:T(8,128)(2,1)} get-tuple-element((f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) %fusion.1282), index=1
  %get-tuple-element.2770 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) %fusion.1282), index=0
  %fusion.1380 = f32[512,256]{1,0:T(8,128)} fusion(f32[128,512]{1,0:T(8,128)} %fusion.1277, pred[128,256]{1,0:T(8,128)(4,1)} %get-tuple-element.2742, f32[128]{0:T(256)} %bitcast.107, f32[256]{0:T(256)} %reduce.37), kind=kOutput, calls=%fused_computation.56.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_3/MatMul_grad/MatMul_1"}
  %fusion.1283 = (f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) fusion(bf16[128,512]{1,0:T(8,128)(2,1)} %get-tuple-element.2743, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3571, f32[128,1024]{1,0:T(8,128)} %fusion.1276), kind=kOutput, calls=%fused_computation.771.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul"}
  %get-tuple-element.2744 = bf16[128,1024]{1,0:T(8,128)(2,1)} get-tuple-element((f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) %fusion.1283), index=1
  %get-tuple-element.2769 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) %fusion.1283), index=0
  %fusion.1284 = (f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) fusion(bf16[128,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.2744, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3569, f32[128,1024]{1,0:T(8,128)} %fusion.1275), kind=kOutput, calls=%fused_computation.770.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul" profile_type={2}}
  %get-tuple-element.2745 = bf16[128,1024]{1,0:T(8,128)(2,1)} get-tuple-element((f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) %fusion.1284), index=1
  %get-tuple-element.2768 = f32[1024]{0:T(1024)} get-tuple-element((f32[1024]{0:T(1024)}, bf16[128,1024]{1,0:T(8,128)(2,1)}) %fusion.1284), index=0
  %convolution.372 = f32[128,857]{0,1:T(8,128)} convolution(bf16[128,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.2745, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3567), dim_labels=bf_oi->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul"}
  %fusion.1285 = bf16[128,729]{0,1:T(8,128)(2,1)} fusion(pred[128,729]{0,1:T(8,128)(4,1)} %get-tuple-element.3576, f32[128,857]{0,1:T(8,128)} %convolution.372), kind=kLoop, calls=%fused_computation.28.clone, metadata={op_name="while/training/gradients/while/Select_grad/Select_1"}
  %copy.160 = f32[128,857]{1,0:T(8,128)} copy(f32[128,857]{0,1:T(8,128)} %convolution.372), metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul"}
  %reshape.407 = bf16[128,27,27]{0,2,1:T(8,128)(2,1)} reshape(bf16[128,729]{0,1:T(8,128)(2,1)} %fusion.1285), metadata={op_name="while/training/gradients/while/Select_grad/Select_1"}
  %copy.153 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} copy(bf16[128,27,27]{0,2,1:T(8,128)(2,1)} %reshape.407), metadata={op_name="while/training/gradients/while/Select_grad/Select_1"}
  %convolution.406 = f32[1024,512]{1,0:T(8,128)} convolution(f32[128,1024]{1,0:T(8,128)} %fusion.1276, bf16[128,512]{1,0:T(8,128)(2,1)} %get-tuple-element.2743), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_2/MatMul_grad/MatMul_1"}
  %fusion.1288 = f32[128,27,128]{2,1,0:T(8,128)} fusion(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %copy.153, bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %fusion.1271), kind=kOutput, calls=%fused_computation.8.clone, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul_1"}
  %fusion.1291 = f32[128,27,128]{2,1,0:T(8,128)} fusion(f32[128,27,128]{2,1,0:T(8,128)} %fusion.1288, bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %copy.153, bf16[128,27,128]{2,0,1:T(8,128)(2,1)} %fusion.1271), kind=kOutput, calls=%fused_computation.15.clone, metadata={op_type="BatchMatMulV2" op_name="while/training/gradients/while/MatMul_grad/MatMul"}
  %slice.834 = f32[128,13,128]{2,1,0:T(8,128)} slice(f32[128,27,128]{2,1,0:T(8,128)} %fusion.1291), slice={[0:128], [14:27], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice_1"}
  %slice.807 = f32[128,14,128]{2,1,0:T(8,128)} slice(f32[128,27,128]{2,1,0:T(8,128)} %fusion.1291), slice={[0:128], [0:14], [0:128]}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %reshape.410 = f32[1664,128]{1,0:T(8,128)} reshape(f32[128,13,128]{2,1,0:T(8,128)} %slice.834), metadata={op_type="Reshape" op_name="while/training/gradients/while/Gather_grad/Reshape"}
  %copy.156 = f32[128,14,128]{0,2,1:T(8,128)} copy(f32[128,14,128]{2,1,0:T(8,128)} %slice.807), metadata={op_type="Slice" op_name="while/training/gradients/while/concat_1_grad/Slice"}
  %bitcast.110 = f32[128,1792]{0,1:T(8,128)} bitcast(f32[128,14,128]{0,2,1:T(8,128)} %copy.156), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_13_grad/Reshape"}
  %fusion.1369 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2730, u32[128]{0:T(256)} %get-tuple-element.2731, u32[128]{0:T(256)} %get-tuple-element.2732, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.97.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1363 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2727, u32[128]{0:T(256)} %get-tuple-element.2728, u32[128]{0:T(256)} %get-tuple-element.2729, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.99.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1357 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2721, u32[128]{0:T(256)} %get-tuple-element.2722, u32[128]{0:T(256)} %get-tuple-element.2723, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.101.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1351 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2715, u32[128]{0:T(256)} %get-tuple-element.2716, u32[128]{0:T(256)} %get-tuple-element.2717, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.103.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1345 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2706, u32[128]{0:T(256)} %get-tuple-element.2707, u32[128]{0:T(256)} %get-tuple-element.2708, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.105.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1339 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2700, u32[128]{0:T(256)} %get-tuple-element.2701, u32[128]{0:T(256)} %get-tuple-element.2702, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.107.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1333 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2697, u32[128]{0:T(256)} %get-tuple-element.2698, u32[128]{0:T(256)} %get-tuple-element.2699, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.109.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1327 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2724, u32[128]{0:T(256)} %get-tuple-element.2725, u32[128]{0:T(256)} %get-tuple-element.2726, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.111.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1321 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2718, u32[128]{0:T(256)} %get-tuple-element.2719, u32[128]{0:T(256)} %get-tuple-element.2720, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.113.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1315 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2712, u32[128]{0:T(256)} %get-tuple-element.2713, u32[128]{0:T(256)} %get-tuple-element.2714, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.115.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1309 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2709, u32[128]{0:T(256)} %get-tuple-element.2710, u32[128]{0:T(256)} %get-tuple-element.2711, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.117.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1303 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2703, u32[128]{0:T(256)} %get-tuple-element.2704, u32[128]{0:T(256)} %get-tuple-element.2705, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.119.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1296 = f32[8,128]{0,1:T(8,128)} fusion(f32[128]{0:T(256)} %get-tuple-element.2676, u32[128]{0:T(256)} %get-tuple-element.2677, u32[128]{0:T(256)} %get-tuple-element.2678, f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kOutput, calls=%fused_computation.121.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1297 = (f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) fusion(f32[128,1792]{0,1:T(8,128)} %bitcast.110), kind=kLoop, calls=%fused_computation.767.clone, sharding={maximal device=0}, metadata={op_type="Slice" op_name="while/training/gradients/while/concat_grad/Slice_13"}
  %copy.159 = f32[128,1792]{1,0:T(8,128)} copy(f32[128,1792]{0,1:T(8,128)} %bitcast.110), metadata={op_type="Reshape" op_name="while/training/gradients/while/Reshape_13_grad/Reshape"}
  %fusion.1374 = (f32[128]{0:T(256)}, bf16[128,128]{1,0:T(8,128)(2,1)}) fusion(f32[128,1792]{1,0:T(8,128)} %copy.159, f32[128,857]{1,0:T(8,128)} %copy.160, f32[128,128]{1,0:T(8,128)} %fusion.1205), kind=kLoop, calls=%fused_computation.766.clone, metadata={op_name="while/training/gradients/while/bottom_mlp_layer_2/BiasAdd_grad/BiasAddGrad"}
  %get-tuple-element.2762 = bf16[128,128]{1,0:T(8,128)(2,1)} get-tuple-element((f32[128]{0:T(256)}, bf16[128,128]{1,0:T(8,128)(2,1)}) %fusion.1374), index=1
  %get-tuple-element.2767 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}, bf16[128,128]{1,0:T(8,128)(2,1)}) %fusion.1374), index=0
  %get-tuple-element.2758 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=0
  %get-tuple-element.2757 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=1
  %get-tuple-element.2756 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=2
  %get-tuple-element.2755 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=3
  %get-tuple-element.2754 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=4
  %get-tuple-element.2753 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=5
  %get-tuple-element.2752 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=6
  %get-tuple-element.2751 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=7
  %get-tuple-element.2750 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=8
  %get-tuple-element.2749 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=9
  %get-tuple-element.2748 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=10
  %get-tuple-element.2747 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=11
  %get-tuple-element.2746 = f32[128,128]{0,1:T(8,128)} get-tuple-element((f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=5*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, /*index=10*/f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}, f32[128,128]{0,1:T(8,128)}) %fusion.1297), index=12
  %fusion.1298 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1296, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2746), kind=kLoop, calls=%fused_computation.35.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1304 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1303, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2747), kind=kLoop, calls=%fused_computation.36.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1310 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1309, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2748), kind=kLoop, calls=%fused_computation.37.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1316 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1315, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2749), kind=kLoop, calls=%fused_computation.38.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1322 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1321, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2750), kind=kLoop, calls=%fused_computation.39.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1328 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1327, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2751), kind=kLoop, calls=%fused_computation.40.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.219 = f32[136,768]{0,1:T(8,128)} concatenate(f32[136,128]{0,1:T(8,128)} %fusion.1298, f32[136,128]{0,1:T(8,128)} %fusion.1304, f32[136,128]{0,1:T(8,128)} %fusion.1310, f32[136,128]{0,1:T(8,128)} %fusion.1316, f32[136,128]{0,1:T(8,128)} %fusion.1322, /*index=5*/f32[136,128]{0,1:T(8,128)} %fusion.1328), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %copy.157 = f32[136,768]{1,0:T(8,128)} copy(f32[136,768]{0,1:T(8,128)} %concatenate.219), metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.408 = f32[816,128]{1,0:T(8,128)} reshape(f32[136,768]{1,0:T(8,128)} %copy.157), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1334 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1333, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2752), kind=kLoop, calls=%fused_computation.41.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1340 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1339, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2753), kind=kLoop, calls=%fused_computation.42.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1346 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1345, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2754), kind=kLoop, calls=%fused_computation.43.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1352 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1351, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2755), kind=kLoop, calls=%fused_computation.44.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1358 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1357, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2756), kind=kLoop, calls=%fused_computation.45.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1364 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1363, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2757), kind=kLoop, calls=%fused_computation.46.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1370 = f32[136,128]{0,1:T(8,128)} fusion(f32[8,128]{0,1:T(8,128)} %fusion.1369, f32[128,128]{0,1:T(8,128)} %get-tuple-element.2758), kind=kLoop, calls=%fused_computation.47.clone, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %concatenate.220 = f32[136,896]{0,1:T(8,128)} concatenate(f32[136,128]{0,1:T(8,128)} %fusion.1334, f32[136,128]{0,1:T(8,128)} %fusion.1340, f32[136,128]{0,1:T(8,128)} %fusion.1346, f32[136,128]{0,1:T(8,128)} %fusion.1352, f32[136,128]{0,1:T(8,128)} %fusion.1358, /*index=5*/f32[136,128]{0,1:T(8,128)} %fusion.1364, f32[136,128]{0,1:T(8,128)} %fusion.1370), dimensions={1}, sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %copy.158 = f32[136,896]{1,0:T(8,128)} copy(f32[136,896]{0,1:T(8,128)} %concatenate.220), metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %reshape.409 = f32[952,128]{1,0:T(8,128)} reshape(f32[136,896]{1,0:T(8,128)} %copy.158), sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.353 = (f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) tuple(f32[816,128]{1,0:T(8,128)} %reshape.408, f32[952,128]{1,0:T(8,128)} %reshape.409), sharding={{maximal device=0}, {maximal device=0}}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.354 = (f32[]{:T(256)}) tuple(f32[]{:T(256)} %select.664), sharding={{maximal device=0}}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %tuple.355 = ((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), (f32[]{:T(256)})) tuple((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) %tuple.353, (f32[]{:T(256)}) %tuple.354), sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %outfeed.4 = token[] outfeed(((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), (f32[]{:T(256)})) %tuple.355, token[] %after-all.31), outfeed_shape=((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), (f32[]{:T(256)})), outfeed_config="\022\270\001\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\230\001\010\200\370\273\005\020\005\030\200\370\262\006 \200\010(\t0\001:\200\001\n\002\020\005\n\004\010\001\020\004\n\004\010\001\020\001\n\004\010\001\020\002\n\002\010\001\n\004\010\001\020\013\n\002\020\006\n\004\010\001\020\010\n\004\010\001\020\006\n\002\020\010\n\002\020\004\n\004\010\001\020\007\n\002\020\001\n\002\020\t\n\004\010\001\020\003\n\002\020\002\n\004\010\001\020\014\n\002\020\014\n\004\010\001\020\005\n\004\010\001\020\r\n\002\020\007\n\002\020\r\n\002\020\003\n\004\010\001\020\n\n\000\n\004\010\001\020\t@\005\"\007\0100\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\010\034\020\300\361\333\007", sharding={maximal device=0}, metadata={op_type="_SendTPUEmbeddingGradients" op_name="while/SendTPUEmbeddingGradients"}
  %fusion.1375 = (f32[256]{0:T(256)}, bf16[128,256]{1,0:T(8,128)(2,1)}) fusion(bf16[128,128]{1,0:T(8,128)(2,1)} %get-tuple-element.2762, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3565, f32[128,256]{1,0:T(8,128)} %fusion.1204), kind=kOutput, calls=%fused_computation.769.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul"}
  %convolution.403 = f32[256,128]{1,0:T(8,128)} convolution(f32[128,256]{1,0:T(8,128)} %fusion.1204, bf16[128,128]{1,0:T(8,128)(2,1)} %get-tuple-element.2762), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_2/MatMul_grad/MatMul_1"}
  %get-tuple-element.2763 = bf16[128,256]{1,0:T(8,128)(2,1)} get-tuple-element((f32[256]{0:T(256)}, bf16[128,256]{1,0:T(8,128)(2,1)}) %fusion.1375), index=1
  %get-tuple-element.2766 = f32[256]{0:T(256)} get-tuple-element((f32[256]{0:T(256)}, bf16[128,256]{1,0:T(8,128)(2,1)}) %fusion.1375), index=0
  %fusion.1376 = (f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) fusion(bf16[128,256]{1,0:T(8,128)(2,1)} %get-tuple-element.2763, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3563, f32[128,512]{1,0:T(8,128)} %fusion.1203), kind=kOutput, calls=%fused_computation.768.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul"}
  %get-tuple-element.2765 = bf16[128,512]{1,0:T(8,128)(2,1)} get-tuple-element((f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) %fusion.1376), index=1
  %get-tuple-element.2764 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, bf16[128,512]{1,0:T(8,128)(2,1)}) %fusion.1376), index=0
  %convolution.401 = f32[13,512]{1,0:T(8,128)} convolution(f32[128,13]{0,1:T(8,128)} %get-tuple-element.2687, bf16[128,512]{1,0:T(8,128)(2,1)} %get-tuple-element.2765), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_0/MatMul_grad/MatMul_1"}
  %convolution.402 = f32[512,256]{1,0:T(8,128)} convolution(f32[128,512]{1,0:T(8,128)} %fusion.1203, bf16[128,256]{1,0:T(8,128)(2,1)} %get-tuple-element.2763), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/bottom_mlp_layer_1/MatMul_grad/MatMul_1"}
  %fusion.1378 = f32[857,1024]{1,0:T(8,128)} fusion(bf16[128,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.2745, bf16[128,729]{0,1:T(8,128)(2,1)} %reshape.406, bf16[128,128]{0,1:T(8,128)(2,1)} %copy.152), kind=kOutput, calls=%fused_computation.27.clone, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_0/MatMul_grad/MatMul_1"}
  %convolution.405 = f32[1024,1024]{1,0:T(8,128)} convolution(f32[128,1024]{1,0:T(8,128)} %fusion.1275, bf16[128,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.2744), dim_labels=fb_io->bf, metadata={op_type="MatMul" op_name="while/training/gradients/while/top_mlp_layer_1/MatMul_grad/MatMul_1"}
  %fusion.1373 = f32[19656,128]{1,0:T(8,128)} fusion(s32[1664]{0:T(1024)} %reshape.400, f32[1664,128]{1,0:T(8,128)} %reshape.410, f32[]{:T(256)} %get-tuple-element.3597), kind=kCustom, calls=%fused_computation.4.clone, metadata={op_type="UnsortedSegmentSum" op_name="while/training/UnsortedSegmentSum"}
  %bitcast.111 = f32[1]{0:T(256)} bitcast(f32[]{:T(256)} %get-tuple-element.2772)
  %all-reduce.92 = (f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) all-reduce(f32[19656,128]{1,0:T(8,128)} %fusion.1373, f32[512]{0:T(512)} %get-tuple-element.2764, f32[13,512]{1,0:T(8,128)} %convolution.401, f32[256]{0:T(256)} %get-tuple-element.2766, f32[512,256]{1,0:T(8,128)} %convolution.402, /*index=5*/f32[128]{0:T(256)} %get-tuple-element.2767, f32[256,128]{1,0:T(8,128)} %convolution.403, f32[1024]{0:T(1024)} %get-tuple-element.2768, f32[857,1024]{1,0:T(8,128)} %fusion.1378, f32[1024]{0:T(1024)} %get-tuple-element.2769, /*index=10*/f32[1024,1024]{1,0:T(8,128)} %convolution.405, f32[512]{0:T(512)} %get-tuple-element.2770, f32[1024,512]{1,0:T(8,128)} %convolution.406, f32[256]{0:T(256)} %get-tuple-element.2771, f32[512,256]{1,0:T(8,128)} %fusion.1380, /*index=15*/f32[1]{0:T(256)} %bitcast.111, f32[256,1]{0,1:T(2,128)} %reshape.413), replica_groups={{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}}, to_apply=%sum.200, backend_config="{\"flag_configs\":[],\"barrier_config\":{\"barrier_type\":\"CUSTOM\",\"id\":\"1\"},\"scoped_memory_configs\":[]}"
  %get-tuple-element.2801 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=15, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_29"}
  %multiply.461 = f32[1]{0:T(256)S(5)} multiply(f32[1]{0:T(256)S(5)} %bitcast.113, f32[1]{0:T(256)} %get-tuple-element.2801), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/bias/ResourceApplyGradientDescent"}
  %subtract.159 = f32[1]{0:T(256)} subtract(f32[1]{0:T(256)} %get-tuple-element.3574, f32[1]{0:T(256)S(5)} %multiply.461), metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/bias/ResourceApplyGradientDescent"}
  %get-tuple-element.2802 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=16, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_28"}
  %get-tuple-element.2800 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=14, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_26"}
  %get-tuple-element.2799 = f32[256]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=13, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_27"}
  %get-tuple-element.2798 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=12, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_24"}
  %get-tuple-element.2797 = f32[512]{0:T(512)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=11, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_25"}
  %get-tuple-element.2796 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=10, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_22"}
  %get-tuple-element.2795 = f32[1024]{0:T(1024)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=9, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_23"}
  %get-tuple-element.2794 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=8, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_20"}
  %get-tuple-element.2793 = f32[1024]{0:T(1024)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=7, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_21"}
  %get-tuple-element.2792 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=6, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_17"}
  %get-tuple-element.2791 = f32[128]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=5, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_18"}
  %get-tuple-element.2790 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=4, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_15"}
  %get-tuple-element.2789 = f32[256]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=3, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_16"}
  %get-tuple-element.2788 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=2, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_13"}
  %get-tuple-element.2787 = f32[512]{0:T(512)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=1, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_14"}
  %get-tuple-element.2773 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=5*/f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, /*index=10*/f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, /*index=15*/f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.92), index=0, metadata={op_type="CrossReplicaSum" op_name="while/training/CrossReplicaSum_19"}
  %fusion.1382 = f32[19656,128]{1,0:T(8,128)} fusion(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3546, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.2773, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.3.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_tc_embedding_table/ResourceApplyGradientDescent"}
  %fusion.1385 = f32[256]{0:T(256)} fusion(f32[256]{0:T(256)} %get-tuple-element.3562, f32[256]{0:T(256)} %get-tuple-element.2789, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.455.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %fusion.1387 = f32[128]{0:T(256)} fusion(f32[128]{0:T(256)} %get-tuple-element.3564, f32[128]{0:T(256)} %get-tuple-element.2791, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.454.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %fusion.1395 = f32[256]{0:T(256)} fusion(f32[256]{0:T(256)} %get-tuple-element.3572, f32[256]{0:T(256)} %get-tuple-element.2799, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.453.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/bias/ResourceApplyGradientDescent"}
  %fusion.1383 = f32[512]{0:T(512)} fusion(f32[512]{0:T(512)} %get-tuple-element.3560, f32[512]{0:T(512)} %get-tuple-element.2787, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.446.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %fusion.1393 = f32[512]{0:T(512)} fusion(f32[512]{0:T(512)} %get-tuple-element.3570, f32[512]{0:T(512)} %get-tuple-element.2797, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.445.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/bias/ResourceApplyGradientDescent"}
  %fusion.1397 = f32[256,1]{0,1:T(2,128)} fusion(f32[256,1]{0,1:T(2,128)} %get-tuple-element.3575, f32[256,1]{0,1:T(2,128)} %get-tuple-element.2802, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.444.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_4/kernel/ResourceApplyGradientDescent"}
  %fusion.1389 = f32[1024]{0:T(1024)} fusion(f32[1024]{0:T(1024)} %get-tuple-element.3566, f32[1024]{0:T(1024)} %get-tuple-element.2793, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.313.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/bias/ResourceApplyGradientDescent"}
  %fusion.1391 = f32[1024]{0:T(1024)} fusion(f32[1024]{0:T(1024)} %get-tuple-element.3568, f32[1024]{0:T(1024)} %get-tuple-element.2795, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.312.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/bias/ResourceApplyGradientDescent"}
  %fusion.1384 = f32[13,512]{1,0:T(8,128)} fusion(f32[13,512]{1,0:T(8,128)} %get-tuple-element.3561, f32[13,512]{1,0:T(8,128)} %get-tuple-element.2788, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.293.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %fusion.1388 = f32[256,128]{1,0:T(8,128)} fusion(f32[256,128]{1,0:T(8,128)} %get-tuple-element.3565, f32[256,128]{1,0:T(8,128)} %get-tuple-element.2792, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.59.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %fusion.1386 = f32[512,256]{1,0:T(8,128)} fusion(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3563, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2790, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.25.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_bottom_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  %fusion.1396 = f32[512,256]{1,0:T(8,128)} fusion(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3573, f32[512,256]{1,0:T(8,128)} %get-tuple-element.2800, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.24.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_3/kernel/ResourceApplyGradientDescent"}
  %fusion.1394 = f32[1024,512]{1,0:T(8,128)} fusion(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3571, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.2798, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.16.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_2/kernel/ResourceApplyGradientDescent"}
  %fusion.1390 = f32[857,1024]{1,0:T(8,128)} fusion(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3567, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.2794, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.7.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_0/kernel/ResourceApplyGradientDescent"}
  %fusion.1392 = f32[1024,1024]{1,0:T(8,128)} fusion(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3569, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.2796, f32[]{:T(256)S(5)} %add.473), kind=kLoop, calls=%fused_computation.6.clone, metadata={op_type="ResourceApplyGradientDescent" op_name="while/training/train/update_top_mlp_layer_1/kernel/ResourceApplyGradientDescent"}
  ROOT %tuple.383 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) tuple(s32[]{:T(256)} %add.467, u32[]{:T(256)} %add.468, u32[]{:T(256)} %select.665, f32[19656,128]{1,0:T(8,128)} %fusion.1382, f32[1]{0:T(256)} %subtract.132, /*index=5*/f32[1]{0:T(256)} %subtract.133, f32[1]{0:T(256)} %subtract.134, f32[1]{0:T(256)} %subtract.135, f32[1]{0:T(256)} %subtract.136, f32[1]{0:T(256)} %subtract.137, /*index=10*/f32[1]{0:T(256)} %subtract.138, f32[1]{0:T(256)} %subtract.139, f32[1]{0:T(256)} %subtract.140, f32[1]{0:T(256)} %subtract.141, f32[1]{0:T(256)} %subtract.142, /*index=15*/f32[1]{0:T(256)} %subtract.143, f32[1]{0:T(256)} %subtract.144, f32[512]{0:T(512)} %fusion.1383, f32[13,512]{1,0:T(8,128)} %fusion.1384, f32[256]{0:T(256)} %fusion.1385, /*index=20*/f32[512,256]{1,0:T(8,128)} %fusion.1386, f32[128]{0:T(256)} %fusion.1387, f32[256,128]{1,0:T(8,128)} %fusion.1388, f32[1024]{0:T(1024)} %fusion.1389, f32[857,1024]{1,0:T(8,128)} %fusion.1390, /*index=25*/f32[1024]{0:T(1024)} %fusion.1391, f32[1024,1024]{1,0:T(8,128)} %fusion.1392, f32[512]{0:T(512)} %fusion.1393, f32[1024,512]{1,0:T(8,128)} %fusion.1394, f32[256]{0:T(256)} %fusion.1395, /*index=30*/f32[512,256]{1,0:T(8,128)} %fusion.1396, f32[1]{0:T(256)} %subtract.159, f32[256,1]{0,1:T(2,128)} %fusion.1397, pred[128,729]{0,1:T(8,128)(4,1)} %get-tuple-element.3576, f32[] %get-tuple-element.3577, /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3578, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3579, u32[]{:T(256)} %get-tuple-element.3580, s32[]{:T(256)} %get-tuple-element.3581, u32[]{:T(256)} %get-tuple-element.3582, /*index=40*/u32[]{:T(256)} %get-tuple-element.3583, u32[]{:T(256)} %get-tuple-element.3584, u32[]{:T(256)} %get-tuple-element.3585, u32[]{:T(256)} %get-tuple-element.3586, u32[]{:T(256)} %get-tuple-element.3587, /*index=45*/f32[]{:T(256)} %get-tuple-element.3588, f32[]{:T(256)} %get-tuple-element.3589, f32[]{:T(256)} %get-tuple-element.3590, f32[]{:T(256)} %get-tuple-element.3591, f32[]{:T(256)} %get-tuple-element.3592, /*index=50*/f32[]{:T(256)} %get-tuple-element.3593, f32[]{:T(256)} %get-tuple-element.3594, f32[]{:T(256)} %get-tuple-element.3595, s32[]{:T(256)} %get-tuple-element.3596, f32[]{:T(256)} %get-tuple-element.3597, /*index=55*/f32[]{:T(256)} %get-tuple-element.3598, f32[1]{0:T(256)} %get-tuple-element.3599)
}

%wide.cond_wrapper.2233.clone (wide_param.4: (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], pred[128,729], f32[], /*index=35*/pred[128,27,27], s32[128,13], u32[], s32[], u32[], /*index=40*/u32[], u32[], u32[], u32[], u32[], /*index=45*/f32[], f32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], s32[], f32[], /*index=55*/f32[], f32[1])) -> pred[] {
  %constant.2243 = s32[]{:T(256)} constant(3200), metadata={op_type="Less" op_name="while/Less"}
  %wide_param.4 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) parameter(0)
  %get-tuple-element.2550 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %wide_param.4), index=0
  ROOT %compare.708 = pred[]{:T(1024)} compare(s32[]{:T(256)} %get-tuple-element.2550, s32[]{:T(256)} %constant.2243), direction=LT, metadata={op_type="Less" op_name="while/Less"}
}

%fused_computation.653.clone (param_0.2283: s32[1664]) -> s32[2048] {
  %constant.2423 = s32[] constant(0), metadata={op_type="ResourceGather" op_name="Gather"}
  %broadcast.2829 = s32[2048]{0} broadcast(s32[] %constant.2423), dimensions={}, metadata={op_type="ResourceGather" op_name="Gather"}
  %param_0.2283 = s32[1664]{0:T(1024)} parameter(0)
  %pad.175 = s32[2048]{0} pad(s32[1664]{0:T(1024)} %param_0.2283, s32[] %constant.2423), padding=0_384, metadata={op_type="ResourceGather" op_name="Gather"}
  %constant.2422 = s32[] constant(19655), metadata={op_type="ResourceGather" op_name="Gather"}
  %broadcast.2828 = s32[2048]{0} broadcast(s32[] %constant.2422), dimensions={}, metadata={op_type="ResourceGather" op_name="Gather"}
  ROOT %clamp.5 = s32[2048]{0} clamp(s32[2048]{0} %broadcast.2829, s32[2048]{0} %pad.175, s32[2048]{0} %broadcast.2828), metadata={op_type="ResourceGather" op_name="Gather"}
}

%fused_computation.1.clone (param_0.2284: bf16[19656,128], param_1.1615: s32[2048]) -> bf16[1664,128] {
  %param_0.2284 = bf16[19656,128]{1,0:T(8,128)(2,1)} parameter(0)
  %param_1.1615 = s32[2048]{0} parameter(1)
  %custom-call.8 = s32[2048]{0} custom-call(s32[2048]{0} %param_1.1615), custom_call_target="AssumeGatherIndicesInBound", operand_layout_constraints={s32[2048]{0}}, metadata={op_type="ResourceGather" op_name="Gather"}
  %slice.837 = s32[1664]{0:T(1024)} slice(s32[2048]{0} %custom-call.8), slice={[0:1664]}, metadata={op_type="ResourceGather" op_name="Gather"}
  %reshape.415 = s32[128,13]{1,0:T(8,128)} reshape(s32[1664]{0:T(1024)} %slice.837)
  %transpose.174 = s32[128,13]{1,0:T(8,128)} transpose(s32[128,13]{1,0:T(8,128)} %reshape.415), dimensions={0,1}
  %gather.11 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} gather(bf16[19656,128]{1,0:T(8,128)(2,1)} %param_0.2284, s32[128,13]{1,0:T(8,128)} %transpose.174), offset_dims={2}, collapsed_slice_dims={0}, start_index_map={0}, index_vector_dim=2, slice_sizes={1,128}, metadata={op_type="ResourceGather" op_name="Gather"}
  %transpose.175 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} transpose(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %gather.11), dimensions={0,1,2}
  ROOT %reshape.416 = bf16[1664,128]{1,0:T(8,128)(2,1)} reshape(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %transpose.175)
}

%bitcast_fusion.7.clone (bf16input.15: bf16[512,256]) -> bf16[512,256] {
  %bf16input.15 = bf16[512,256]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.115 = bf16[512,256]{1,0:T(8,128)(2,1)} bitcast(bf16[512,256]{1,0:T(8,128)(2,1)} %bf16input.15)
}

%bitcast_fusion.11.clone (bf16input.16: bf16[13,512]) -> bf16[13,512] {
  %bf16input.16 = bf16[13,512]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.116 = bf16[13,512]{1,0:T(8,128)(2,1)} bitcast(bf16[13,512]{1,0:T(8,128)(2,1)} %bf16input.16)
}

%fused_computation.537.clone.clone.clone.clone.clone.clone.clone (param_0.2285: f32[128,13], param_1.1616: bf16[13,512], param_2.1480: f32[512]) -> bf16[128,512] {
  %param_0.2285 = f32[128,13]{0,1:T(8,128)} parameter(0)
  %param_1.1616 = bf16[13,512]{1,0:T(8,128)(2,1)} parameter(1)
  %fusion.1400 = bf16[13,512]{1,0:T(8,128)(2,1)} fusion(bf16[13,512]{1,0:T(8,128)(2,1)} %param_1.1616), kind=kLoop, calls=%bitcast_fusion.11.clone
  %convolution.408 = f32[128,512]{1,0:T(8,128)} convolution(f32[128,13]{0,1:T(8,128)} %param_0.2285, bf16[13,512]{1,0:T(8,128)(2,1)} %fusion.1400), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="bottom_mlp_layer_0/MatMul"}
  %param_2.1480 = f32[512]{0:T(512)} parameter(2)
  %broadcast.2830 = f32[128,512]{1,0:T(8,128)} broadcast(f32[512]{0:T(512)} %param_2.1480), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_0/BiasAdd"}
  %add.476 = f32[128,512]{1,0:T(8,128)} add(f32[128,512]{1,0:T(8,128)} %convolution.408, f32[128,512]{1,0:T(8,128)} %broadcast.2830), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_0/BiasAdd"}
  %constant.2424 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2831 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2424), dimensions={}, metadata={op_name="bottom_mlp_layer_0/Relu"}
  ROOT %maximum.169 = bf16[128,512]{1,0:T(8,128)(2,1)} maximum(f32[128,512]{1,0:T(8,128)} %add.476, f32[128,512]{1,0:T(8,128)} %broadcast.2831), metadata={op_name="bottom_mlp_layer_0/Relu"}
}

%fused_computation.542.clone (param_0.2286: bf16[512,256], param_1.1617: f32[128,13], param_2.1481: bf16[13,512], param_3.881: f32[512], param_4.646: f32[256]) -> bf16[128,256] {
  %param_1.1617 = f32[128,13]{0,1:T(8,128)} parameter(1)
  %param_2.1481 = bf16[13,512]{1,0:T(8,128)(2,1)} parameter(2)
  %param_3.881 = f32[512]{0:T(512)} parameter(3)
  %fusion.1402 = bf16[128,512]{1,0:T(8,128)(2,1)} fusion(f32[128,13]{0,1:T(8,128)} %param_1.1617, bf16[13,512]{1,0:T(8,128)(2,1)} %param_2.1481, f32[512]{0:T(512)} %param_3.881), kind=kOutput, calls=%fused_computation.537.clone.clone.clone.clone.clone.clone.clone, metadata={op_type="MatMul" op_name="bottom_mlp_layer_0/MatMul"}
  %param_0.2286 = bf16[512,256]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1401 = bf16[512,256]{1,0:T(8,128)(2,1)} fusion(bf16[512,256]{1,0:T(8,128)(2,1)} %param_0.2286), kind=kLoop, calls=%bitcast_fusion.7.clone
  %convolution.409 = f32[128,256]{1,0:T(8,128)} convolution(bf16[128,512]{1,0:T(8,128)(2,1)} %fusion.1402, bf16[512,256]{1,0:T(8,128)(2,1)} %fusion.1401), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="bottom_mlp_layer_1/MatMul"}
  %param_4.646 = f32[256]{0:T(256)} parameter(4)
  %broadcast.2833 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_4.646), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_1/BiasAdd"}
  %add.477 = f32[128,256]{1,0:T(8,128)} add(f32[128,256]{1,0:T(8,128)} %convolution.409, f32[128,256]{1,0:T(8,128)} %broadcast.2833), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_1/BiasAdd"}
  %constant.2425 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2832 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2425), dimensions={}, metadata={op_name="bottom_mlp_layer_1/Relu"}
  ROOT %maximum.170 = bf16[128,256]{1,0:T(8,128)(2,1)} maximum(f32[128,256]{1,0:T(8,128)} %add.477, f32[128,256]{1,0:T(8,128)} %broadcast.2832), metadata={op_name="bottom_mlp_layer_1/Relu"}
}

%bitcast_fusion.9.clone (bf16input.17: bf16[256,128]) -> bf16[256,128] {
  %bf16input.17 = bf16[256,128]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.117 = bf16[256,128]{1,0:T(8,128)(2,1)} bitcast(bf16[256,128]{1,0:T(8,128)(2,1)} %bf16input.17)
}

%bitcast_fusion.3.clone (bf16input.18: bf16[128,256]) -> bf16[128,256] {
  %bf16input.18 = bf16[128,256]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.118 = bf16[128,256]{1,0:T(8,128)(2,1)} bitcast(bf16[128,256]{1,0:T(8,128)(2,1)} %bf16input.18)
}

%fused_computation.574.clone (param_0.2287: bf16[128,256], param_1.1618: bf16[256,128], param_2.1482: f32[128]) -> bf16[128,128] {
  %param_0.2287 = bf16[128,256]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1405 = bf16[128,256]{1,0:T(8,128)(2,1)} fusion(bf16[128,256]{1,0:T(8,128)(2,1)} %param_0.2287), kind=kLoop, calls=%bitcast_fusion.3.clone
  %param_1.1618 = bf16[256,128]{1,0:T(8,128)(2,1)} parameter(1)
  %fusion.1404 = bf16[256,128]{1,0:T(8,128)(2,1)} fusion(bf16[256,128]{1,0:T(8,128)(2,1)} %param_1.1618), kind=kLoop, calls=%bitcast_fusion.9.clone
  %convolution.410 = f32[128,128]{0,1:T(8,128)} convolution(bf16[128,256]{1,0:T(8,128)(2,1)} %fusion.1405, bf16[256,128]{1,0:T(8,128)(2,1)} %fusion.1404), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="bottom_mlp_layer_2/MatMul"}
  %param_2.1482 = f32[128]{0:T(256)} parameter(2)
  %broadcast.2835 = f32[128,128]{0,1:T(8,128)} broadcast(f32[128]{0:T(256)} %param_2.1482), dimensions={1}, metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_2/BiasAdd"}
  %add.478 = f32[128,128]{0,1:T(8,128)} add(f32[128,128]{0,1:T(8,128)} %convolution.410, f32[128,128]{0,1:T(8,128)} %broadcast.2835), metadata={op_type="BiasAdd" op_name="bottom_mlp_layer_2/BiasAdd"}
  %constant.2426 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2834 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2426), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %maximum.171 = bf16[128,128]{0,1:T(8,128)(2,1)} maximum(f32[128,128]{0,1:T(8,128)} %add.478, f32[128,128]{0,1:T(8,128)} %broadcast.2834), metadata={op_name="bottom_mlp_layer_2/Relu"}
}

%fused_computation.666.clone.clone (param_0.2288: f32[136,768]) -> f32[8,128] {
  %param_0.2288 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.838 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2288), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.667.clone.clone (param_0.2289: u32[128]) -> f32[128,8] {
  %param_0.2289 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2838 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2289), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.663 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.779 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2838, u32[128,8]{0,1:T(8,128)} %iota.663), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2428 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2837 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2428), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2427 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2836 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2427), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.673 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.779, f32[128,8]{0,1:T(8,128)} %broadcast.2837, f32[128,8]{0,1:T(8,128)} %broadcast.2836), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.572.clone.clone.clone (param_0.2290: f32[128], param_1.1619: f32[136,768], param_2.1483: u32[128]) -> f32[128,128] {
  %param_2.1483 = u32[128]{0:T(256)} parameter(2)
  %fusion.1408 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1483), kind=kLoop, calls=%fused_computation.667.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1619 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1407 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1619), kind=kLoop, calls=%fused_computation.666.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.411 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1408, f32[8,128]{1,0:T(8,128)} %fusion.1407), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2290 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2839 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2290), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.463 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.411, f32[128,128]{1,0:T(8,128)} %broadcast.2839), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.575.clone (param_0.2291: u32[128]) -> f32[128,128] {
  %param_0.2291 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2842 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2291), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.664 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.780 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2842, u32[128,128]{0,1:T(8,128)} %iota.664), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2430 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2841 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2430), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2429 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2840 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2429), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.674 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.780, f32[128,128]{0,1:T(8,128)} %broadcast.2841, f32[128,128]{0,1:T(8,128)} %broadcast.2840), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.559.clone (param_0.2292: f32[136,768], param_1.1620: u32[128], param_2.1484: f32[128], param_3.882: u32[128]) -> bf16[128,128] {
  %param_0.2292 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.839 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2292), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1620 = u32[128]{0:T(256)} parameter(1)
  %fusion.1410 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1620), kind=kLoop, calls=%fused_computation.575.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1484 = f32[128]{0:T(256)} parameter(2)
  %param_3.882 = u32[128]{0:T(256)} parameter(3)
  %fusion.1409 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1484, f32[136,768]{1,0:T(8,128)} %param_0.2292, u32[128]{0:T(256)} %param_3.882), kind=kOutput, calls=%fused_computation.572.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.412 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1410, f32[128,128]{1,0:T(8,128)} %fusion.1409), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.479 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.839, f32[128,128]{1,0:T(8,128)} %convolution.412), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.665.clone.clone (param_0.2293: f32[136,896]) -> f32[8,128] {
  %param_0.2293 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.840 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2293), slice={[128:136], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.669.clone.clone (param_0.2294: u32[128]) -> f32[128,8] {
  %param_0.2294 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2845 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2294), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.665 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.781 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2845, u32[128,8]{0,1:T(8,128)} %iota.665), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2432 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2844 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2432), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2431 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2843 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2431), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.675 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.781, f32[128,8]{0,1:T(8,128)} %broadcast.2844, f32[128,8]{0,1:T(8,128)} %broadcast.2843), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.571.clone.clone.clone (param_0.2295: f32[128], param_1.1621: f32[136,896], param_2.1485: u32[128]) -> f32[128,128] {
  %param_2.1485 = u32[128]{0:T(256)} parameter(2)
  %fusion.1413 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1485), kind=kLoop, calls=%fused_computation.669.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1621 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1412 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1621), kind=kLoop, calls=%fused_computation.665.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.413 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1413, f32[8,128]{1,0:T(8,128)} %fusion.1412), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2295 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2846 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2295), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.464 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.413, f32[128,128]{1,0:T(8,128)} %broadcast.2846), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.577.clone (param_0.2296: u32[128]) -> f32[128,128] {
  %param_0.2296 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2849 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2296), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.666 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.782 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2849, u32[128,128]{0,1:T(8,128)} %iota.666), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2434 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2848 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2434), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2433 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2847 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2433), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.676 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.782, f32[128,128]{0,1:T(8,128)} %broadcast.2848, f32[128,128]{0,1:T(8,128)} %broadcast.2847), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.558.clone (param_0.2297: f32[136,896], param_1.1622: u32[128], param_2.1486: f32[128], param_3.883: u32[128]) -> bf16[128,128] {
  %param_0.2297 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.841 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2297), slice={[0:128], [0:128]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1622 = u32[128]{0:T(256)} parameter(1)
  %fusion.1415 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1622), kind=kLoop, calls=%fused_computation.577.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1486 = f32[128]{0:T(256)} parameter(2)
  %param_3.883 = u32[128]{0:T(256)} parameter(3)
  %fusion.1414 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1486, f32[136,896]{1,0:T(8,128)} %param_0.2297, u32[128]{0:T(256)} %param_3.883), kind=kOutput, calls=%fused_computation.571.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.414 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1415, f32[128,128]{1,0:T(8,128)} %fusion.1414), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.480 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.841, f32[128,128]{1,0:T(8,128)} %convolution.414), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.664.clone.clone (param_0.2298: f32[136,896]) -> f32[8,128] {
  %param_0.2298 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.842 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2298), slice={[128:136], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.671.clone.clone (param_0.2299: u32[128]) -> f32[128,8] {
  %param_0.2299 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2852 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2299), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.667 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.783 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2852, u32[128,8]{0,1:T(8,128)} %iota.667), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2436 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2851 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2436), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2435 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2850 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2435), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.677 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.783, f32[128,8]{0,1:T(8,128)} %broadcast.2851, f32[128,8]{0,1:T(8,128)} %broadcast.2850), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.570.clone.clone.clone (param_0.2300: f32[128], param_1.1623: f32[136,896], param_2.1487: u32[128]) -> f32[128,128] {
  %param_2.1487 = u32[128]{0:T(256)} parameter(2)
  %fusion.1418 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1487), kind=kLoop, calls=%fused_computation.671.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1623 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1417 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1623), kind=kLoop, calls=%fused_computation.664.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.415 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1418, f32[8,128]{1,0:T(8,128)} %fusion.1417), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2300 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2853 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2300), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.465 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.415, f32[128,128]{1,0:T(8,128)} %broadcast.2853), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.579.clone (param_0.2301: u32[128]) -> f32[128,128] {
  %param_0.2301 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2856 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2301), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.668 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.784 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2856, u32[128,128]{0,1:T(8,128)} %iota.668), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2438 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2855 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2438), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2437 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2854 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2437), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.678 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.784, f32[128,128]{0,1:T(8,128)} %broadcast.2855, f32[128,128]{0,1:T(8,128)} %broadcast.2854), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.557.clone (param_0.2302: f32[136,896], param_1.1624: u32[128], param_2.1488: f32[128], param_3.884: u32[128]) -> bf16[128,128] {
  %param_0.2302 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.843 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2302), slice={[0:128], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1624 = u32[128]{0:T(256)} parameter(1)
  %fusion.1420 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1624), kind=kLoop, calls=%fused_computation.579.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1488 = f32[128]{0:T(256)} parameter(2)
  %param_3.884 = u32[128]{0:T(256)} parameter(3)
  %fusion.1419 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1488, f32[136,896]{1,0:T(8,128)} %param_0.2302, u32[128]{0:T(256)} %param_3.884), kind=kOutput, calls=%fused_computation.570.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.416 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1420, f32[128,128]{1,0:T(8,128)} %fusion.1419), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.481 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.843, f32[128,128]{1,0:T(8,128)} %convolution.416), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.663.clone.clone (param_0.2303: f32[136,768]) -> f32[8,128] {
  %param_0.2303 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.844 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2303), slice={[128:136], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.673.clone.clone (param_0.2304: u32[128]) -> f32[128,8] {
  %param_0.2304 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2859 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2304), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.669 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.785 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2859, u32[128,8]{0,1:T(8,128)} %iota.669), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2440 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2858 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2440), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2439 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2857 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2439), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.679 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.785, f32[128,8]{0,1:T(8,128)} %broadcast.2858, f32[128,8]{0,1:T(8,128)} %broadcast.2857), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.569.clone.clone.clone (param_0.2305: f32[128], param_1.1625: f32[136,768], param_2.1489: u32[128]) -> f32[128,128] {
  %param_2.1489 = u32[128]{0:T(256)} parameter(2)
  %fusion.1423 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1489), kind=kLoop, calls=%fused_computation.673.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1625 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1422 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1625), kind=kLoop, calls=%fused_computation.663.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.417 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1423, f32[8,128]{1,0:T(8,128)} %fusion.1422), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2305 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2860 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2305), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.466 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.417, f32[128,128]{1,0:T(8,128)} %broadcast.2860), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.581.clone (param_0.2306: u32[128]) -> f32[128,128] {
  %param_0.2306 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2863 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2306), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.670 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.786 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2863, u32[128,128]{0,1:T(8,128)} %iota.670), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2442 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2862 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2442), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2441 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2861 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2441), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.680 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.786, f32[128,128]{0,1:T(8,128)} %broadcast.2862, f32[128,128]{0,1:T(8,128)} %broadcast.2861), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.556.clone (param_0.2307: f32[136,768], param_1.1626: u32[128], param_2.1490: f32[128], param_3.885: u32[128]) -> bf16[128,128] {
  %param_0.2307 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.845 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2307), slice={[0:128], [128:256]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1626 = u32[128]{0:T(256)} parameter(1)
  %fusion.1425 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1626), kind=kLoop, calls=%fused_computation.581.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1490 = f32[128]{0:T(256)} parameter(2)
  %param_3.885 = u32[128]{0:T(256)} parameter(3)
  %fusion.1424 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1490, f32[136,768]{1,0:T(8,128)} %param_0.2307, u32[128]{0:T(256)} %param_3.885), kind=kOutput, calls=%fused_computation.569.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.418 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1425, f32[128,128]{1,0:T(8,128)} %fusion.1424), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.482 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.845, f32[128,128]{1,0:T(8,128)} %convolution.418), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.662.clone.clone (param_0.2308: f32[136,896]) -> f32[8,128] {
  %param_0.2308 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.846 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2308), slice={[128:136], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.675.clone.clone (param_0.2309: u32[128]) -> f32[128,8] {
  %param_0.2309 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2866 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2309), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.671 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.787 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2866, u32[128,8]{0,1:T(8,128)} %iota.671), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2444 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2865 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2444), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2443 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2864 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2443), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.681 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.787, f32[128,8]{0,1:T(8,128)} %broadcast.2865, f32[128,8]{0,1:T(8,128)} %broadcast.2864), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.568.clone.clone.clone (param_0.2310: f32[128], param_1.1627: f32[136,896], param_2.1491: u32[128]) -> f32[128,128] {
  %param_2.1491 = u32[128]{0:T(256)} parameter(2)
  %fusion.1428 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1491), kind=kLoop, calls=%fused_computation.675.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1627 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1427 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1627), kind=kLoop, calls=%fused_computation.662.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.419 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1428, f32[8,128]{1,0:T(8,128)} %fusion.1427), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2310 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2867 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2310), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.467 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.419, f32[128,128]{1,0:T(8,128)} %broadcast.2867), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.583.clone (param_0.2311: u32[128]) -> f32[128,128] {
  %param_0.2311 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2870 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2311), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.672 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.788 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2870, u32[128,128]{0,1:T(8,128)} %iota.672), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2446 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2869 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2446), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2445 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2868 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2445), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.682 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.788, f32[128,128]{0,1:T(8,128)} %broadcast.2869, f32[128,128]{0,1:T(8,128)} %broadcast.2868), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.555.clone (param_0.2312: f32[136,896], param_1.1628: u32[128], param_2.1492: f32[128], param_3.886: u32[128]) -> bf16[128,128] {
  %param_0.2312 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.847 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2312), slice={[0:128], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1628 = u32[128]{0:T(256)} parameter(1)
  %fusion.1430 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1628), kind=kLoop, calls=%fused_computation.583.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1492 = f32[128]{0:T(256)} parameter(2)
  %param_3.886 = u32[128]{0:T(256)} parameter(3)
  %fusion.1429 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1492, f32[136,896]{1,0:T(8,128)} %param_0.2312, u32[128]{0:T(256)} %param_3.886), kind=kOutput, calls=%fused_computation.568.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.420 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1430, f32[128,128]{1,0:T(8,128)} %fusion.1429), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.483 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.847, f32[128,128]{1,0:T(8,128)} %convolution.420), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.661.clone.clone (param_0.2313: f32[136,768]) -> f32[8,128] {
  %param_0.2313 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.848 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2313), slice={[128:136], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.677.clone.clone (param_0.2314: u32[128]) -> f32[128,8] {
  %param_0.2314 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2873 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2314), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.673 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.789 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2873, u32[128,8]{0,1:T(8,128)} %iota.673), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2448 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2872 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2448), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2447 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2871 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2447), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.683 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.789, f32[128,8]{0,1:T(8,128)} %broadcast.2872, f32[128,8]{0,1:T(8,128)} %broadcast.2871), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.567.clone.clone.clone (param_0.2315: f32[128], param_1.1629: f32[136,768], param_2.1493: u32[128]) -> f32[128,128] {
  %param_2.1493 = u32[128]{0:T(256)} parameter(2)
  %fusion.1433 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1493), kind=kLoop, calls=%fused_computation.677.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1629 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1432 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1629), kind=kLoop, calls=%fused_computation.661.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.421 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1433, f32[8,128]{1,0:T(8,128)} %fusion.1432), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2315 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2874 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2315), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.468 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.421, f32[128,128]{1,0:T(8,128)} %broadcast.2874), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.585.clone (param_0.2316: u32[128]) -> f32[128,128] {
  %param_0.2316 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2877 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2316), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.674 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.790 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2877, u32[128,128]{0,1:T(8,128)} %iota.674), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2450 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2876 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2450), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2449 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2875 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2449), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.684 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.790, f32[128,128]{0,1:T(8,128)} %broadcast.2876, f32[128,128]{0,1:T(8,128)} %broadcast.2875), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.554.clone (param_0.2317: f32[136,768], param_1.1630: u32[128], param_2.1494: f32[128], param_3.887: u32[128]) -> bf16[128,128] {
  %param_0.2317 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.849 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2317), slice={[0:128], [256:384]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1630 = u32[128]{0:T(256)} parameter(1)
  %fusion.1435 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1630), kind=kLoop, calls=%fused_computation.585.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1494 = f32[128]{0:T(256)} parameter(2)
  %param_3.887 = u32[128]{0:T(256)} parameter(3)
  %fusion.1434 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1494, f32[136,768]{1,0:T(8,128)} %param_0.2317, u32[128]{0:T(256)} %param_3.887), kind=kOutput, calls=%fused_computation.567.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.422 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1435, f32[128,128]{1,0:T(8,128)} %fusion.1434), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.484 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.849, f32[128,128]{1,0:T(8,128)} %convolution.422), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.660.clone.clone (param_0.2318: f32[136,768]) -> f32[8,128] {
  %param_0.2318 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.850 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2318), slice={[128:136], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.679.clone.clone (param_0.2319: u32[128]) -> f32[128,8] {
  %param_0.2319 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2880 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2319), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.675 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.791 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2880, u32[128,8]{0,1:T(8,128)} %iota.675), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2452 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2879 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2452), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2451 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2878 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2451), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.685 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.791, f32[128,8]{0,1:T(8,128)} %broadcast.2879, f32[128,8]{0,1:T(8,128)} %broadcast.2878), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.566.clone.clone.clone (param_0.2320: f32[128], param_1.1631: f32[136,768], param_2.1495: u32[128]) -> f32[128,128] {
  %param_2.1495 = u32[128]{0:T(256)} parameter(2)
  %fusion.1438 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1495), kind=kLoop, calls=%fused_computation.679.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1631 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1437 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1631), kind=kLoop, calls=%fused_computation.660.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.423 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1438, f32[8,128]{1,0:T(8,128)} %fusion.1437), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2320 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2881 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2320), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.469 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.423, f32[128,128]{1,0:T(8,128)} %broadcast.2881), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.587.clone (param_0.2321: u32[128]) -> f32[128,128] {
  %param_0.2321 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2884 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2321), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.676 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.792 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2884, u32[128,128]{0,1:T(8,128)} %iota.676), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2454 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2883 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2454), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2453 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2882 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2453), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.686 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.792, f32[128,128]{0,1:T(8,128)} %broadcast.2883, f32[128,128]{0,1:T(8,128)} %broadcast.2882), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.553.clone (param_0.2322: f32[136,768], param_1.1632: u32[128], param_2.1496: f32[128], param_3.888: u32[128]) -> bf16[128,128] {
  %param_0.2322 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.851 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2322), slice={[0:128], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1632 = u32[128]{0:T(256)} parameter(1)
  %fusion.1440 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1632), kind=kLoop, calls=%fused_computation.587.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1496 = f32[128]{0:T(256)} parameter(2)
  %param_3.888 = u32[128]{0:T(256)} parameter(3)
  %fusion.1439 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1496, f32[136,768]{1,0:T(8,128)} %param_0.2322, u32[128]{0:T(256)} %param_3.888), kind=kOutput, calls=%fused_computation.566.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.424 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1440, f32[128,128]{1,0:T(8,128)} %fusion.1439), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.485 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.851, f32[128,128]{1,0:T(8,128)} %convolution.424), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.659.clone.clone (param_0.2323: f32[136,896]) -> f32[8,128] {
  %param_0.2323 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.852 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2323), slice={[128:136], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.681.clone.clone (param_0.2324: u32[128]) -> f32[128,8] {
  %param_0.2324 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2887 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2324), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.677 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.793 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2887, u32[128,8]{0,1:T(8,128)} %iota.677), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2456 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2886 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2456), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2455 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2885 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2455), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.687 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.793, f32[128,8]{0,1:T(8,128)} %broadcast.2886, f32[128,8]{0,1:T(8,128)} %broadcast.2885), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.565.clone.clone.clone (param_0.2325: f32[128], param_1.1633: f32[136,896], param_2.1497: u32[128]) -> f32[128,128] {
  %param_2.1497 = u32[128]{0:T(256)} parameter(2)
  %fusion.1443 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1497), kind=kLoop, calls=%fused_computation.681.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1633 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1442 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1633), kind=kLoop, calls=%fused_computation.659.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.425 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1443, f32[8,128]{1,0:T(8,128)} %fusion.1442), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2325 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2888 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2325), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.470 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.425, f32[128,128]{1,0:T(8,128)} %broadcast.2888), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.589.clone (param_0.2326: u32[128]) -> f32[128,128] {
  %param_0.2326 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2891 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2326), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.678 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.794 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2891, u32[128,128]{0,1:T(8,128)} %iota.678), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2458 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2890 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2458), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2457 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2889 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2457), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.688 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.794, f32[128,128]{0,1:T(8,128)} %broadcast.2890, f32[128,128]{0,1:T(8,128)} %broadcast.2889), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.552.clone (param_0.2327: f32[136,896], param_1.1634: u32[128], param_2.1498: f32[128], param_3.889: u32[128]) -> bf16[128,128] {
  %param_0.2327 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.853 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2327), slice={[0:128], [384:512]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1634 = u32[128]{0:T(256)} parameter(1)
  %fusion.1445 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1634), kind=kLoop, calls=%fused_computation.589.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1498 = f32[128]{0:T(256)} parameter(2)
  %param_3.889 = u32[128]{0:T(256)} parameter(3)
  %fusion.1444 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1498, f32[136,896]{1,0:T(8,128)} %param_0.2327, u32[128]{0:T(256)} %param_3.889), kind=kOutput, calls=%fused_computation.565.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.426 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1445, f32[128,128]{1,0:T(8,128)} %fusion.1444), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.486 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.853, f32[128,128]{1,0:T(8,128)} %convolution.426), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.658.clone.clone (param_0.2328: f32[136,768]) -> f32[8,128] {
  %param_0.2328 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.854 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2328), slice={[128:136], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.683.clone.clone (param_0.2329: u32[128]) -> f32[128,8] {
  %param_0.2329 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2894 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2329), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.679 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.795 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2894, u32[128,8]{0,1:T(8,128)} %iota.679), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2460 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2893 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2460), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2459 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2892 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2459), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.689 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.795, f32[128,8]{0,1:T(8,128)} %broadcast.2893, f32[128,8]{0,1:T(8,128)} %broadcast.2892), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.564.clone.clone.clone (param_0.2330: f32[128], param_1.1635: f32[136,768], param_2.1499: u32[128]) -> f32[128,128] {
  %param_2.1499 = u32[128]{0:T(256)} parameter(2)
  %fusion.1448 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1499), kind=kLoop, calls=%fused_computation.683.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1635 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1447 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1635), kind=kLoop, calls=%fused_computation.658.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.427 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1448, f32[8,128]{1,0:T(8,128)} %fusion.1447), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2330 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2895 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2330), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.471 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.427, f32[128,128]{1,0:T(8,128)} %broadcast.2895), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.591.clone (param_0.2331: u32[128]) -> f32[128,128] {
  %param_0.2331 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2898 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2331), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.680 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.796 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2898, u32[128,128]{0,1:T(8,128)} %iota.680), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2462 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2897 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2462), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2461 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2896 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2461), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.690 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.796, f32[128,128]{0,1:T(8,128)} %broadcast.2897, f32[128,128]{0,1:T(8,128)} %broadcast.2896), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.551.clone (param_0.2332: f32[136,768], param_1.1636: u32[128], param_2.1500: f32[128], param_3.890: u32[128]) -> bf16[128,128] {
  %param_0.2332 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.855 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2332), slice={[0:128], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1636 = u32[128]{0:T(256)} parameter(1)
  %fusion.1450 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1636), kind=kLoop, calls=%fused_computation.591.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1500 = f32[128]{0:T(256)} parameter(2)
  %param_3.890 = u32[128]{0:T(256)} parameter(3)
  %fusion.1449 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1500, f32[136,768]{1,0:T(8,128)} %param_0.2332, u32[128]{0:T(256)} %param_3.890), kind=kOutput, calls=%fused_computation.564.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.428 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1450, f32[128,128]{1,0:T(8,128)} %fusion.1449), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.487 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.855, f32[128,128]{1,0:T(8,128)} %convolution.428), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.657.clone.clone (param_0.2333: f32[136,896]) -> f32[8,128] {
  %param_0.2333 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.856 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2333), slice={[128:136], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.685.clone.clone (param_0.2334: u32[128]) -> f32[128,8] {
  %param_0.2334 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2901 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2334), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.681 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.797 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2901, u32[128,8]{0,1:T(8,128)} %iota.681), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2464 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2900 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2464), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2463 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2899 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2463), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.691 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.797, f32[128,8]{0,1:T(8,128)} %broadcast.2900, f32[128,8]{0,1:T(8,128)} %broadcast.2899), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.563.clone.clone.clone (param_0.2335: f32[128], param_1.1637: f32[136,896], param_2.1501: u32[128]) -> f32[128,128] {
  %param_2.1501 = u32[128]{0:T(256)} parameter(2)
  %fusion.1453 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1501), kind=kLoop, calls=%fused_computation.685.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1637 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1452 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1637), kind=kLoop, calls=%fused_computation.657.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.429 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1453, f32[8,128]{1,0:T(8,128)} %fusion.1452), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2335 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2902 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2335), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.472 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.429, f32[128,128]{1,0:T(8,128)} %broadcast.2902), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.593.clone (param_0.2336: u32[128]) -> f32[128,128] {
  %param_0.2336 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2905 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2336), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.682 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.798 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2905, u32[128,128]{0,1:T(8,128)} %iota.682), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2466 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2904 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2466), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2465 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2903 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2465), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.692 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.798, f32[128,128]{0,1:T(8,128)} %broadcast.2904, f32[128,128]{0,1:T(8,128)} %broadcast.2903), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.550.clone (param_0.2337: f32[136,896], param_1.1638: u32[128], param_2.1502: f32[128], param_3.891: u32[128]) -> bf16[128,128] {
  %param_0.2337 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.857 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2337), slice={[0:128], [512:640]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1638 = u32[128]{0:T(256)} parameter(1)
  %fusion.1455 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1638), kind=kLoop, calls=%fused_computation.593.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1502 = f32[128]{0:T(256)} parameter(2)
  %param_3.891 = u32[128]{0:T(256)} parameter(3)
  %fusion.1454 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1502, f32[136,896]{1,0:T(8,128)} %param_0.2337, u32[128]{0:T(256)} %param_3.891), kind=kOutput, calls=%fused_computation.563.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.430 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1455, f32[128,128]{1,0:T(8,128)} %fusion.1454), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.488 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.857, f32[128,128]{1,0:T(8,128)} %convolution.430), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.656.clone.clone (param_0.2338: f32[136,768]) -> f32[8,128] {
  %param_0.2338 = f32[136,768]{1,0:T(8,128)} parameter(0)
  ROOT %slice.858 = f32[8,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2338), slice={[128:136], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.687.clone.clone (param_0.2339: u32[128]) -> f32[128,8] {
  %param_0.2339 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2908 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2339), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.683 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.799 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2908, u32[128,8]{0,1:T(8,128)} %iota.683), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2468 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2907 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2468), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2467 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2906 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2467), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.693 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.799, f32[128,8]{0,1:T(8,128)} %broadcast.2907, f32[128,8]{0,1:T(8,128)} %broadcast.2906), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.562.clone.clone.clone (param_0.2340: f32[128], param_1.1639: f32[136,768], param_2.1503: u32[128]) -> f32[128,128] {
  %param_2.1503 = u32[128]{0:T(256)} parameter(2)
  %fusion.1458 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1503), kind=kLoop, calls=%fused_computation.687.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1639 = f32[136,768]{1,0:T(8,128)} parameter(1)
  %fusion.1457 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,768]{1,0:T(8,128)} %param_1.1639), kind=kLoop, calls=%fused_computation.656.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.431 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1458, f32[8,128]{1,0:T(8,128)} %fusion.1457), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2340 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2909 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2340), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.473 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.431, f32[128,128]{1,0:T(8,128)} %broadcast.2909), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.595.clone (param_0.2341: u32[128]) -> f32[128,128] {
  %param_0.2341 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2912 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2341), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.684 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.800 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2912, u32[128,128]{0,1:T(8,128)} %iota.684), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2470 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2911 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2470), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2469 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2910 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2469), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.694 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.800, f32[128,128]{0,1:T(8,128)} %broadcast.2911, f32[128,128]{0,1:T(8,128)} %broadcast.2910), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.549.clone (param_0.2342: f32[136,768], param_1.1640: u32[128], param_2.1504: f32[128], param_3.892: u32[128]) -> bf16[128,128] {
  %param_0.2342 = f32[136,768]{1,0:T(8,128)} parameter(0)
  %slice.859 = f32[128,128]{1,0:T(8,128)} slice(f32[136,768]{1,0:T(8,128)} %param_0.2342), slice={[0:128], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1640 = u32[128]{0:T(256)} parameter(1)
  %fusion.1460 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1640), kind=kLoop, calls=%fused_computation.595.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1504 = f32[128]{0:T(256)} parameter(2)
  %param_3.892 = u32[128]{0:T(256)} parameter(3)
  %fusion.1459 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1504, f32[136,768]{1,0:T(8,128)} %param_0.2342, u32[128]{0:T(256)} %param_3.892), kind=kOutput, calls=%fused_computation.562.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.432 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1460, f32[128,128]{1,0:T(8,128)} %fusion.1459), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.489 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.859, f32[128,128]{1,0:T(8,128)} %convolution.432), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.655.clone.clone (param_0.2343: f32[136,896]) -> f32[8,128] {
  %param_0.2343 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.860 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2343), slice={[128:136], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.689.clone.clone (param_0.2344: u32[128]) -> f32[128,8] {
  %param_0.2344 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2915 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2344), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.685 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.801 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2915, u32[128,8]{0,1:T(8,128)} %iota.685), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2472 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2914 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2472), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2471 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2913 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2471), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.695 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.801, f32[128,8]{0,1:T(8,128)} %broadcast.2914, f32[128,8]{0,1:T(8,128)} %broadcast.2913), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.561.clone.clone.clone (param_0.2345: f32[128], param_1.1641: f32[136,896], param_2.1505: u32[128]) -> f32[128,128] {
  %param_2.1505 = u32[128]{0:T(256)} parameter(2)
  %fusion.1463 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1505), kind=kLoop, calls=%fused_computation.689.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1641 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1462 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1641), kind=kLoop, calls=%fused_computation.655.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.433 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1463, f32[8,128]{1,0:T(8,128)} %fusion.1462), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2345 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2916 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2345), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.474 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.433, f32[128,128]{1,0:T(8,128)} %broadcast.2916), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.597.clone (param_0.2346: u32[128]) -> f32[128,128] {
  %param_0.2346 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2919 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2346), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.686 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.802 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2919, u32[128,128]{0,1:T(8,128)} %iota.686), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2474 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2918 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2474), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2473 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2917 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2473), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.696 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.802, f32[128,128]{0,1:T(8,128)} %broadcast.2918, f32[128,128]{0,1:T(8,128)} %broadcast.2917), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.548.clone (param_0.2347: f32[136,896], param_1.1642: u32[128], param_2.1506: f32[128], param_3.893: u32[128]) -> bf16[128,128] {
  %param_0.2347 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.861 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2347), slice={[0:128], [640:768]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1642 = u32[128]{0:T(256)} parameter(1)
  %fusion.1465 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1642), kind=kLoop, calls=%fused_computation.597.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1506 = f32[128]{0:T(256)} parameter(2)
  %param_3.893 = u32[128]{0:T(256)} parameter(3)
  %fusion.1464 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1506, f32[136,896]{1,0:T(8,128)} %param_0.2347, u32[128]{0:T(256)} %param_3.893), kind=kOutput, calls=%fused_computation.561.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.434 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1465, f32[128,128]{1,0:T(8,128)} %fusion.1464), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.490 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.861, f32[128,128]{1,0:T(8,128)} %convolution.434), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.654.clone.clone (param_0.2348: f32[136,896]) -> f32[8,128] {
  %param_0.2348 = f32[136,896]{1,0:T(8,128)} parameter(0)
  ROOT %slice.862 = f32[8,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2348), slice={[128:136], [768:896]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.691.clone.clone (param_0.2349: u32[128]) -> f32[128,8] {
  %param_0.2349 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2922 = u32[128,8]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2349), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.687 = u32[128,8]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.803 = pred[128,8]{0,1:T(8,128)(4,1)} compare(u32[128,8]{0,1:T(8,128)} %broadcast.2922, u32[128,8]{0,1:T(8,128)} %iota.687), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2476 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2921 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2476), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2475 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2920 = f32[128,8]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2475), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %select.697 = f32[128,8]{0,1:T(8,128)} select(pred[128,8]{0,1:T(8,128)(4,1)} %compare.803, f32[128,8]{0,1:T(8,128)} %broadcast.2921, f32[128,8]{0,1:T(8,128)} %broadcast.2920), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.560.clone.clone.clone (param_0.2350: f32[128], param_1.1643: f32[136,896], param_2.1507: u32[128]) -> f32[128,128] {
  %param_2.1507 = u32[128]{0:T(256)} parameter(2)
  %fusion.1468 = f32[128,8]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_2.1507), kind=kLoop, calls=%fused_computation.691.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1643 = f32[136,896]{1,0:T(8,128)} parameter(1)
  %fusion.1467 = f32[8,128]{1,0:T(8,128)} fusion(f32[136,896]{1,0:T(8,128)} %param_1.1643), kind=kLoop, calls=%fused_computation.654.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.435 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,8]{0,1:T(8,128)} %fusion.1468, f32[8,128]{1,0:T(8,128)} %fusion.1467), dim_labels=bf_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_0.2350 = f32[128]{0:T(256)} parameter(0)
  %broadcast.2923 = f32[128,128]{1,0:T(8,128)} broadcast(f32[128]{0:T(256)} %param_0.2350), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %multiply.475 = f32[128,128]{1,0:T(8,128)} multiply(f32[128,128]{1,0:T(8,128)} %convolution.435, f32[128,128]{1,0:T(8,128)} %broadcast.2923), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.599.clone (param_0.2351: u32[128]) -> f32[128,128] {
  %param_0.2351 = u32[128]{0:T(256)} parameter(0)
  %broadcast.2926 = u32[128,128]{0,1:T(8,128)} broadcast(u32[128]{0:T(256)} %param_0.2351), dimensions={0}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %iota.688 = u32[128,128]{0,1:T(8,128)} iota(), iota_dimension=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %compare.804 = pred[128,128]{0,1:T(8,128)(4,1)} compare(u32[128,128]{0,1:T(8,128)} %broadcast.2926, u32[128,128]{0,1:T(8,128)} %iota.688), direction=EQ, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2478 = f32[]{:T(256)} constant(1), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %broadcast.2925 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2478), dimensions={}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %constant.2477 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2924 = f32[128,128]{0,1:T(8,128)} broadcast(f32[]{:T(256)} %constant.2477), dimensions={}, metadata={op_name="bottom_mlp_layer_2/Relu"}
  ROOT %select.698 = f32[128,128]{0,1:T(8,128)} select(pred[128,128]{0,1:T(8,128)(4,1)} %compare.804, f32[128,128]{0,1:T(8,128)} %broadcast.2925, f32[128,128]{0,1:T(8,128)} %broadcast.2924), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.547.clone (param_0.2352: f32[136,896], param_1.1644: u32[128], param_2.1508: f32[128], param_3.894: u32[128]) -> bf16[128,128] {
  %param_0.2352 = f32[136,896]{1,0:T(8,128)} parameter(0)
  %slice.863 = f32[128,128]{1,0:T(8,128)} slice(f32[136,896]{1,0:T(8,128)} %param_0.2352), slice={[0:128], [768:896]}, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_1.1644 = u32[128]{0:T(256)} parameter(1)
  %fusion.1470 = f32[128,128]{0,1:T(8,128)} fusion(u32[128]{0:T(256)} %param_1.1644), kind=kLoop, calls=%fused_computation.599.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %param_2.1508 = f32[128]{0:T(256)} parameter(2)
  %param_3.894 = u32[128]{0:T(256)} parameter(3)
  %fusion.1469 = f32[128,128]{1,0:T(8,128)} fusion(f32[128]{0:T(256)} %param_2.1508, f32[136,896]{1,0:T(8,128)} %param_0.2352, u32[128]{0:T(256)} %param_3.894), kind=kOutput, calls=%fused_computation.560.clone.clone.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %convolution.436 = f32[128,128]{1,0:T(8,128)} convolution(f32[128,128]{0,1:T(8,128)} %fusion.1470, f32[128,128]{1,0:T(8,128)} %fusion.1469), dim_labels=fb_io->bf, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  ROOT %add.491 = bf16[128,128]{1,0:T(8,128)(2,1)} add(f32[128,128]{1,0:T(8,128)} %slice.863, f32[128,128]{1,0:T(8,128)} %convolution.436), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
}

%fused_computation.526.clone (param_0.2353: bf16[128,13,128], param_1.1645: bf16[128,14,128]) -> bf16[128,27,128] {
  %param_1.1645 = bf16[128,14,128]{0,2,1:T(8,128)(2,1)} parameter(1)
  %constant.2479 = f32[]{:T(256)} constant(-inf)
  %pad.177 = bf16[128,27,128]{0,2,1:T(8,128)(2,1)} pad(bf16[128,14,128]{0,2,1:T(8,128)(2,1)} %param_1.1645, f32[]{:T(256)} %constant.2479), padding=0_0x0_13x0_0, metadata={op_type="ConcatV2" op_name="concat_1"}
  %param_0.2353 = bf16[128,13,128]{0,2,1:T(8,128)(2,1)} parameter(0)
  %pad.176 = bf16[128,27,128]{0,2,1:T(8,128)(2,1)} pad(bf16[128,13,128]{0,2,1:T(8,128)(2,1)} %param_0.2353, f32[]{:T(256)} %constant.2479), padding=0_0x14_0x0_0, metadata={op_type="ConcatV2" op_name="concat_1"}
  ROOT %maximum.172 = bf16[128,27,128]{0,2,1:T(8,128)(2,1)} maximum(bf16[128,27,128]{0,2,1:T(8,128)(2,1)} %pad.177, bf16[128,27,128]{0,2,1:T(8,128)(2,1)} %pad.176), metadata={op_type="ConcatV2" op_name="concat_1"}
}

%bitcast_fusion.2.clone (bf16input.19: bf16[128,27,128]) -> bf16[128,27,128] {
  %bf16input.19 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.133 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} bitcast(bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %bf16input.19)
}

%fused_computation.525.clone (param_0.2354: pred[128,27,27], param_1.1646: bf16[128,27,128]) -> bf16[128,27,27] {
  %param_0.2354 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} parameter(0)
  %constant.2480 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2927 = f32[128,27,27]{2,1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2480), dimensions={}, metadata={op_type="Select" op_name="Select"}
  %param_1.1646 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} parameter(1)
  %fusion.1473 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} fusion(bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %param_1.1646), kind=kLoop, calls=%bitcast_fusion.2.clone
  %convolution-base-dilated.15 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} convolution(bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1473, bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %fusion.1473), window={size=128 stride=127 lhs_dilate=128}, dim_labels=0bf_0oi->0bf, metadata={op_type="BatchMatMulV2" op_name="MatMul"}
  ROOT %select.699 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} select(pred[128,27,27]{2,1,0:T(8,128)(4,1)} %param_0.2354, f32[128,27,27]{2,1,0:T(8,128)} %broadcast.2927, bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %convolution-base-dilated.15), metadata={op_name="Select"}
}

%bitcast_fusion.6.clone (bf16input.20: bf16[1024,1024]) -> bf16[1024,1024] {
  %bf16input.20 = bf16[1024,1024]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.134 = bf16[1024,1024]{1,0:T(8,128)(2,1)} bitcast(bf16[1024,1024]{1,0:T(8,128)(2,1)} %bf16input.20)
}

%fused_computation.531.clone.clone.clone (param_0.2355: bf16[128,729], param_1.1647: bf16[128,128]) -> bf16[128,857] {
  %param_1.1647 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(1)
  %constant.2481 = f32[]{:T(256)} constant(-inf)
  %pad.179 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,128]{0,1:T(8,128)(2,1)} %param_1.1647, f32[]{:T(256)} %constant.2481), padding=0_0x0_729, metadata={op_type="ConcatV2" op_name="concat_2"}
  %param_0.2355 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(0)
  %pad.178 = bf16[128,857]{0,1:T(8,128)(2,1)} pad(bf16[128,729]{0,1:T(8,128)(2,1)} %param_0.2355, f32[]{:T(256)} %constant.2481), padding=0_0x128_0, metadata={op_type="ConcatV2" op_name="concat_2"}
  ROOT %maximum.173 = bf16[128,857]{0,1:T(8,128)(2,1)} maximum(bf16[128,857]{0,1:T(8,128)(2,1)} %pad.179, bf16[128,857]{0,1:T(8,128)(2,1)} %pad.178), metadata={op_type="ConcatV2" op_name="concat_2"}
}

%bitcast_fusion.10.clone (bf16input.21: bf16[857,1024]) -> bf16[857,1024] {
  %bf16input.21 = bf16[857,1024]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.135 = bf16[857,1024]{1,0:T(8,128)(2,1)} bitcast(bf16[857,1024]{1,0:T(8,128)(2,1)} %bf16input.21)
}

%fused_computation.530.clone.clone.clone (param_0.2356: bf16[857,1024], param_1.1648: bf16[128,729], param_2.1509: bf16[128,128], param_3.895: f32[1024]) -> bf16[128,1024] {
  %param_1.1648 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(1)
  %param_2.1509 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(2)
  %fusion.1475 = bf16[128,857]{0,1:T(8,128)(2,1)} fusion(bf16[128,729]{0,1:T(8,128)(2,1)} %param_1.1648, bf16[128,128]{0,1:T(8,128)(2,1)} %param_2.1509), kind=kLoop, calls=%fused_computation.531.clone.clone.clone, metadata={op_type="ConcatV2" op_name="concat_2"}
  %param_0.2356 = bf16[857,1024]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1476 = bf16[857,1024]{1,0:T(8,128)(2,1)} fusion(bf16[857,1024]{1,0:T(8,128)(2,1)} %param_0.2356), kind=kLoop, calls=%bitcast_fusion.10.clone
  %convolution.437 = f32[128,1024]{1,0:T(8,128)} convolution(bf16[128,857]{0,1:T(8,128)(2,1)} %fusion.1475, bf16[857,1024]{1,0:T(8,128)(2,1)} %fusion.1476), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="top_mlp_layer_0/MatMul"}
  %param_3.895 = f32[1024]{0:T(1024)} parameter(3)
  %broadcast.2929 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[1024]{0:T(1024)} %param_3.895), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_0/BiasAdd"}
  %add.492 = f32[128,1024]{1,0:T(8,128)} add(f32[128,1024]{1,0:T(8,128)} %convolution.437, f32[128,1024]{1,0:T(8,128)} %broadcast.2929), metadata={op_type="BiasAdd" op_name="top_mlp_layer_0/BiasAdd"}
  %constant.2482 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2928 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2482), dimensions={}, metadata={op_name="top_mlp_layer_0/Relu"}
  ROOT %maximum.174 = bf16[128,1024]{1,0:T(8,128)(2,1)} maximum(f32[128,1024]{1,0:T(8,128)} %add.492, f32[128,1024]{1,0:T(8,128)} %broadcast.2928), metadata={op_name="top_mlp_layer_0/Relu"}
}

%fused_computation.528.clone (param_0.2357: bf16[1024,1024], param_1.1649: f32[1024], param_2.1510: bf16[857,1024], param_3.896: bf16[128,729], param_4.647: bf16[128,128], param_5.437: f32[1024]) -> bf16[128,1024] {
  %param_2.1510 = bf16[857,1024]{1,0:T(8,128)(2,1)} parameter(2)
  %param_3.896 = bf16[128,729]{0,1:T(8,128)(2,1)} parameter(3)
  %param_4.647 = bf16[128,128]{0,1:T(8,128)(2,1)} parameter(4)
  %param_5.437 = f32[1024]{0:T(1024)} parameter(5)
  %fusion.1478 = bf16[128,1024]{1,0:T(8,128)(2,1)} fusion(bf16[857,1024]{1,0:T(8,128)(2,1)} %param_2.1510, bf16[128,729]{0,1:T(8,128)(2,1)} %param_3.896, bf16[128,128]{0,1:T(8,128)(2,1)} %param_4.647, f32[1024]{0:T(1024)} %param_5.437), kind=kOutput, calls=%fused_computation.530.clone.clone.clone, metadata={op_type="MatMul" op_name="top_mlp_layer_0/MatMul"}
  %param_0.2357 = bf16[1024,1024]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1477 = bf16[1024,1024]{1,0:T(8,128)(2,1)} fusion(bf16[1024,1024]{1,0:T(8,128)(2,1)} %param_0.2357), kind=kLoop, calls=%bitcast_fusion.6.clone
  %convolution.438 = f32[128,1024]{1,0:T(8,128)} convolution(bf16[128,1024]{1,0:T(8,128)(2,1)} %fusion.1478, bf16[1024,1024]{1,0:T(8,128)(2,1)} %fusion.1477), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="top_mlp_layer_1/MatMul"}
  %param_1.1649 = f32[1024]{0:T(1024)} parameter(1)
  %broadcast.2931 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[1024]{0:T(1024)} %param_1.1649), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_1/BiasAdd"}
  %add.493 = f32[128,1024]{1,0:T(8,128)} add(f32[128,1024]{1,0:T(8,128)} %convolution.438, f32[128,1024]{1,0:T(8,128)} %broadcast.2931), metadata={op_type="BiasAdd" op_name="top_mlp_layer_1/BiasAdd"}
  %constant.2483 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2930 = f32[128,1024]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2483), dimensions={}, metadata={op_name="top_mlp_layer_0/Relu"}
  ROOT %maximum.175 = bf16[128,1024]{1,0:T(8,128)(2,1)} maximum(f32[128,1024]{1,0:T(8,128)} %add.493, f32[128,1024]{1,0:T(8,128)} %broadcast.2930), metadata={op_name="top_mlp_layer_1/Relu"}
}

%get-tuple-element.2026.reduce_sub_computation (lhs.1: f32[], rhs.1: f32[]) -> f32[] {
  %rhs.1 = f32[] parameter(1)
  %lhs.1 = f32[] parameter(0)
  ROOT %add.293 = f32[] add(f32[] %lhs.1, f32[] %rhs.1)
}

%bitcast_fusion.8.clone (bf16input.22: bf16[512,256]) -> bf16[512,256] {
  %bf16input.22 = bf16[512,256]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.136 = bf16[512,256]{1,0:T(8,128)(2,1)} bitcast(bf16[512,256]{1,0:T(8,128)(2,1)} %bf16input.22)
}

%bitcast_fusion.12.clone (bf16input.23: bf16[1024,512]) -> bf16[1024,512] {
  %bf16input.23 = bf16[1024,512]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.137 = bf16[1024,512]{1,0:T(8,128)(2,1)} bitcast(bf16[1024,512]{1,0:T(8,128)(2,1)} %bf16input.23)
}

%bitcast_fusion.4.clone (bf16input.24: bf16[128,1024]) -> bf16[128,1024] {
  %bf16input.24 = bf16[128,1024]{1,0:T(8,128)(2,1)} parameter(0)
  ROOT %bitcast.138 = bf16[128,1024]{1,0:T(8,128)(2,1)} bitcast(bf16[128,1024]{1,0:T(8,128)(2,1)} %bf16input.24)
}

%fused_computation.535.clone.clone.clone (param_0.2358: bf16[128,1024], param_1.1650: bf16[1024,512], param_2.1511: f32[512]) -> bf16[128,512] {
  %param_0.2358 = bf16[128,1024]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1481 = bf16[128,1024]{1,0:T(8,128)(2,1)} fusion(bf16[128,1024]{1,0:T(8,128)(2,1)} %param_0.2358), kind=kLoop, calls=%bitcast_fusion.4.clone
  %param_1.1650 = bf16[1024,512]{1,0:T(8,128)(2,1)} parameter(1)
  %fusion.1480 = bf16[1024,512]{1,0:T(8,128)(2,1)} fusion(bf16[1024,512]{1,0:T(8,128)(2,1)} %param_1.1650), kind=kLoop, calls=%bitcast_fusion.12.clone
  %convolution.439 = f32[128,512]{1,0:T(8,128)} convolution(bf16[128,1024]{1,0:T(8,128)(2,1)} %fusion.1481, bf16[1024,512]{1,0:T(8,128)(2,1)} %fusion.1480), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="top_mlp_layer_2/MatMul"}
  %param_2.1511 = f32[512]{0:T(512)} parameter(2)
  %broadcast.2933 = f32[128,512]{1,0:T(8,128)} broadcast(f32[512]{0:T(512)} %param_2.1511), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_2/BiasAdd"}
  %add.494 = f32[128,512]{1,0:T(8,128)} add(f32[128,512]{1,0:T(8,128)} %convolution.439, f32[128,512]{1,0:T(8,128)} %broadcast.2933), metadata={op_type="BiasAdd" op_name="top_mlp_layer_2/BiasAdd"}
  %constant.2485 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2932 = f32[128,512]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2485), dimensions={}, metadata={op_name="bottom_mlp_layer_0/Relu"}
  ROOT %maximum.176 = bf16[128,512]{1,0:T(8,128)(2,1)} maximum(f32[128,512]{1,0:T(8,128)} %add.494, f32[128,512]{1,0:T(8,128)} %broadcast.2932), metadata={op_name="top_mlp_layer_2/Relu"}
}

%fused_computation.546.clone (param_0.2359: bf16[512,256], param_1.1651: bf16[128,1024], param_2.1512: bf16[1024,512], param_3.897: f32[512], param_4.648: f32[256], param_5.438: f32[256]) -> f32[128] {
  %param_1.1651 = bf16[128,1024]{1,0:T(8,128)(2,1)} parameter(1)
  %param_2.1512 = bf16[1024,512]{1,0:T(8,128)(2,1)} parameter(2)
  %param_3.897 = f32[512]{0:T(512)} parameter(3)
  %fusion.1483 = bf16[128,512]{1,0:T(8,128)(2,1)} fusion(bf16[128,1024]{1,0:T(8,128)(2,1)} %param_1.1651, bf16[1024,512]{1,0:T(8,128)(2,1)} %param_2.1512, f32[512]{0:T(512)} %param_3.897), kind=kOutput, calls=%fused_computation.535.clone.clone.clone, metadata={op_type="MatMul" op_name="top_mlp_layer_2/MatMul"}
  %param_0.2359 = bf16[512,256]{1,0:T(8,128)(2,1)} parameter(0)
  %fusion.1482 = bf16[512,256]{1,0:T(8,128)(2,1)} fusion(bf16[512,256]{1,0:T(8,128)(2,1)} %param_0.2359), kind=kLoop, calls=%bitcast_fusion.8.clone
  %convolution.440 = f32[128,256]{1,0:T(8,128)} convolution(bf16[128,512]{1,0:T(8,128)(2,1)} %fusion.1483, bf16[512,256]{1,0:T(8,128)(2,1)} %fusion.1482), dim_labels=bf_io->bf, metadata={op_type="MatMul" op_name="top_mlp_layer_3/MatMul"}
  %param_4.648 = f32[256]{0:T(256)} parameter(4)
  %broadcast.2936 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_4.648), dimensions={1}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_3/BiasAdd"}
  %add.495 = f32[128,256]{1,0:T(8,128)} add(f32[128,256]{1,0:T(8,128)} %convolution.440, f32[128,256]{1,0:T(8,128)} %broadcast.2936), metadata={op_type="BiasAdd" op_name="top_mlp_layer_3/BiasAdd"}
  %constant.2486 = f32[]{:T(256)} constant(0), metadata={op_type="Relu" op_name="bottom_mlp_layer_0/Relu"}
  %broadcast.2935 = f32[128,256]{1,0:T(8,128)} broadcast(f32[]{:T(256)} %constant.2486), dimensions={}, metadata={op_name="bottom_mlp_layer_1/Relu"}
  %maximum.177 = f32[128,256]{1,0:T(8,128)} maximum(f32[128,256]{1,0:T(8,128)} %add.495, f32[128,256]{1,0:T(8,128)} %broadcast.2935), metadata={op_name="top_mlp_layer_3/Relu"}
  %param_5.438 = f32[256]{0:T(256)} parameter(5)
  %broadcast.2934 = f32[128,256]{1,0:T(8,128)} broadcast(f32[256]{0:T(256)} %param_5.438), dimensions={1}
  %multiply.476 = f32[128,256]{1,0:T(8,128)} multiply(f32[128,256]{1,0:T(8,128)} %maximum.177, f32[128,256]{1,0:T(8,128)} %broadcast.2934)
  ROOT %reduce.49 = f32[128]{0:T(256)} reduce(f32[128,256]{1,0:T(8,128)} %multiply.476, f32[]{:T(256)} %constant.2486), dimensions={1}, to_apply=%scalar_add_computation
}

%fused_computation.734.clone (param_0.2360: f32[128], param_1.1652: f32[]) -> f32[128,1] {
  %param_0.2360 = f32[128]{0:T(256)} parameter(0)
  %param_1.1652 = f32[]{:T(256)} parameter(1)
  %broadcast.2937 = f32[128]{0:T(256)} broadcast(f32[]{:T(256)} %param_1.1652), dimensions={}, metadata={op_type="BiasAdd" op_name="top_mlp_layer_4/BiasAdd"}
  %add.496 = f32[128]{0:T(256)} add(f32[128]{0:T(256)} %param_0.2360, f32[128]{0:T(256)} %broadcast.2937), metadata={op_type="BiasAdd" op_name="top_mlp_layer_4/BiasAdd"}
  %logistic.8 = f32[128]{0:T(256)} logistic(f32[128]{0:T(256)} %add.496), metadata={op_name="top_mlp_layer_4/Sigmoid"}
  ROOT %bitcast.140 = f32[128,1]{0,1:T(2,128)} bitcast(f32[128]{0:T(256)} %logistic.8), metadata={op_name="top_mlp_layer_4/Sigmoid"}
}

%fused_computation.733.clone (param_0.2361: f32[1363,128,2], param_1.1653: s32[], param_2.1513: f32[128,1], param_3.898: f32[128,1]) -> f32[1363,128,2] {
  %param_0.2361 = f32[1363,128,2]{1,2,0:T(2,128)} parameter(0)
  %param_3.898 = f32[128,1]{0,1:T(2,128)} parameter(3)
  %constant.2488 = f32[]{:T(256)} constant(-inf)
  %pad.181 = f32[128,2]{0,1:T(2,128)} pad(f32[128,1]{0,1:T(2,128)} %param_3.898, f32[]{:T(256)} %constant.2488), padding=0_0x0_1, metadata={op_type="ConcatV2" op_name="concat_3"}
  %param_2.1513 = f32[128,1]{0,1:T(2,128)} parameter(2)
  %pad.180 = f32[128,2]{0,1:T(2,128)} pad(f32[128,1]{0,1:T(2,128)} %param_2.1513, f32[]{:T(256)} %constant.2488), padding=0_0x1_0, metadata={op_type="ConcatV2" op_name="concat_3"}
  %maximum.178 = f32[128,2]{0,1:T(2,128)} maximum(f32[128,2]{0,1:T(2,128)} %pad.181, f32[128,2]{0,1:T(2,128)} %pad.180), metadata={op_type="ConcatV2" op_name="concat_3"}
  %bitcast.141 = f32[1,128,2]{1,2,0:T(2,128)} bitcast(f32[128,2]{0,1:T(2,128)} %maximum.178), metadata={op_type="ExpandDims" op_name="ExpandDims"}
  %param_1.1653 = s32[]{:T(256)S(5)} parameter(1)
  %constant.2487 = s32[]{:T(256)} constant(0), metadata={op_type="Pack" op_name="stack"}
  ROOT %dynamic-update-slice.7 = f32[1363,128,2]{1,2,0:T(2,128)} dynamic-update-slice(f32[1363,128,2]{1,2,0:T(2,128)} %param_0.2361, f32[1,128,2]{1,2,0:T(2,128)} %bitcast.141, s32[]{:T(256)S(5)} %param_1.1653, s32[]{:T(256)} %constant.2487, s32[]{:T(256)} %constant.2487), metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
}

%wide.wide._functionalize_body_9__.2237.clone.clone.clone.clone (wide_param.7: (s32[], f32[1363,128,2], bf16[19656,128], f32[512], bf16[13,512], /*index=5*/f32[256], bf16[512,256], f32[128], bf16[256,128], f32[1024], /*index=10*/bf16[857,1024], f32[1024], bf16[1024,1024], f32[512], bf16[1024,512], /*index=15*/f32[256], bf16[512,256], f32[1], f32[256,1], token[], /*index=20*/token[], token[], s32[], pred[128,27,27], s32[128,13], /*index=25*/f32[])) -> (s32[], f32[1363,128,2], bf16[19656,128], f32[512], bf16[13,512], /*index=5*/f32[256], bf16[512,256], f32[128], bf16[256,128], f32[1024], /*index=10*/bf16[857,1024], f32[1024], bf16[1024,1024], f32[512], bf16[1024,512], /*index=15*/f32[256], bf16[512,256], f32[1], f32[256,1], token[], /*index=20*/token[], token[], s32[], pred[128,27,27], s32[128,13], /*index=25*/f32[]) {
  %wide_param.7 = (s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) parameter(0)
  %get-tuple-element.3683 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=0
  %copy.281 = s32[]{:T(256)S(5)} copy(s32[]{:T(256)} %get-tuple-element.3683)
  %get-tuple-element.3700 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=17
  %get-tuple-element.3705 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=22, sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %add.474 = s32[]{:T(256)} add(s32[]{:T(256)S(5)} %copy.281, s32[]{:T(256)} %get-tuple-element.3705), metadata={op_type="AddV2" op_name="add_1"}
  %get-tuple-element.3708 = f32[] get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=25
  %get-tuple-element.3685 = bf16[19656,128]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=2
  %get-tuple-element.3686 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=3
  %get-tuple-element.3687 = bf16[13,512]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=4
  %get-tuple-element.3688 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=5
  %get-tuple-element.3689 = bf16[512,256]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=6
  %get-tuple-element.3690 = f32[128]{0:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=7
  %get-tuple-element.3691 = bf16[256,128]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=8
  %get-tuple-element.3692 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=9
  %get-tuple-element.3693 = bf16[857,1024]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=10
  %get-tuple-element.3694 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=11
  %get-tuple-element.3695 = bf16[1024,1024]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=12
  %get-tuple-element.3696 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=13
  %get-tuple-element.3697 = bf16[1024,512]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=14
  %get-tuple-element.3698 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=15
  %get-tuple-element.3699 = bf16[512,256]{1,0:T(8,128)(2,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=16
  %get-tuple-element.3701 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=18
  %get-tuple-element.3702 = token[] get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=19, sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %get-tuple-element.3703 = token[] get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=20, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3704 = token[] get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=21, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %get-tuple-element.3706 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=23, metadata={op_type="Select" op_name="Select"}
  %get-tuple-element.3707 = s32[128,13]{0,1:T(8,128)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=24, metadata={op_type="AddV2" op_name="add_2"}
  %get-tuple-element.3684 = f32[1363,128,2]{1,2,0:T(2,128)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.7), index=1
  %reduce.48 = f32[256]{0:T(256)} reduce(f32[256,1]{0,1:T(2,128)} %get-tuple-element.3701, f32[] %get-tuple-element.3708), dimensions={1}, to_apply=%get-tuple-element.2026.reduce_sub_computation
  %infeed.29 = ((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}), token[]) infeed(token[] %get-tuple-element.3702), sharding={{maximal device=0}, {maximal device=0}, {maximal device=0}, {maximal device=0}}
  %get-tuple-element.2967 = (f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) get-tuple-element(((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}), token[]) %infeed.29), index=0
  %get-tuple-element.2976 = f32[128,13]{0,1:T(8,128)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2967), index=1, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %get-tuple-element.2974 = s32[128,13]{0,1:T(8,128)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2967), index=2, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %get-tuple-element.2968 = f32[128]{0:T(256)} get-tuple-element((f32[128]{0:T(256)}, f32[128,13]{0,1:T(8,128)}, s32[128,13]{0,1:T(8,128)}) %get-tuple-element.2967), index=0
  %add.475 = s32[128,13]{0,1:T(8,128)} add(s32[128,13]{0,1:T(8,128)} %get-tuple-element.2974, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3707), metadata={op_type="AddV2" op_name="add_2"}
  %copy.161 = s32[128,13]{1,0:T(8,128)} copy(s32[128,13]{0,1:T(8,128)} %add.475), metadata={op_type="AddV2" op_name="add_2"}
  %reshape.414 = s32[1664]{0:T(1024)} reshape(s32[128,13]{1,0:T(8,128)} %copy.161)
  %fusion.1398 = s32[2048]{0} fusion(s32[1664]{0:T(1024)} %reshape.414), kind=kLoop, calls=%fused_computation.653.clone, metadata={op_type="ResourceGather" op_name="Gather"}
  %fusion.1403 = bf16[128,256]{1,0:T(8,128)(2,1)} fusion(bf16[512,256]{1,0:T(8,128)(2,1)} %get-tuple-element.3689, f32[128,13]{0,1:T(8,128)} %get-tuple-element.2976, bf16[13,512]{1,0:T(8,128)(2,1)} %get-tuple-element.3687, f32[512]{0:T(512)} %get-tuple-element.3686, f32[256]{0:T(256)} %get-tuple-element.3688), kind=kOutput, calls=%fused_computation.542.clone, metadata={op_type="MatMul" op_name="bottom_mlp_layer_1/MatMul"}
  %fusion.1406 = bf16[128,128]{0,1:T(8,128)(2,1)} fusion(bf16[128,256]{1,0:T(8,128)(2,1)} %fusion.1403, bf16[256,128]{1,0:T(8,128)(2,1)} %get-tuple-element.3691, f32[128]{0:T(256)} %get-tuple-element.3690), kind=kOutput, calls=%fused_computation.574.clone, metadata={op_type="MatMul" op_name="bottom_mlp_layer_2/MatMul"}
  %fusion.1399 = bf16[1664,128]{1,0:T(8,128)(2,1)} fusion(bf16[19656,128]{1,0:T(8,128)(2,1)} %get-tuple-element.3685, s32[2048]{0} %fusion.1398), kind=kCustom, calls=%fused_computation.1.clone, metadata={op_type="ResourceGather" op_name="Gather"}
  %reshape.417 = bf16[128,13,128]{2,1,0:T(8,128)(2,1)} reshape(bf16[1664,128]{1,0:T(8,128)(2,1)} %fusion.1399)
  %copy.162 = bf16[128,13,128]{0,2,1:T(8,128)(2,1)} copy(bf16[128,13,128]{2,1,0:T(8,128)(2,1)} %reshape.417)
  %infeed.31 = (((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})), token[]) infeed(token[] %get-tuple-element.3704), infeed_config="\032_\n\007\010\200\010\030\003 \003\020\001\030\200\270\002\"N\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\200\010\"\007\010\030\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010\"\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010\026\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\0104\020\300\361\333\007", metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %get-tuple-element.2986 = ((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})) get-tuple-element((((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})), token[]) %infeed.31), index=0, metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %get-tuple-element.2987 = (u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) get-tuple-element(((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)})) %get-tuple-element.2986), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3027 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=36, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3026 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=37, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3025 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=38, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3024 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=33, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3023 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=34, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3022 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=35, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3021 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=30, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3020 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=31, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3019 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=32, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3018 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=27, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3017 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=28, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3016 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=29, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3015 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=24, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3014 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=25, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3013 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=26, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3012 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=21, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3011 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=22, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3010 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=23, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3009 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=18, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3008 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=19, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3007 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=20, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3006 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=15, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3005 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=16, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3004 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=17, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3003 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=12, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3002 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=13, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3001 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=14, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.3000 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=9, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2999 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=10, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2998 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=11, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2997 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=6, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2996 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=7, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2995 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=8, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2994 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=3, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2993 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=4, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2992 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=5, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2990 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2989 = f32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2988 = u32[128]{0:T(256)} get-tuple-element((u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=5*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=10*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=15*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=20*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=25*/f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, /*index=30*/u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, /*index=35*/u32[128]{0:T(256)}, u32[128]{0:T(256)}, f32[128]{0:T(256)}, u32[128]{0:T(256)}) %get-tuple-element.2987), index=2, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %infeed.30 = ((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), token[]) infeed(token[] %get-tuple-element.3703), infeed_config="\n(\n\033\010\210\001\022\002\006\007\030\200\340\035\"\016\n\006\010\001\020\001\030\002\022\000\022\002\030\001\022\t\010\200\370\304\004\030\001 \001\"\007\010\"\020\300\361\333\007\"\007\010\035\020\300\361\333\007\"\007\010)\020\300\361\333\007\"\007\0105\020\300\361\333\007\"\007\010\004\020\300\361\333\007\"\007\010\020\020\300\361\333\007\"\007\010<\020\300\361\333\007\"\007\010\037\020\300\361\333\007\"\007\010+\020\300\361\333\007\"\007\0107\020\300\361\333\007\"\007\010\006\020\300\361\333\007\"\007\010\022\020\300\361\333\007\"\007\010>\020\300\361\333\007\"\007\010\r\020\300\361\333\007\"\007\010\031\020\300\361\333\007\"\007\010%\020\300\361\333\007\"\007\0101\020\300\361\333\007\"\007\010\000\020\300\361\333\007\"\007\010,\020\300\361\333\007\"\007\0108\020\300\361\333\007\"\007\010\017\020\300\361\333\007\"\007\010\033\020\300\361\333\007\"\007\010\'\020\300\361\333\007\"\007\0103\020\300\361\333\007\"\007\010\002\020\300\361\333\007\"\007\010.\020\300\361\333\007\"\007\010:\020\300\361\333\007\"\007\010\t\020\300\361\333\007\"\007\010\025\020\300\361\333\007\"\007\010!\020\300\361\333\007\"\007\010\034\020\300\361\333\007\"\007\010(\020\300\361\333\007\"\007\0104\020\300\361\333\007\"\007\010\013\020\300\361\333\007\"\007\010\027\020\300\361\333\007\"\007\010#\020\300\361\333\007\"\007\010\036\020\300\361\333\007\"\007\010*\020\300\361\333\007\"\007\0106\020\300\361\333\007\"\007\010\005\020\300\361\333\007\"\007\010\021\020\300\361\333\007\"\007\010=\020\300\361\333\007\"\007\010\014\020\300\361\333\007\"\007\010\030\020\300\361\333\007\"\007\010$\020\300\361\333\007\"\007\0100\020\300\361\333\007\"\007\010\007\020\300\361\333\007\"\007\010\023\020\300\361\333\007\"\007\010?\020\300\361\333\007\"\007\010\016\020\300\361\333\007\"\007\010\032\020\300\361\333\007\"\007\010&\020\300\361\333\007\"\007\0102\020\300\361\333\007\"\007\010\001\020\300\361\333\007\"\007\010-\020\300\361\333\007\"\007\0109\020\300\361\333\007\"\007\010\010\020\300\361\333\007\"\007\010\024\020\300\361\333\007\"\007\010 \020\300\361\333\007\"\007\010\003\020\300\361\333\007\"\007\010/\020\300\361\333\007\"\007\010;\020\300\361\333\007\"\007\010\n\020\300\361\333\007\"\007\010\026\020\300\361\333\007", metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2983 = (f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) get-tuple-element(((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}), token[]) %infeed.30), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2991 = f32[952,128]{1,0:T(8,128)} get-tuple-element((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) %get-tuple-element.2983), index=1, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %get-tuple-element.2984 = f32[816,128]{1,0:T(8,128)} get-tuple-element((f32[816,128]{1,0:T(8,128)}, f32[952,128]{1,0:T(8,128)}) %get-tuple-element.2983), index=0, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.418 = f32[136,768]{1,0:T(8,128)} reshape(f32[816,128]{1,0:T(8,128)} %get-tuple-element.2984), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1461 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.3019, f32[128]{0:T(256)} %get-tuple-element.3020, u32[128]{0:T(256)} %get-tuple-element.3021), kind=kOutput, calls=%fused_computation.549.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.173 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1461), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1451 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.3013, f32[128]{0:T(256)} %get-tuple-element.3014, u32[128]{0:T(256)} %get-tuple-element.3015), kind=kOutput, calls=%fused_computation.551.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.171 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1451), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1441 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.3007, f32[128]{0:T(256)} %get-tuple-element.3008, u32[128]{0:T(256)} %get-tuple-element.3009), kind=kOutput, calls=%fused_computation.553.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.169 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1441), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1436 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.3004, f32[128]{0:T(256)} %get-tuple-element.3005, u32[128]{0:T(256)} %get-tuple-element.3006), kind=kOutput, calls=%fused_computation.554.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.168 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1436), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1426 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.2998, f32[128]{0:T(256)} %get-tuple-element.2999, u32[128]{0:T(256)} %get-tuple-element.3000), kind=kOutput, calls=%fused_computation.556.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1411 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,768]{1,0:T(8,128)} %reshape.418, u32[128]{0:T(256)} %get-tuple-element.2988, f32[128]{0:T(256)} %get-tuple-element.2989, u32[128]{0:T(256)} %get-tuple-element.2990), kind=kOutput, calls=%fused_computation.559.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.163 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1411), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.166 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1426), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %reshape.419 = f32[136,896]{1,0:T(8,128)} reshape(f32[952,128]{1,0:T(8,128)} %get-tuple-element.2991), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1471 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.3025, f32[128]{0:T(256)} %get-tuple-element.3026, u32[128]{0:T(256)} %get-tuple-element.3027), kind=kOutput, calls=%fused_computation.547.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.175 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1471), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1466 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.3022, f32[128]{0:T(256)} %get-tuple-element.3023, u32[128]{0:T(256)} %get-tuple-element.3024), kind=kOutput, calls=%fused_computation.548.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.174 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1466), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1456 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.3016, f32[128]{0:T(256)} %get-tuple-element.3017, u32[128]{0:T(256)} %get-tuple-element.3018), kind=kOutput, calls=%fused_computation.550.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.172 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1456), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1446 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.3010, f32[128]{0:T(256)} %get-tuple-element.3011, u32[128]{0:T(256)} %get-tuple-element.3012), kind=kOutput, calls=%fused_computation.552.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.170 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1446), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1431 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.3001, f32[128]{0:T(256)} %get-tuple-element.3002, u32[128]{0:T(256)} %get-tuple-element.3003), kind=kOutput, calls=%fused_computation.555.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.167 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1431), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1421 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.2995, f32[128]{0:T(256)} %get-tuple-element.2996, u32[128]{0:T(256)} %get-tuple-element.2997), kind=kOutput, calls=%fused_computation.557.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %fusion.1416 = bf16[128,128]{1,0:T(8,128)(2,1)} fusion(f32[136,896]{1,0:T(8,128)} %reshape.419, u32[128]{0:T(256)} %get-tuple-element.2992, f32[128]{0:T(256)} %get-tuple-element.2993, u32[128]{0:T(256)} %get-tuple-element.2994), kind=kOutput, calls=%fused_computation.558.clone, metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.164 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1416), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %copy.165 = bf16[128,128]{0,1:T(8,128)(2,1)} copy(bf16[128,128]{1,0:T(8,128)(2,1)} %fusion.1421), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %bitcast.119 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1406), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.120 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.163), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.121 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.164), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.122 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.165), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.123 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.166), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.124 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.167), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.125 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.168), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.126 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.169), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.127 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.170), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.128 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.171), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.129 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.172), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.130 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.173), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.131 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.174), metadata={op_type="ConcatV2" op_name="concat"}
  %bitcast.132 = bf16[128,1,128]{0,2,1:T(8,128)(2,1)} bitcast(bf16[128,128]{0,1:T(8,128)(2,1)} %copy.175), metadata={op_type="ConcatV2" op_name="concat"}
  %concatenate.221 = bf16[128,14,128]{0,2,1:T(8,128)(2,1)} concatenate(bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.119, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.120, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.121, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.122, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.123, /*index=5*/bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.124, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.125, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.126, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.127, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.128, /*index=10*/bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.129, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.130, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.131, bf16[128,1,128]{0,2,1:T(8,128)(2,1)} %bitcast.132), dimensions={1}, metadata={op_type="ConcatV2" op_name="concat"}
  %fusion.1472 = bf16[128,27,128]{0,2,1:T(8,128)(2,1)} fusion(bf16[128,13,128]{0,2,1:T(8,128)(2,1)} %copy.162, bf16[128,14,128]{0,2,1:T(8,128)(2,1)} %concatenate.221), kind=kLoop, calls=%fused_computation.526.clone, metadata={op_type="ConcatV2" op_name="concat_1"}
  %copy.176 = bf16[128,27,128]{2,1,0:T(8,128)(2,1)} copy(bf16[128,27,128]{0,2,1:T(8,128)(2,1)} %fusion.1472), metadata={op_type="ConcatV2" op_name="concat_1"}
  %fusion.1474 = bf16[128,27,27]{2,1,0:T(8,128)(2,1)} fusion(pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3706, bf16[128,27,128]{2,1,0:T(8,128)(2,1)} %copy.176), kind=kOutput, calls=%fused_computation.525.clone, metadata={op_type="BatchMatMulV2" op_name="MatMul"}
  %copy.177 = bf16[128,27,27]{0,2,1:T(8,128)(2,1)} copy(bf16[128,27,27]{2,1,0:T(8,128)(2,1)} %fusion.1474), metadata={op_name="Select"}
  %reshape.420 = bf16[128,729]{0,1:T(8,128)(2,1)} reshape(bf16[128,27,27]{0,2,1:T(8,128)(2,1)} %copy.177), metadata={op_type="Reshape" op_name="Reshape_14"}
  %fusion.1479 = bf16[128,1024]{1,0:T(8,128)(2,1)} fusion(bf16[1024,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.3695, f32[1024]{0:T(1024)} %get-tuple-element.3694, bf16[857,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.3693, bf16[128,729]{0,1:T(8,128)(2,1)} %reshape.420, bf16[128,128]{0,1:T(8,128)(2,1)} %fusion.1406, /*index=5*/f32[1024]{0:T(1024)} %get-tuple-element.3692), kind=kOutput, calls=%fused_computation.528.clone, metadata={op_type="MatMul" op_name="top_mlp_layer_1/MatMul"}
  %fusion.1484 = f32[128]{0:T(256)} fusion(bf16[512,256]{1,0:T(8,128)(2,1)} %get-tuple-element.3699, bf16[128,1024]{1,0:T(8,128)(2,1)} %fusion.1479, bf16[1024,512]{1,0:T(8,128)(2,1)} %get-tuple-element.3697, f32[512]{0:T(512)} %get-tuple-element.3696, f32[256]{0:T(256)} %get-tuple-element.3698, /*index=5*/f32[256]{0:T(256)} %reduce.48), kind=kOutput, calls=%fused_computation.546.clone, metadata={op_type="MatMul" op_name="top_mlp_layer_3/MatMul"}
  %bitcast.139 = f32[]{:T(256)} bitcast(f32[1]{0:T(256)} %get-tuple-element.3700)
  %fusion.1485 = f32[128,1]{0,1:T(2,128)} fusion(f32[128]{0:T(256)} %fusion.1484, f32[]{:T(256)} %bitcast.139), kind=kLoop, calls=%fused_computation.734.clone, metadata={op_name="top_mlp_layer_4/Sigmoid"}
  %bitcast.114 = f32[128,1]{0,1:T(2,128)} bitcast(f32[128]{0:T(256)} %get-tuple-element.2968), metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %fusion.1486 = f32[1363,128,2]{1,2,0:T(2,128)} fusion(f32[1363,128,2]{1,2,0:T(2,128)} %get-tuple-element.3684, s32[]{:T(256)S(5)} %copy.281, f32[128,1]{0,1:T(2,128)} %bitcast.114, f32[128,1]{0,1:T(2,128)} %fusion.1485), kind=kLoop, calls=%fused_computation.733.clone, metadata={op_type="XlaDynamicUpdateSlice" op_name="XlaDynamicUpdateSlice"}
  ROOT %tuple.386 = (s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) tuple(s32[]{:T(256)} %add.474, f32[1363,128,2]{1,2,0:T(2,128)} %fusion.1486, bf16[19656,128]{1,0:T(8,128)(2,1)} %get-tuple-element.3685, f32[512]{0:T(512)} %get-tuple-element.3686, bf16[13,512]{1,0:T(8,128)(2,1)} %get-tuple-element.3687, /*index=5*/f32[256]{0:T(256)} %get-tuple-element.3688, bf16[512,256]{1,0:T(8,128)(2,1)} %get-tuple-element.3689, f32[128]{0:T(256)} %get-tuple-element.3690, bf16[256,128]{1,0:T(8,128)(2,1)} %get-tuple-element.3691, f32[1024]{0:T(1024)} %get-tuple-element.3692, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.3693, f32[1024]{0:T(1024)} %get-tuple-element.3694, bf16[1024,1024]{1,0:T(8,128)(2,1)} %get-tuple-element.3695, f32[512]{0:T(512)} %get-tuple-element.3696, bf16[1024,512]{1,0:T(8,128)(2,1)} %get-tuple-element.3697, /*index=15*/f32[256]{0:T(256)} %get-tuple-element.3698, bf16[512,256]{1,0:T(8,128)(2,1)} %get-tuple-element.3699, f32[1]{0:T(256)} %get-tuple-element.3700, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3701, token[] %get-tuple-element.3702, /*index=20*/token[] %get-tuple-element.3703, token[] %get-tuple-element.3704, s32[]{:T(256)} %get-tuple-element.3705, pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3706, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3707, /*index=25*/f32[] %get-tuple-element.3708)
}

%wide.wide.cond_wrapper.3107.clone.clone.clone (wide_param.6: (s32[], f32[1363,128,2], bf16[19656,128], f32[512], bf16[13,512], /*index=5*/f32[256], bf16[512,256], f32[128], bf16[256,128], f32[1024], /*index=10*/bf16[857,1024], f32[1024], bf16[1024,1024], f32[512], bf16[1024,512], /*index=15*/f32[256], bf16[512,256], f32[1], f32[256,1], token[], /*index=20*/token[], token[], s32[], pred[128,27,27], s32[128,13], /*index=25*/f32[])) -> pred[] {
  %constant.2418 = s32[]{:T(256)} constant(1363), metadata={op_type="Less" op_name="Less_1"}
  %wide_param.6 = (s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) parameter(0)
  %get-tuple-element.2893 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %wide_param.6), index=0
  ROOT %compare.778 = pred[]{:T(1024)} compare(s32[]{:T(256)} %get-tuple-element.2893, s32[]{:T(256)} %constant.2418), direction=LT, metadata={op_type="Less" op_name="Less_1"}
}

%wide._functionalize_body_11__.3111.clone (wide_param.9: (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], s32[], f32[], /*index=35*/pred[128,729], f32[], pred[128,27,27], s32[128,13], u32[], /*index=40*/s32[], u32[], u32[], u32[], u32[], /*index=45*/u32[], u32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], f32[], f32[], /*index=55*/s32[], f32[], f32[], f32[1], s32[], /*index=60*/pred[128,27,27], s32[128,13], f32[], s32[])) -> (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], s32[], f32[], /*index=35*/pred[128,729], f32[], pred[128,27,27], s32[128,13], u32[], /*index=40*/s32[], u32[], u32[], u32[], u32[], /*index=45*/u32[], u32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], f32[], f32[], /*index=55*/s32[], f32[], f32[], f32[1], s32[], /*index=60*/pred[128,27,27], s32[128,13], f32[], s32[]) {
  %wide_param.9 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) parameter(0)
  %get-tuple-element.3799 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=0
  %get-tuple-element.3800 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=1
  %get-tuple-element.3801 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=2
  %get-tuple-element.3803 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=4
  %get-tuple-element.3804 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=5
  %get-tuple-element.3805 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=6
  %get-tuple-element.3806 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=7
  %get-tuple-element.3807 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=8
  %get-tuple-element.3808 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=9
  %get-tuple-element.3809 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=10
  %get-tuple-element.3810 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=11
  %get-tuple-element.3811 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=12
  %get-tuple-element.3812 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=13
  %get-tuple-element.3813 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=14
  %get-tuple-element.3814 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=15
  %get-tuple-element.3815 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=16
  %get-tuple-element.3830 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=31
  %get-tuple-element.3832 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=33, metadata={op_type="While" op_name="LoopCond_1"}
  %copy.279 = s32[]{:T(256)} copy(s32[]{:T(256)} %get-tuple-element.3832)
  %copy.180 = s32[]{:T(256)} copy(s32[]{:T(256)} %get-tuple-element.3832)
  %get-tuple-element.3833 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=34, metadata={op_type="While" op_name="LoopCond_1"}
  %get-tuple-element.3835 = f32[] get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=36
  %get-tuple-element.3838 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=39, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3839 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=40, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3840 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=41, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3841 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=42, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3842 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=43, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3843 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=44
  %get-tuple-element.3844 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=45, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3845 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=46, sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %get-tuple-element.3846 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=47, sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %get-tuple-element.3847 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=48
  %get-tuple-element.3848 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=49, sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %get-tuple-element.3849 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=50, sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %get-tuple-element.3850 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=51, sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %get-tuple-element.3851 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=52
  %get-tuple-element.3852 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=53
  %get-tuple-element.3853 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=54, sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %get-tuple-element.3854 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=55, sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %get-tuple-element.3855 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=56, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %get-tuple-element.3856 = f32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=57, metadata={op_type="Mul" op_name="while/mul_5"}
  %get-tuple-element.3857 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=58
  %get-tuple-element.3858 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=59, sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %get-tuple-element.3861 = f32[] get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=62
  %get-tuple-element.3862 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=63, metadata={op_type="AddV2" op_name="add"}
  %add.497 = s32[]{:T(256)} add(s32[]{:T(256)} %get-tuple-element.3799, s32[]{:T(256)} %get-tuple-element.3862), metadata={op_type="AddV2" op_name="add"}
  %get-tuple-element.3834 = pred[128,729]{0,1:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=35
  %get-tuple-element.3836 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=37, metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %get-tuple-element.3837 = s32[128,13]{0,1:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=38, metadata={op_type="AddV2" op_name="while/add"}
  %get-tuple-element.3859 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=60, metadata={op_type="Select" op_name="Select"}
  %get-tuple-element.3860 = s32[128,13]{0,1:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=61, metadata={op_type="AddV2" op_name="add_2"}
  %get-tuple-element.3802 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=3
  %get-tuple-element.3816 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=17
  %get-tuple-element.3817 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=18
  %get-tuple-element.3818 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=19
  %get-tuple-element.3819 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=20
  %get-tuple-element.3820 = f32[128]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=21
  %get-tuple-element.3821 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=22
  %get-tuple-element.3822 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=23
  %get-tuple-element.3823 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=24
  %get-tuple-element.3824 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=25
  %get-tuple-element.3825 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=26
  %get-tuple-element.3826 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=27
  %get-tuple-element.3827 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=28
  %get-tuple-element.3828 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=29
  %get-tuple-element.3829 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=30
  %get-tuple-element.3831 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.9), index=32
  %after-all.35 = token[] after-all(), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %after-all.34 = token[] after-all(), metadata={op_type="_RecvTPUEmbeddingDeduplicationData" op_name="RecvTPUEmbeddingDeduplicationData_cluster__0"}
  %after-all.33 = token[] after-all(), metadata={op_type="_RecvTPUEmbeddingActivations" op_name="RecvTPUEmbeddingActivations"}
  %after-all.32 = token[] after-all(), sharding={maximal device=0}, metadata={op_type="InfeedDequeueTuple" op_name="InfeedQueue/dequeue"}
  %broadcast.2938 = f32[1363,128,2]{1,2,0:T(2,128)} broadcast(f32[]{:T(256)} %get-tuple-element.3833), dimensions={}, metadata={op_type="While" op_name="LoopCond_1"}
  %tuple.381 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) tuple(s32[]{:T(256)} %copy.180, u32[]{:T(256)} %get-tuple-element.3800, u32[]{:T(256)} %get-tuple-element.3801, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3802, f32[1]{0:T(256)} %get-tuple-element.3803, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3804, f32[1]{0:T(256)} %get-tuple-element.3805, f32[1]{0:T(256)} %get-tuple-element.3806, f32[1]{0:T(256)} %get-tuple-element.3807, f32[1]{0:T(256)} %get-tuple-element.3808, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3809, f32[1]{0:T(256)} %get-tuple-element.3810, f32[1]{0:T(256)} %get-tuple-element.3811, f32[1]{0:T(256)} %get-tuple-element.3812, f32[1]{0:T(256)} %get-tuple-element.3813, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3814, f32[1]{0:T(256)} %get-tuple-element.3815, f32[512]{0:T(512)} %get-tuple-element.3816, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3817, f32[256]{0:T(256)} %get-tuple-element.3818, /*index=20*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3819, f32[128]{0:T(256)} %get-tuple-element.3820, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3821, f32[1024]{0:T(1024)} %get-tuple-element.3822, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3823, /*index=25*/f32[1024]{0:T(1024)} %get-tuple-element.3824, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3825, f32[512]{0:T(512)} %get-tuple-element.3826, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3827, f32[256]{0:T(256)} %get-tuple-element.3828, /*index=30*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3829, f32[1]{0:T(256)} %get-tuple-element.3830, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3831, pred[128,729]{0,1:T(8,128)(4,1)} %get-tuple-element.3834, f32[] %get-tuple-element.3835, /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3836, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3837, u32[]{:T(256)} %get-tuple-element.3838, s32[]{:T(256)} %get-tuple-element.3839, u32[]{:T(256)} %get-tuple-element.3840, /*index=40*/u32[]{:T(256)} %get-tuple-element.3841, u32[]{:T(256)} %get-tuple-element.3842, u32[]{:T(256)} %get-tuple-element.3843, u32[]{:T(256)} %get-tuple-element.3844, u32[]{:T(256)} %get-tuple-element.3845, /*index=45*/f32[]{:T(256)} %get-tuple-element.3846, f32[]{:T(256)} %get-tuple-element.3847, f32[]{:T(256)} %get-tuple-element.3848, f32[]{:T(256)} %get-tuple-element.3849, f32[]{:T(256)} %get-tuple-element.3850, /*index=50*/f32[]{:T(256)} %get-tuple-element.3851, f32[]{:T(256)} %get-tuple-element.3852, f32[]{:T(256)} %get-tuple-element.3853, s32[]{:T(256)} %get-tuple-element.3854, f32[]{:T(256)} %get-tuple-element.3855, /*index=55*/f32[]{:T(256)} %get-tuple-element.3856, f32[1]{0:T(256)} %get-tuple-element.3857)
  %while.13 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) while((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %tuple.381), condition=%wide.cond_wrapper.2233.clone, body=%wide._functionalize_body_10__.204.clone
  %get-tuple-element.3309 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=31, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3294 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=16, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3293 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=15, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3292 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=14, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3291 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=13, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3290 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=12, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3289 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=11, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3288 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=10, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3287 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=9, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3286 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=8, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3285 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=7, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3284 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=6, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3283 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=5, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3282 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=4, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3280 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=2
  %get-tuple-element.3279 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=1
  %get-tuple-element.3308 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=30, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3307 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=29, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3306 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=28, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3305 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=27, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3304 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=26, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3303 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=25, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3302 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=24, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3301 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=23, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3300 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=22, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3299 = f32[128]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=21, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3298 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=20, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3297 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=19, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3296 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=18, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3295 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=17, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3281 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=3, metadata={op_type="While" op_name="while/LoopCond"}
  %get-tuple-element.3310 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, pred[128,729]{0,1:T(8,128)(4,1)}, f32[], /*index=35*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, s32[]{:T(256)}, u32[]{:T(256)}, /*index=40*/u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/f32[]{:T(256)}, f32[1]{0:T(256)}) %while.13), index=32, metadata={op_type="While" op_name="while/LoopCond"}
  %convert.268 = bf16[13,512]{1,0:T(8,128)(2,1)} convert(f32[13,512]{1,0:T(8,128)} %get-tuple-element.3296)
  %convert.270 = bf16[256,128]{1,0:T(8,128)(2,1)} convert(f32[256,128]{1,0:T(8,128)} %get-tuple-element.3300)
  %convert.269 = bf16[512,256]{1,0:T(8,128)(2,1)} convert(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3298)
  %convert.274 = bf16[512,256]{1,0:T(8,128)(2,1)} convert(f32[512,256]{1,0:T(8,128)} %get-tuple-element.3308)
  %convert.273 = bf16[1024,512]{1,0:T(8,128)(2,1)} convert(f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3306)
  %convert.271 = bf16[857,1024]{1,0:T(8,128)(2,1)} convert(f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3302)
  %convert.272 = bf16[1024,1024]{1,0:T(8,128)(2,1)} convert(f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3304)
  %convert.267 = bf16[19656,128]{1,0:T(8,128)(2,1)} convert(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3281)
  %tuple.384 = (s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) tuple(s32[]{:T(256)} %copy.279, f32[1363,128,2]{1,2,0:T(2,128)} %broadcast.2938, bf16[19656,128]{1,0:T(8,128)(2,1)} %convert.267, f32[512]{0:T(512)} %get-tuple-element.3295, bf16[13,512]{1,0:T(8,128)(2,1)} %convert.268, /*index=5*/f32[256]{0:T(256)} %get-tuple-element.3297, bf16[512,256]{1,0:T(8,128)(2,1)} %convert.269, f32[128]{0:T(256)} %get-tuple-element.3299, bf16[256,128]{1,0:T(8,128)(2,1)} %convert.270, f32[1024]{0:T(1024)} %get-tuple-element.3301, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)} %convert.271, f32[1024]{0:T(1024)} %get-tuple-element.3303, bf16[1024,1024]{1,0:T(8,128)(2,1)} %convert.272, f32[512]{0:T(512)} %get-tuple-element.3305, bf16[1024,512]{1,0:T(8,128)(2,1)} %convert.273, /*index=15*/f32[256]{0:T(256)} %get-tuple-element.3307, bf16[512,256]{1,0:T(8,128)(2,1)} %convert.274, f32[1]{0:T(256)} %get-tuple-element.3309, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3310, token[] %after-all.32, /*index=20*/token[] %after-all.33, token[] %after-all.34, s32[]{:T(256)} %get-tuple-element.3858, pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3859, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3860, /*index=25*/f32[] %get-tuple-element.3861)
  %while.14 = (s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) while((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %tuple.384), condition=%wide.wide.cond_wrapper.3107.clone.clone.clone, body=%wide.wide._functionalize_body_9__.2237.clone.clone.clone.clone
  %get-tuple-element.3351 = f32[1363,128,2]{1,2,0:T(2,128)} get-tuple-element((s32[]{:T(256)}, f32[1363,128,2]{1,2,0:T(2,128)}, bf16[19656,128]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[13,512]{1,0:T(8,128)(2,1)}, /*index=5*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[128]{0:T(256)}, bf16[256,128]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, /*index=10*/bf16[857,1024]{1,0:T(8,128)(2,1)}, f32[1024]{0:T(1024)}, bf16[1024,1024]{1,0:T(8,128)(2,1)}, f32[512]{0:T(512)}, bf16[1024,512]{1,0:T(8,128)(2,1)}, /*index=15*/f32[256]{0:T(256)}, bf16[512,256]{1,0:T(8,128)(2,1)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, token[], /*index=20*/token[], token[], s32[]{:T(256)}, pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, /*index=25*/f32[]) %while.14), index=1, metadata={op_type="While" op_name="LoopCond_1"}
  %copy.178 = f32[1363,128,2]{2,1,0:T(8,128)} copy(f32[1363,128,2]{1,2,0:T(2,128)} %get-tuple-element.3351), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %tuple.377 = (f32[1363,128,2]{2,1,0:T(8,128)}) tuple(f32[1363,128,2]{2,1,0:T(8,128)} %copy.178), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  %outfeed.5 = token[] outfeed((f32[1363,128,2]{2,1,0:T(8,128)}) %tuple.377, token[] %after-all.35), outfeed_shape=(f32[1363,128,2]{2,1,0:T(8,128)}), metadata={op_type="OutfeedEnqueueTuple" op_name="OutfeedEnqueueTuple"}
  ROOT %tuple.392 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) tuple(s32[]{:T(256)} %add.497, u32[]{:T(256)} %get-tuple-element.3279, u32[]{:T(256)} %get-tuple-element.3280, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3281, f32[1]{0:T(256)} %get-tuple-element.3282, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3283, f32[1]{0:T(256)} %get-tuple-element.3284, f32[1]{0:T(256)} %get-tuple-element.3285, f32[1]{0:T(256)} %get-tuple-element.3286, f32[1]{0:T(256)} %get-tuple-element.3287, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3288, f32[1]{0:T(256)} %get-tuple-element.3289, f32[1]{0:T(256)} %get-tuple-element.3290, f32[1]{0:T(256)} %get-tuple-element.3291, f32[1]{0:T(256)} %get-tuple-element.3292, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.3293, f32[1]{0:T(256)} %get-tuple-element.3294, f32[512]{0:T(512)} %get-tuple-element.3295, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3296, f32[256]{0:T(256)} %get-tuple-element.3297, /*index=20*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3298, f32[128]{0:T(256)} %get-tuple-element.3299, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3300, f32[1024]{0:T(1024)} %get-tuple-element.3301, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3302, /*index=25*/f32[1024]{0:T(1024)} %get-tuple-element.3303, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3304, f32[512]{0:T(512)} %get-tuple-element.3305, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3306, f32[256]{0:T(256)} %get-tuple-element.3307, /*index=30*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3308, f32[1]{0:T(256)} %get-tuple-element.3309, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3310, s32[]{:T(256)} %get-tuple-element.3832, f32[]{:T(256)} %get-tuple-element.3833, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)} %get-tuple-element.3834, f32[] %get-tuple-element.3835, pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3836, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3837, u32[]{:T(256)} %get-tuple-element.3838, /*index=40*/s32[]{:T(256)} %get-tuple-element.3839, u32[]{:T(256)} %get-tuple-element.3840, u32[]{:T(256)} %get-tuple-element.3841, u32[]{:T(256)} %get-tuple-element.3842, u32[]{:T(256)} %get-tuple-element.3843, /*index=45*/u32[]{:T(256)} %get-tuple-element.3844, u32[]{:T(256)} %get-tuple-element.3845, f32[]{:T(256)} %get-tuple-element.3846, f32[]{:T(256)} %get-tuple-element.3847, f32[]{:T(256)} %get-tuple-element.3848, /*index=50*/f32[]{:T(256)} %get-tuple-element.3849, f32[]{:T(256)} %get-tuple-element.3850, f32[]{:T(256)} %get-tuple-element.3851, f32[]{:T(256)} %get-tuple-element.3852, f32[]{:T(256)} %get-tuple-element.3853, /*index=55*/s32[]{:T(256)} %get-tuple-element.3854, f32[]{:T(256)} %get-tuple-element.3855, f32[]{:T(256)} %get-tuple-element.3856, f32[1]{0:T(256)} %get-tuple-element.3857, s32[]{:T(256)} %get-tuple-element.3858, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)} %get-tuple-element.3859, s32[128,13]{0,1:T(8,128)} %get-tuple-element.3860, f32[] %get-tuple-element.3861, s32[]{:T(256)} %get-tuple-element.3862)
}

%wide.cond_wrapper.3358.clone (wide_param.8: (s32[], u32[], u32[], f32[19656,128], f32[1], /*index=5*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=10*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=15*/f32[1], f32[1], f32[512], f32[13,512], f32[256], /*index=20*/f32[512,256], f32[128], f32[256,128], f32[1024], f32[857,1024], /*index=25*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=30*/f32[512,256], f32[1], f32[256,1], s32[], f32[], /*index=35*/pred[128,729], f32[], pred[128,27,27], s32[128,13], u32[], /*index=40*/s32[], u32[], u32[], u32[], u32[], /*index=45*/u32[], u32[], f32[], f32[], f32[], /*index=50*/f32[], f32[], f32[], f32[], f32[], /*index=55*/s32[], f32[], f32[], f32[1], s32[], /*index=60*/pred[128,27,27], s32[128,13], f32[], s32[])) -> pred[] {
  %constant.2521 = s32[]{:T(256)} constant(20), metadata={op_type="Less" op_name="Less"}
  %wide_param.8 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) parameter(0)
  %get-tuple-element.3082 = s32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %wide_param.8), index=0
  ROOT %compare.805 = pred[]{:T(1024)} compare(s32[]{:T(256)} %get-tuple-element.3082, s32[]{:T(256)} %constant.2521), direction=LT, metadata={op_type="Less" op_name="Less"}
}

ENTRY %cluster_7035002757448359829_f15n_1__.3522 (arg_tuple.1: (f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=5*/f32[256,128], s64[], f32[19656,128], f32[1024], f32[857,1024], /*index=10*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=15*/f32[512,256], f32[1], f32[256,1], f32[1], f32[1], /*index=20*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=25*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=30*/f32[1])) -> (f32[512], f32[13,512], f32[256], f32[512,256], f32[128], /*index=5*/f32[256,128], s64[], f32[19656,128], f32[1024], f32[857,1024], /*index=10*/f32[1024], f32[1024,1024], f32[512], f32[1024,512], f32[256], /*index=15*/f32[512,256], f32[1], f32[256,1], f32[1], f32[1], /*index=20*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=25*/f32[1], f32[1], f32[1], f32[1], f32[1], /*index=30*/f32[1]) {
  %constant.2519 = s32[]{:T(256)} constant(1), metadata={op_type="AddV2" op_name="add"}
  %constant.2518 = f32[] constant(0)
  %constant.2515 = s32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="add_3"}
  %constant.2514 = f32[1]{0:T(256)} constant({0})
  %constant.2513 = f32[]{:T(256)} constant(0.0014), metadata={op_type="Mul" op_name="while/mul_5"}
  %constant.2512 = f32[]{:T(256)} constant(0), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %constant.2511 = s32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="AddV2" op_name="while/add_7"}
  %constant.2510 = f32[]{:T(256)} constant(2.8), sharding={maximal device=0}, metadata={op_type="Mul" op_name="while/mul_11"}
  %constant.2509 = f32[]{:T(256)} constant(1.74999981e-09)
  %constant.2508 = f32[]{:T(256)} constant(-38000)
  %constant.2507 = f32[]{:T(256)} constant(40000), sharding={maximal device=0}, metadata={op_type="Sub" op_name="while/sub_9"}
  %constant.2506 = f32[]{:T(256)} constant(1e-07), sharding={maximal device=0}, metadata={op_type="Maximum" op_name="while/Maximum_2"}
  %constant.2505 = f32[]{:T(256)} constant(38000), sharding={maximal device=0}, metadata={op_type="Greater" op_name="while/Greater_3"}
  %constant.2504 = f32[]{:T(256)} constant(0.00140000007)
  %constant.2503 = f32[]{:T(256)} constant(2000), sharding={maximal device=0}, metadata={op_type="Less" op_name="while/Less_3"}
  %constant.2502 = u32[]{:T(256)} constant(23), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2501 = u32[]{:T(256)} constant(4294967295), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2500 = u32[]{:T(256)} constant(4294967265)
  %constant.2499 = u32[]{:T(256)} constant(2147483648), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2498 = u32[]{:T(256)} constant(1), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2497 = u32[]{:T(256)} constant(0), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2496 = s32[]{:T(256)} constant(0), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2495 = u32[]{:T(256)} constant(32), sharding={maximal device=0}, metadata={op_type="Cast" op_name="while/Cast_10"}
  %constant.2492 = f32[] constant(0)
  %constant.2490 = f32[]{:T(256)} constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.2489 = s32[]{:T(256)} constant(0), metadata={op_type="While" op_name="LoopCond_1"}
  %constant.344 = s32[]{:T(256)} constant(0), metadata={op_type="While" op_name="LoopCond"}
  %constant.2517 = s32[128,13]{0,1:T(8,128)} constant({...}), metadata={op_type="AddV2" op_name="add_2"}
  %constant.2516 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} constant({...}), metadata={op_type="Select" op_name="Select"}
  %constant.2494 = s32[128,13]{0,1:T(8,128)} constant({...}), metadata={op_type="AddV2" op_name="while/add"}
  %constant.2493 = pred[128,27,27]{2,1,0:T(8,128)(4,1)} constant({...}), metadata={op_type="Select" op_name="while/training/gradients/while/Select_grad/Select_1"}
  %constant.2491 = pred[128,729]{0,1:T(8,128)(4,1)} constant({...})
  %copy.447 = s32[]{:T(256)} copy(s32[]{:T(256)} %constant.344)
  %arg_tuple.1 = (f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) parameter(0), parameter_replication={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true}, sharding={{maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, {maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}}, metadata={op_name="XLA_Args"}
  %get-tuple-element.3933 = s64[]{:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=6
  %custom-call.1 = u32[]{:T(256)} custom-call(s64[]{:T(256)} %get-tuple-element.3933), custom_call_target="X64SplitLow", sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Args"}
  %custom-call = u32[]{:T(256)} custom-call(s64[]{:T(256)} %get-tuple-element.3933), custom_call_target="X64SplitHigh", sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Args"}
  %get-tuple-element.3943 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=16
  %get-tuple-element.3945 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=18
  %get-tuple-element.3946 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=19
  %get-tuple-element.3947 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=20
  %get-tuple-element.3948 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=21
  %get-tuple-element.3949 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=22
  %get-tuple-element.3950 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=23
  %get-tuple-element.3951 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=24
  %get-tuple-element.3952 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=25
  %get-tuple-element.3953 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=26
  %get-tuple-element.3954 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=27
  %get-tuple-element.3955 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=28
  %get-tuple-element.3956 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=29
  %get-tuple-element.3957 = f32[1]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=30
  %get-tuple-element.3927 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=0
  %get-tuple-element.3928 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=1
  %get-tuple-element.3929 = f32[256]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=2
  %get-tuple-element.3930 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=3
  %get-tuple-element.3931 = f32[128]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=4
  %get-tuple-element.3932 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=5
  %get-tuple-element.3934 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=7
  %get-tuple-element.3935 = f32[1024]{0:T(1024)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=8
  %get-tuple-element.3936 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=9
  %get-tuple-element.3937 = f32[1024]{0:T(1024)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=10
  %get-tuple-element.3938 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=11
  %get-tuple-element.3939 = f32[512]{0:T(512)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=12
  %get-tuple-element.3940 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=13
  %get-tuple-element.3941 = f32[256]{0:T(256)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=14
  %get-tuple-element.3942 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=15
  %get-tuple-element.3944 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) %arg_tuple.1), index=17
  %all-reduce.91 = (f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) all-reduce(f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3934, f32[1]{0:T(256)} %get-tuple-element.3945, f32[1]{0:T(256)} %get-tuple-element.3946, f32[1]{0:T(256)} %get-tuple-element.3955, f32[1]{0:T(256)} %get-tuple-element.3956, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.3957, f32[1]{0:T(256)} %get-tuple-element.3947, f32[1]{0:T(256)} %get-tuple-element.3948, f32[1]{0:T(256)} %get-tuple-element.3949, f32[1]{0:T(256)} %get-tuple-element.3950, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.3951, f32[1]{0:T(256)} %get-tuple-element.3952, f32[1]{0:T(256)} %get-tuple-element.3953, f32[1]{0:T(256)} %get-tuple-element.3954, f32[512]{0:T(512)} %get-tuple-element.3927, /*index=15*/f32[13,512]{1,0:T(8,128)} %get-tuple-element.3928, f32[256]{0:T(256)} %get-tuple-element.3929, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3930, f32[128]{0:T(256)} %get-tuple-element.3931, f32[256,128]{1,0:T(8,128)} %get-tuple-element.3932, /*index=20*/f32[1024]{0:T(1024)} %get-tuple-element.3935, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3936, f32[1024]{0:T(1024)} %get-tuple-element.3937, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3938, f32[512]{0:T(512)} %get-tuple-element.3939, /*index=25*/f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3940, f32[256]{0:T(256)} %get-tuple-element.3941, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3942, f32[1]{0:T(256)} %get-tuple-element.3943, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3944), replica_groups={}, to_apply=%or_with_unsigned_bitcast, backend_config="{\"flag_configs\":[],\"barrier_config\":{\"barrier_type\":\"CUSTOM\",\"id\":\"0\"},\"scoped_memory_configs\":[]}"
  %get-tuple-element.2548 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=28
  %get-tuple-element.2533 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=13
  %get-tuple-element.2532 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=12
  %get-tuple-element.2531 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=11
  %get-tuple-element.2530 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=10
  %get-tuple-element.2529 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=9
  %get-tuple-element.2528 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=8
  %get-tuple-element.2527 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=7
  %get-tuple-element.2526 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=6
  %get-tuple-element.2525 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=5
  %get-tuple-element.2524 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=4
  %get-tuple-element.2523 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=3
  %get-tuple-element.2522 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=2
  %get-tuple-element.2521 = f32[1]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=1
  %get-tuple-element.2549 = f32[256,1]{0,1:T(2,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=29
  %get-tuple-element.2547 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=27
  %get-tuple-element.2546 = f32[256]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=26
  %get-tuple-element.2545 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=25
  %get-tuple-element.2544 = f32[512]{0:T(512)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=24
  %get-tuple-element.2543 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=23
  %get-tuple-element.2542 = f32[1024]{0:T(1024)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=22
  %get-tuple-element.2541 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=21
  %get-tuple-element.2540 = f32[1024]{0:T(1024)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=20
  %get-tuple-element.2539 = f32[256,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=19
  %get-tuple-element.2538 = f32[128]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=18
  %get-tuple-element.2537 = f32[512,256]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=17
  %get-tuple-element.2536 = f32[256]{0:T(256)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=16
  %get-tuple-element.2535 = f32[13,512]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=15
  %get-tuple-element.2534 = f32[512]{0:T(512)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=14
  %get-tuple-element.2520 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, /*index=15*/f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, /*index=20*/f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, /*index=25*/f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}) %all-reduce.91), index=0
  %tuple.387 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) tuple(s32[]{:T(256)} %copy.447, u32[]{:T(256)} %custom-call.1, u32[]{:T(256)} %custom-call, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.2520, f32[1]{0:T(256)} %get-tuple-element.2521, /*index=5*/f32[1]{0:T(256)} %get-tuple-element.2522, f32[1]{0:T(256)} %get-tuple-element.2523, f32[1]{0:T(256)} %get-tuple-element.2524, f32[1]{0:T(256)} %get-tuple-element.2525, f32[1]{0:T(256)} %get-tuple-element.2526, /*index=10*/f32[1]{0:T(256)} %get-tuple-element.2527, f32[1]{0:T(256)} %get-tuple-element.2528, f32[1]{0:T(256)} %get-tuple-element.2529, f32[1]{0:T(256)} %get-tuple-element.2530, f32[1]{0:T(256)} %get-tuple-element.2531, /*index=15*/f32[1]{0:T(256)} %get-tuple-element.2532, f32[1]{0:T(256)} %get-tuple-element.2533, f32[512]{0:T(512)} %get-tuple-element.2534, f32[13,512]{1,0:T(8,128)} %get-tuple-element.2535, f32[256]{0:T(256)} %get-tuple-element.2536, /*index=20*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.2537, f32[128]{0:T(256)} %get-tuple-element.2538, f32[256,128]{1,0:T(8,128)} %get-tuple-element.2539, f32[1024]{0:T(1024)} %get-tuple-element.2540, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.2541, /*index=25*/f32[1024]{0:T(1024)} %get-tuple-element.2542, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.2543, f32[512]{0:T(512)} %get-tuple-element.2544, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.2545, f32[256]{0:T(256)} %get-tuple-element.2546, /*index=30*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.2547, f32[1]{0:T(256)} %get-tuple-element.2548, f32[256,1]{0,1:T(2,128)} %get-tuple-element.2549, s32[]{:T(256)} %constant.2489, f32[]{:T(256)} %constant.2490, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)} %constant.2491, f32[] %constant.2492, pred[128,27,27]{2,1,0:T(8,128)(4,1)} %constant.2493, s32[128,13]{0,1:T(8,128)} %constant.2494, u32[]{:T(256)} %constant.2495, /*index=40*/s32[]{:T(256)} %constant.2496, u32[]{:T(256)} %constant.2497, u32[]{:T(256)} %constant.2498, u32[]{:T(256)} %constant.2499, u32[]{:T(256)} %constant.2500, /*index=45*/u32[]{:T(256)} %constant.2501, u32[]{:T(256)} %constant.2502, f32[]{:T(256)} %constant.2503, f32[]{:T(256)} %constant.2504, f32[]{:T(256)} %constant.2505, /*index=50*/f32[]{:T(256)} %constant.2506, f32[]{:T(256)} %constant.2507, f32[]{:T(256)} %constant.2508, f32[]{:T(256)} %constant.2509, f32[]{:T(256)} %constant.2510, /*index=55*/s32[]{:T(256)} %constant.2511, f32[]{:T(256)} %constant.2512, f32[]{:T(256)} %constant.2513, f32[1]{0:T(256)} %constant.2514, s32[]{:T(256)} %constant.2515, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)} %constant.2516, s32[128,13]{0,1:T(8,128)} %constant.2517, f32[] %constant.2518, s32[]{:T(256)} %constant.2519)
  %while.15 = (s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) while((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %tuple.387), condition=%wide.cond_wrapper.3358.clone, body=%wide._functionalize_body_11__.3111.clone
  %get-tuple-element.3453 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=31, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3438 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=16, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_9"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3437 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=15, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_8"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3436 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=14, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_7"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3435 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=13, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_6"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3434 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=12, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_5"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3433 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=11, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_4"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3432 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=10, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_3"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3431 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=9, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_2"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3430 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=8, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_12"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3429 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=7, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_11"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3428 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=6, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_10"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3427 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=5, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations_1"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3426 = f32[1]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=4, sharding={maximal device=0 metadata={op_type="TPUEmbeddingActivations" op_name="while/TPUEmbeddingActivations"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3424 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=2, sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3423 = u32[]{:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=1, sharding={maximal device=0 metadata={op_type="Cast" op_name="while/Cast_9"}}, metadata={op_name="XLA_Retvals"}
  %custom-call.2 = s64[]{:T(256)} custom-call(u32[]{:T(256)} %get-tuple-element.3423, u32[]{:T(256)} %get-tuple-element.3424), custom_call_target="X64Combine", sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_name="XLA_Retvals"}
  %get-tuple-element.3452 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=30, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3451 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=29, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3450 = f32[1024,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=28, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3449 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=27, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3448 = f32[1024,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=26, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3447 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=25, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3446 = f32[857,1024]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=24, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3445 = f32[1024]{0:T(1024)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=23, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3444 = f32[256,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=22, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3443 = f32[128]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=21, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3442 = f32[512,256]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=20, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3441 = f32[256]{0:T(256)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=19, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3440 = f32[13,512]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=18, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3439 = f32[512]{0:T(512)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=17, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3425 = f32[19656,128]{1,0:T(8,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=3, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  %get-tuple-element.3454 = f32[256,1]{0,1:T(2,128)} get-tuple-element((s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1]{0:T(256)}, /*index=5*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=10*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=15*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=20*/f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, f32[256,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=25*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=30*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, s32[]{:T(256)}, f32[]{:T(256)}, /*index=35*/pred[128,729]{0,1:T(8,128)(4,1)}, f32[], pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, u32[]{:T(256)}, /*index=40*/s32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, u32[]{:T(256)}, /*index=45*/u32[]{:T(256)}, u32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=50*/f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, /*index=55*/s32[]{:T(256)}, f32[]{:T(256)}, f32[]{:T(256)}, f32[1]{0:T(256)}, s32[]{:T(256)}, /*index=60*/pred[128,27,27]{2,1,0:T(8,128)(4,1)}, s32[128,13]{0,1:T(8,128)}, f32[], s32[]{:T(256)}) %while.15), index=32, sharding={maximal device=0 metadata={op_type="_TPUReplicate" op_name="cluster"}}, metadata={op_type="While" op_name="LoopCond"}
  ROOT %tuple.391 = (f32[512]{0:T(512)}, f32[13,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, f32[512,256]{1,0:T(8,128)}, f32[128]{0:T(256)}, /*index=5*/f32[256,128]{1,0:T(8,128)}, s64[]{:T(256)}, f32[19656,128]{1,0:T(8,128)}, f32[1024]{0:T(1024)}, f32[857,1024]{1,0:T(8,128)}, /*index=10*/f32[1024]{0:T(1024)}, f32[1024,1024]{1,0:T(8,128)}, f32[512]{0:T(512)}, f32[1024,512]{1,0:T(8,128)}, f32[256]{0:T(256)}, /*index=15*/f32[512,256]{1,0:T(8,128)}, f32[1]{0:T(256)}, f32[256,1]{0,1:T(2,128)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=20*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=25*/f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, f32[1]{0:T(256)}, /*index=30*/f32[1]{0:T(256)}) tuple(f32[512]{0:T(512)} %get-tuple-element.3439, f32[13,512]{1,0:T(8,128)} %get-tuple-element.3440, f32[256]{0:T(256)} %get-tuple-element.3441, f32[512,256]{1,0:T(8,128)} %get-tuple-element.3442, f32[128]{0:T(256)} %get-tuple-element.3443, /*index=5*/f32[256,128]{1,0:T(8,128)} %get-tuple-element.3444, s64[]{:T(256)} %custom-call.2, f32[19656,128]{1,0:T(8,128)} %get-tuple-element.3425, f32[1024]{0:T(1024)} %get-tuple-element.3445, f32[857,1024]{1,0:T(8,128)} %get-tuple-element.3446, /*index=10*/f32[1024]{0:T(1024)} %get-tuple-element.3447, f32[1024,1024]{1,0:T(8,128)} %get-tuple-element.3448, f32[512]{0:T(512)} %get-tuple-element.3449, f32[1024,512]{1,0:T(8,128)} %get-tuple-element.3450, f32[256]{0:T(256)} %get-tuple-element.3451, /*index=15*/f32[512,256]{1,0:T(8,128)} %get-tuple-element.3452, f32[1]{0:T(256)} %get-tuple-element.3453, f32[256,1]{0,1:T(2,128)} %get-tuple-element.3454, f32[1]{0:T(256)} %get-tuple-element.3426, f32[1]{0:T(256)} %get-tuple-element.3427, /*index=20*/f32[1]{0:T(256)} %get-tuple-element.3431, f32[1]{0:T(256)} %get-tuple-element.3432, f32[1]{0:T(256)} %get-tuple-element.3433, f32[1]{0:T(256)} %get-tuple-element.3434, f32[1]{0:T(256)} %get-tuple-element.3435, /*index=25*/f32[1]{0:T(256)} %get-tuple-element.3436, f32[1]{0:T(256)} %get-tuple-element.3437, f32[1]{0:T(256)} %get-tuple-element.3438, f32[1]{0:T(256)} %get-tuple-element.3428, f32[1]{0:T(256)} %get-tuple-element.3429, /*index=30*/f32[1]{0:T(256)} %get-tuple-element.3430)
}

